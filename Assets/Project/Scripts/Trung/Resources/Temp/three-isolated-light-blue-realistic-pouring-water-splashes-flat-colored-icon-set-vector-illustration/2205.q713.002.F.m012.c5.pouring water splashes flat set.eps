%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 2205.q713.002.F.m012.c5.pouring water splashes flat set.eps
%%Creator: Adobe Illustrator(R) 24.0
%%For:  
%%CreationDate: 31.05.2022
%%BoundingBox: 0 0 3007 1380
%%HiResBoundingBox: 0 0 3006.5875 1379.4216
%%CropBox: 0 0 3006.5875 1379.4216
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.0.1 x341 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.164050, 2019/10/01-18:03:16        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2205.q713.002.F.m012.c5.pouring water splashes flat set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator 24.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2022-05-31T16:58:47+04:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-05-31T16:58:48+04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-05-31T16:58:48+04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>120</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqw6+g+oeZJAu&#xA;0V4vqp/r1qfxBzY45cWP3OryR4Mv9ZNNQYT2ZHiP1in8cpx7FyMhuLfkyTnoaL/vuR1/Hl/xtg1g&#xA;9adEbxp5mK5bsVdirsVdirsVdiqQ+YyPr2n16lZ6fP8Ad5l6f6ZfD9Lh6r6o/H9DG9SJikuG/apF&#xA;NGfAo3H+OZmPevi4OTYn4PQgQQCNwdxmod07FXYq7FXYq7FXYq7FXYq7FWO6m31fzCknQTQq3zMb&#xA;EH8GzMxb4683BzenLfeFHzNfMLT003Z/hUDxbb9Vclpob2x1WTamQ2FqLWygth/upFUnxIG5+/MT&#xA;JLikS5uOHDEDuV8gzdirsVdirsVdirsVY551hYWlteoP3ltL/wAK/wDaozM0Z3Me9wddH0iXcUv0&#xA;/UvrduxHw0NGQmtO+2XTx8JaMeTiCO8iyVsbpOwm5D/ZKB/xrlWtHqHub9AfSfeyXMJznYq7FXYq&#xA;7FXYq7FUi8228ptYb6Icnsn5MP8AIfZv4ZlaWQsxPVw9ZE8IkP4WLPBfXzvOgUQzJxTkeigg0271&#xA;GZwMY7OvMZS36Fn9hMJrG3lBqJI0b71BzUzFSIdzjNxB8lfIs3Yq7FXYq7FXYq7FXYq7FWP+ak4z&#xA;6dP3WVoj/wA9F/5tzL0p2kHC1Y3ifNLpU+tazpsJ3BkMjD2jHL+GXA8MJFoI4skQzHNc7R2KuxV2&#xA;KuxV2KuxV2KoDXrf6xo13FSp9Mso90+IfiMtwSqYLTqI8UCGGy6WzhZLKT0UkQc1qQD92bIZO91Z&#xA;xXvHZNfIdUa/hbZkMdR7/EDmPrv4S5PZ/wDEGWZgOxdirsVdirsVdirsVadFdGRxyRgQynoQdiMI&#xA;NIItgdlBNZXMsBblB6zxL4hkJof9kBm0nISAPWnUQiYkjpbLPLprotqO6KUPzRiv8MwNR9Zdjpv7&#xA;sJjlLe7FXYq7FXYq7FXYq7FXYqkvmqPlZWzfyXUTfrX+OZOlPqPuLi6sekf1ggdKj5+YIT2igkf7&#xA;yF/jluU1jPvacIvIPcyjMF2DsVdirsVdirsVdirsVaZQylSKgihHscVYZYVWJoG+3bO8Lf7A0/Vm&#xA;znzvvdVDYV3bIryp8OsaknYhW/Gv8cq1X0RbNH9cmVZguxdirsVdirsVdirsVdirE9ZhMOoXagfb&#xA;C3UQ8SNmH/BJ+ObDCbiPk63PGpH5pp5ZkDW1zGDUJOSp7UkVX/WxyjUjce5yNKdiPNOMxnKdirsV&#xA;dirsVdirsVdirsVSzzIpOjzFdmQxupIrQrIprl+n+sNGpHoKV+WhIdUYyEM6W5Vj7mX/AJty/U1w&#xA;/H9DjaW+Pfu/SyfMF2DsVdirsVdirsVdirsVdirCtWiMOtahb9Euo/VT5laH8a5s8RuET3OqzCsk&#xA;h3t+R5nfUroyEs7xBix9mH9cGtFRCdAbkb7maZrXaOxV2KuxV2KuxV2KuxVIfMqcLixuOgLPA58e&#xA;Y5L+KZl6Y7EfFw9UN4n4NeVIljN8qmqGRGT/AFSu39MdUbpdGK4k/wAxHMdirsVdirsVdirsVdir&#xA;sVS/zAvLRb0f8VMfu3y3B9Y97TqB+7PuSfyr636RuTJShjPAjw9Vjv8ATmTqq4R+Oji6S+I3+N2U&#xA;ZguwdirsVdirsVdirsVdirsVYv5ts+d/YTAlfUDwyMOtAOQH01OZ2ln6SHX6yHqiWvLyrH5hmVRQ&#xA;Nahh/sXVcOoN4x70aYVkP9VlOYDsXYq7FXYq7FXYqgLXUXkv7m3k4ekiLNbyLXeM1VuXuGU5bLHU&#xA;QWmGS5EHlzCLt50niEiAhTWlduhpkJRo02RlYtLvMyA6S0neGSORfocA/gct0x9fvadUPRfdSB8q&#xA;3EZvL23Xqip1/wAln/gwy3VR2BadJIcRH46sjzDc52KqF1fWloIjcyrEJpFhiLftSP8AZX6aZKMD&#xA;LkwnkjGrPPZXyLN2KuxV2KuxV2KoTV1LaTegbkwSgf8AAHLMX1j3teb6D7ilPl0EXsoP8jGvzkrm&#xA;RqPpDjab6j+OrIcw3NdirsVdirsVdirsVdirsVSjzNHWxhl/3zPGxPsx4H/ieZGmPqI7w42qHpB7&#xA;ilmmHh5itz/v2GRP+B+LL8u+M+9x8O2Ue5lWYDsXYq7FXYq7FXYqkNw0WlapaSzGsNyj2reC/HzQ&#xA;n/giDmXG5xIHMbuHKscwTyOyeoiIoVAFUdAOmYpNuWBSXeZEL6HeAdQnL/gSG/hlunPrDTqReMpF&#xA;oRSLWPWGxnYxMf8AJeNXX/hlzLz7wrucPT7TvvT3Trhm1LUYJfQWVJFYLE5MhQoArSKehoB0zEyR&#xA;9MSLczFL1SBr8d6ZZS3pLqwF1rmk2Y9ORLeR7y4QuvNeCFIWCE8iOb9R4Zk4vTCR79v1uLm9WSMe&#xA;7c/oTrMZykqOsie9ubKzAkkgjVvUHxDkWAZfDYHLxhqIlLq45z3Ixj0TROfBef26DlTpXvlJbw3g&#xA;S7FXYqhtTYLpt2x6LDIT9CHJ4/qHva8v0H3JH5XmeS8l9ReLFH267Bx/XMrUigHE0huRZLmE57sV&#xA;dirsVdirsVdiqjeXtrZWz3N1IIoI6c5G6CpoPxOShAyNDmxnMRFnYL4J4biFJoXEkUgDI6moIPcH&#xA;BKJBopjIEWOSD15OWj3fikZkH+w+P+GWYD6w1agegpBAeOr6dKP9+Mlf9dCMy5fRIOFH64l3kXVd&#xA;S1K91ia5uDLbrKogQ/ZWpf7HgKUwa3FGEYgDek6DLOcpkmxbLswHZOBBFQajxGKuxV2KuxVKPNdm&#xA;bnRZgq8pIiskfzBof+FJzI0s6mHG1cOLGW/LOpTX2mBpx+/gYwyHuSoBqfvwanGIy25FdLlM4b8x&#xA;sqSxyzaldWstyht7i1AS0/3YNyrydOh5AYAQIggbg82RBMyCdjHkxNZZII3PSa3SKSn+VExB/wCI&#xA;ZsKB9xt1tke8V9jJbB9KtptWvEMrzKwmvJJBVuPpB0VCOqKvQZgzEiIjp0+bn4zCJnLe+vy+5jyf&#xA;mjDDaM17YSpcVYxAUWNkqaEs24oOuxzLPZxJ2Ipw49qbbxPEx3TPOzN5rXW7sD6vMpiZE+LhER8P&#xA;HxoQCfpzLyaQeFwR5uFDWEZ+OXuej6/fRxWwtlek9zQAA0IjBq7HwHGozUYIWb6B3eoyUK6lb5Zt&#xA;Y006CdEEZlT4kUUDHkaMe5JGHUyuRCNLACIKb5juS7FXYq7FUDrr8NGvT4wuv/BCn8ctwD1j3tOo&#xA;NYz7km8u8hrtxHX4BAGUfMqD/wARzJ1H0D3uLpv7w+5k+YLsHYq7FXYq7FXYqo3czwwGRE58eorT&#xA;bxyUI2aYzkQLSTzLc6RfeXr2O6coixeoDTcOp+CnieVBmTp4zjkFOJqZwniIPcwHyF5hvItftLAX&#xA;btaM5jktixKAuppRTsPi8M2etwxMCa9TqtDlnGcQSeEs087+bI9MiGnQqst1dKVlDHaONtqkDu1d&#xA;s1+j0pmeI8g7HXasYxwjclJNZlb/AA21wrFWijD8l2IIFDSmZWMVkpxslnHtzYb5e8y6vpqm4sZD&#xA;B6324yAysATxqDXM7LgjkHqDr45Z4ZHhL1i78zLZ6Ba3F8n+5G+iHo2kQJZ5HUUAHUdRmkjp+LIR&#xA;H6QebvZ6rhxgy+qQ5KHlfTrzR9NtNOZq3Mrme4XqEDU+D7hv75LUTjkkZdOTDS45YoiPXmWT5hOw&#xA;dirsVWyxrLE8bfZdSrfIimEGjaCLFMa8tXSwXTwPsbpmqP5Z4wQ4/wBkBXM3UxsX3fc4OlnRrv8A&#xA;vRuqy6dbeYNJmmH+lz+rBCSpYBeNTShAU8iNyDtXKsQkccgOQ3bcpjHJEnmbDGNXtLpNSvniaqM8&#xA;wdT0Cn95t8+WZuKQMRfk4GaBE5V5ql55qPl/U4iV+tW+owW9xNH9lojwEfwHetVStDkY6bxYnoYk&#xA;j3pnq/BmOokAfd0Yh+ZXm+21h4RbI6wRoyR+oAGJYjm1ATtQDMvSac4om+ZacucZ8gI+mLHdIvoY&#xA;/qirR5gw4xUJqwatDTMqXJxMmOXGSA9URLrV7xXkqsl++4/ktk3IH+e+aokY4/1fvdkAcst/4vuZ&#xA;yiKiKiDiigBVHQAbAZrCbdsBTeBLsVdirsVSrzS3HQbrxbgv/BOoy/Tf3gcfVn92Us0X4fMZP89q&#xA;w+kSA5fm/u/i4+D+9/zWUZguwdirsVdirsVdirsVYf5k01Zmn05/3cdynO3kG4+Egkf7FvwzY6fJ&#xA;VS7nWarFdx72G6d+VerC6e7h1JFCkksIzWvXYcx+vMqWuiOYa/yvFGu5h3mNtYttWube6mZpIGAM&#xA;qlviBAKMSSTutOpzMxyBiKaBgiOe583oIuTc+WONOSXCGP2BYBx+BOYfD608VQeZw6xPGiJwVgoA&#xA;ruDQZntUtLEm7eieTBr+o6lF5i1WQyRRqRZxTfEzfDxD9qKK1Hid81+oMREwjs5WKB4hOR4pDveh&#xA;aPKZbyZ3PKUqCfkT/ZmuzCohzsBuRTjMZynYq7FXYqwPWXurLUr+W0XlNazrcxoRUEyJXcCm1c2u&#xA;ICUQDyIp1GYmMyRzBv5pRqf5ix6lZvb3mlQyGhUM7mqSUpyAK1Ug++XY9DwG4yLj5teZjhlAK3lb&#xA;UJ9Q0WaSYsZSGUlzVvhBjFfeiZHPERkKbMJJiQTbEPNuuO1zGkij1IIFhgKj9lakFqnrVszMMBEb&#xA;dTbiyicshfKOyV6VoOr68saxgLHHyrcSE0NTufow5Mojzb4QESa6sq0vy7o+iOJDKL6+IorEUjXx&#xA;oO+UGcp+QTOQHm9F8oW0zWz6jcGss/wRbU4xqe3zb9WavVyF8I6Ow0cTXEerIcxHNdirsVdirsVY&#xA;prvmXRr+R9Hs7kTXsNwiXUSq1ECmrfERxNCKbHM3T4ZR9RG1OFqsgI4Rztq0kEWu2DnpJ6kRPzWq&#xA;/jk5i8ZasZrJFlma92TsVdirsVdirsVUL2+tLKAz3UgjjG1T3PgANyclCBkaDCeQRFlhPmTzX9Zt&#xA;hNb2pWK1kDrcMfip0YU+R3Fc2WDTcJ3PN1eo1XGNhy6pzp2pxvZxyLsritB79coyY93Ix5RwpHda&#xA;HpUq6k90pliv+DXSkmg9FAF48dxTjXL4zltXRqNIzSfLulSaYkcczR2ilfTQnkdloNz7bZHJnkJc&#xA;t0wwRlG72QVp+W3k6zulkdDcIu4WRid/9WvE/TidXkIbBiiDuUz1K7020H7o8VVaLHUVNOlBkccJ&#xA;S5teWcY8kk0jzXPa6ndTeks0bBEZeRBWlTRTuO47ZkZdMJRAcfFqjGRNXbONI16w1RSIGKzKKvC+&#xA;zAePgRmty4JQ5u0w6iOTlzTHKW92KpBqvm+ys5Ggt1N1cA8TxNEB8K71PyzLxaSUtzsHDzayMTQ3&#xA;LC9U81yw6hNdTqgmliBEa1KmmwHU7imbDHpxwgB1s9QeIyPVB3nlvSfMNkLtCLO9ZQz0Pw1I7jwy&#xA;QySga5hlCiLCJ8qabq2k2KwSwiUfGDwYFTViQQfpyOaUZdUx4gbpLb7yYt5freX0voRcQghbq7An&#xA;wqQPHLBnoUN2MYkDfZMdTvbHSE+ox0hTiquVBJbiOgA6DfI44me5Y5JcOwSZJYrm+F2rUggHpqTt&#xA;yd9qb/62XVQpoekaP5rtIY4rK8hNoI0VEkryQgCgJ2qK+O+arLpSbkDbtsOriKjIUydWV1DKQysK&#xA;qw3BB75gkOwBbxVJNY812Gnu0CA3Fyv2kU0VT4M39MycWllPfkHFzauMNuZY3cecNXnclZltY+yR&#xA;oGP3tX9YzNjpIDpbgS1sz1phWr67r0gltLXVJYTHLJ8DuylwxqKNUqDy5VrT55lxwxG/CGqOY8iS&#xA;s8tKNJiEs0qi/uHDcQQ7eC1pX+auHIOL3MZT3ZHqMyXVlDCzlqoyzL3qdq198phGiVlOwGLWOseb&#xA;rHUoYpp7k2luxQyhmRCtKBy/Q0Hjl0scCOQbeM1YNM20zzZrZgjf62Dy+IRzKCCCagctz09xmJPS&#xA;w7kw1eQdfmyGy86J6ixajB6HIbToeSH3pvt8icxZ6PrE25ePW71IUySKWOWNZI2DxuKqymoIOYZF&#xA;bFzgQRYXYEuxVh/nyG6L2025tVUrt0Vye/zGbDQkbjq6ztCJ2PRjF7EZ4qirW5QJQfsVFCCO38cz&#xA;Ymve4Mt/clEmt6rY2P1Tgw4/D6g+wR0rUePhlvhxkbYccgKUNN8xzxF0uHKq4pyUdu4IGSniBYxm&#xA;QjbLzi8MLxVKKCeAADbe1emQlpwTbOOYgUpP5vlYmpmIP+XT8BhGAIOU96FlvNS1AhbZGiiP2pCe&#xA;v+y/pkxER5sbJTfT9NNvaqCaJWrynarHrTxyqU7LOMWQ+T7O5l1hLiJWW3h5GRz0oVIC+53zE1cw&#xA;IUeZcrRwJnY5Bn+ap3K2ZWeJ0RuLMpCt4EjY4Qd0EbPK5rOa3uXt7kGGVdvi6V+fgfHN4Jgiw8/K&#xA;BiaOxSnXtLu5oVMSgTx1KK3R1PUBunyy3HMMTHvSa41y/trSOCW3kt3jADPTqBsKHplgiCbXwyeS&#xA;I03zfEAI7mQr4SCo/wCCA2yMsXcnhkG9X8wwxNby2c6ykE+ogJIINOoGMYd6BAkpHq2qy6m46vIS&#xA;PhUHoPvPXLIxADOECDZTnQrHUJJEkuI2hgQh0Rias/jx7ZCcg1mAHVlT8ktfSl+2WBRD1UUNflXb&#xA;bMcc7DM7Ci9A8sQ3UOi26XNQ+5VT1CE1UHNTqSDM07nSxIxi01yhyHl2oWNxaX0kF3VXJJEh6NU7&#xA;Nt2ObzHMSjYefyYzGVSUljaIkSfBzHwSjcdexH8MN2xArmlV/wCW5bmYzW7As/2lX4qnx2+Ifdls&#xA;cwHNicZPJLW0HWreQMkTcl3DoaEffxOT8SJY8EgrpB5mQH4navZ2V/u5VpguCfUpr5f1q5kMk6Mt&#xA;ftSP8X6q4fFiOS8EinkFoLa3SIvyKCgANSfuqMqMrLKqRNHjtXSXbmQY4z1B7tTtt9+Q5nZlyG7O&#xA;fJ0N1Foy+vUK7loFPUIQP1mpzWasgz2dtookQ3TzMVy3Yq06I6FHUMjCjKwqCPcHCDSCLSG88mab&#xA;K5ktXe0k/wAg1X7jv9xzKhq5DY7uJPRQO42SmfyLqBYmO5if3YMhPzoGy+Otj1BcaWgl0IS648h6&#xA;pWptYZz4gp/xvxy2Oth301S0WTutankS8oA2lxkkbnnEP64nWR/nfeo0c/5v2hfH5F1ESApYwxj3&#xA;ZP1rvidZDvT+SnfJNbfyXfg/HcQQjxjQyH73ofxyiWsj3Et0dDLvATO38n6YpV7ppLuUdS7EL9w/&#xA;rlMtXLps5EdFAc906ihihjEcSLHGv2UUAAfQMxiSdy5QiAKC/Al2Koa902xvk4XUKygdCftD5MNx&#xA;k4ZJR5FrnijPmEln8mQUpZ3Ulup+1G4EiH6DxzJjrD/ELcWWiH8JpLbjyZqlCUNvKfblGfuAC5dH&#xA;WR82iWin5JW/kTVHPx2MTe5MZ/Wcu/OQ72r8pl/BUv8AlX18KMNLg5e3o1/Xh/OQ7/vX8rl7vtR1&#xA;v5D1VVAVYIB/Lyp/xBTlZ1sPNkNDkPcmFt5GulP728WMd/SUkn6TxyqWtHQNsdAepTvTfLOlWDCR&#xA;IzLMNxLL8RB9h0GY2TUzl7nLxaWEN+ZTXKHIdiqhd2NneR+ndRLKnbkNx8j1H0ZKEzE2CwnjjIUR&#xA;aSz+TLSn+h3MlsT1U/vEP+xNP15lR1h6i3Floo/wkhLLjyZqdCUe3mp02aNj9CimXR1kfNolop+R&#xA;QsflbX0NPRqO3GZVp+OTOpx9/wBjWNJkHT7XSeW/MZX4IHG/Qzof+NhiNRj7/sU6bL3fa6PyZrsu&#xA;8npxn/Lep/4UNidZAKNFkPNG23kW8U/vbxIx4xqWP3njlctaOgbY6CXUpzp3lTSbNhIUNxMN+ctD&#xA;Q+y9MxsmqnLycnHpIR35lOMx3KdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:3bd0f7d9-d581-4f5c-9556-5e7216034b23</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:3bd0f7d9-d581-4f5c-9556-5e7216034b23</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:cca7a739-2854-5341-8708-eb8c81ef5ef1</stRef:instanceID>
            <stRef:documentID>xmp.did:272a146f-fcf6-4b81-ba9a-fc021e05d19d</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d058fa9a-846e-416c-b86e-eecf4e6822f2</stEvt:instanceID>
                  <stEvt:when>2021-11-02T10:11:07+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3bd0f7d9-d581-4f5c-9556-5e7216034b23</stEvt:instanceID>
                  <stEvt:when>2022-05-31T16:58:48+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3006.587416</stDim:w>
            <stDim:h>1379.421460</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1379.42 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1379.42 li
3006.59 1379.42 li
3006.59 0 li
cp
clp
3006.59 1379.42 mo
0 1379.42 li
0 0 li
3006.59 0 li
3006.59 1379.42 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1908.72 1072.78 mo
1908.63 1082.1 1905.54 1091.33 1899.49 1100.02 cv
1894.54 1107.15 1888.78 1115.61 1880.21 1122.19 cv
1873.17 1127.6 1864.04 1131.82 1854.77 1136.79 cv
1846.77 1141.09 1838.28 1146.17 1828.76 1150.1 cv
1820.24 1153.61 1811.3 1157.93 1801.66 1161.11 cv
1792.81 1164.04 1783.24 1166.41 1773.53 1169.03 cv
1764.47 1171.48 1754.87 1173.5 1745.11 1175.67 cv
1735.91 1177.72 1726.23 1179.13 1716.45 1180.92 cv
1707.12 1182.62 1697.16 1181.9 1687.36 1183.35 cv
1677.95 1184.75 1668.31 1185.53 1658.5 1186.69 cv
1649.03 1187.8 1639.37 1188.21 1629.56 1189.08 cv
1620.04 1189.93 1610.64 1194.05 1600.83 1194.67 cv
1591.27 1195.28 1581.56 1196.06 1571.76 1196.44 cv
1562.17 1196.8 1552.38 1193.53 1542.59 1193.67 cv
1532.98 1193.81 1523.3 1196.43 1513.51 1196.34 cv
1503.73 1196.25 1494.11 1193.02 1484.52 1192.7 cv
1474.73 1192.38 1464.88 1195.71 1455.3 1195.16 cv
1445.5 1194.6 1435.74 1194.52 1426.2 1193.74 cv
1416.4 1192.94 1406.71 1191.79 1397.21 1190.76 cv
1387.41 1189.7 1378.25 1184.73 1368.8 1183.44 cv
1359.02 1182.1 1349 1183.52 1339.62 1181.94 cv
1329.86 1180.3 1320.73 1176.3 1311.45 1174.42 cv
1301.7 1172.44 1291.52 1173.45 1282.35 1171.23 cv
1272.63 1168.87 1264.54 1161.65 1255.53 1159.03 cv
1245.86 1156.22 1235.37 1157.31 1226.58 1154.21 cv
1217 1150.85 1207.8 1147.44 1199.35 1143.76 cv
1189.9 1139.66 1180.58 1136.15 1172.66 1131.71 cv
1163.49 1126.56 1155.65 1120.24 1148.72 1114.7 cv
1140.28 1107.96 1133.05 1100.75 1128.23 1093.53 cv
1122.35 1084.73 1120.88 1074.66 1120.97 1065.34 cv
1121.06 1056.02 1123.28 1046.37 1129.32 1037.68 cv
1134.28 1030.55 1140.76 1022.66 1149.33 1016.08 cv
1156.37 1010.67 1165.57 1006.64 1174.84 1001.67 cv
1182.84 997.376 1191.72 993.325 1201.24 989.401 cv
1209.76 985.888 1219.13 983.235 1228.77 980.048 cv
1237.62 977.124 1246.03 971.138 1255.74 968.511 cv
1264.8 966.06 1274.75 965.481 1284.5 963.308 cv
1293.71 961.258 1303.67 961.53 1313.45 959.741 cv
1322.77 958.035 1332.28 956.298 1342.08 954.843 cv
1351.48 953.446 1360.91 950.788 1370.72 949.634 cv
1380.18 948.52 1389.82 947.243 1399.62 946.366 cv
1409.14 945.515 1418.77 943.763 1428.58 943.144 cv
1438.14 942.542 1448.02 946.201 1457.82 945.829 cv
1467.41 945.464 1477 941.414 1486.79 941.276 cv
1496.4 941.142 1506.1 944.851 1515.89 944.943 cv
1525.67 945.036 1535.3 945.544 1544.9 945.859 cv
1554.69 946.181 1564.44 944.328 1574.02 944.874 cv
1583.81 945.431 1593.45 946.492 1602.99 947.275 cv
1612.79 948.079 1622.66 946.883 1632.16 947.914 cv
1641.95 948.975 1651.68 949.723 1661.13 951.016 cv
1670.91 952.355 1680.03 956.947 1689.41 958.521 cv
1699.18 960.161 1708.81 961.26 1718.1 963.141 cv
1727.84 965.116 1738.06 964.033 1747.24 966.259 cv
1756.95 968.616 1765.86 973.146 1774.87 975.767 cv
1784.53 978.577 1793.83 981.476 1802.61 984.566 cv
1812.2 987.936 1822.23 989.283 1830.69 992.958 cv
1840.13 997.061 1847.03 1005.2 1854.95 1009.65 cv
1864.12 1014.79 1874.28 1017.25 1881.22 1022.79 cv
1889.66 1029.53 1893.88 1039.05 1898.7 1046.26 cv
1904.57 1055.06 1908.81 1063.46 1908.72 1072.78 cv
cp
.541176 .772549 .92549 rgb
f
1396.2 978.443 mo
1388.24 980.324 1380.36 982.16 1372.35 983.828 cv
1364.33 985.453 1356.33 986.694 1348.5 988.33 cv
1340.5 989.931 1332.59 991.353 1324.75 993.054 cv
1320.78 993.927 1316.8 994.685 1312.86 995.536 cv
1306.98 996.789 li
1301.04 998.144 li
1296.91 999.014 1292.85 999.647 1288.9 1000.27 cv
1286.92 1000.58 1284.98 1000.93 1283.08 1001.32 cv
1281.17 1001.69 1279.37 1002.14 1277.44 1002.69 cv
1273.62 1003.74 1269.83 1004.98 1266 1006.23 cv
1260.23 1008.15 li
1258.3 1008.79 1256.34 1009.41 1254.48 1010.1 cv
1246.97 1012.88 1239.51 1015.99 1232.32 1019.6 cv
1228.73 1021.42 1225.17 1023.32 1221.8 1025.51 cv
1218.45 1027.71 1215.14 1030.08 1212.64 1033.31 cv
1213.63 1031.53 1214.94 1029.92 1216.36 1028.44 cv
1217.78 1026.95 1219.31 1025.57 1220.91 1024.28 cv
1224.11 1021.71 1227.48 1019.36 1230.95 1017.18 cv
1237.93 1012.87 1245.18 1009.03 1252.68 1005.66 cv
1256.47 1004.02 1260.04 1002.24 1263.81 1000.59 cv
1267.55 998.916 1271.37 997.347 1275.3 995.943 cv
1277.23 995.255 1279.33 994.584 1281.37 994.046 cv
1283.42 993.499 1285.46 993.06 1287.48 992.635 cv
1291.51 991.776 1295.45 991.099 1299.24 990.176 cv
1302.15 989.46 li
1305.16 988.746 li
1307.17 988.287 1309.17 987.836 1311.17 987.427 cv
1315.18 986.622 1319.17 985.82 1323.15 985.094 cv
1331.22 983.512 1339.36 982.501 1347.37 981.457 cv
1355.54 980.383 1363.7 979.945 1371.77 979.418 cv
1379.85 978.93 1388.01 978.277 1396.2 978.443 cv
cp
.780392 .898039 .972549 rgb
f
1408.41 1159.02 mo
1405.78 1158.91 1403.16 1158.73 1400.53 1158.59 cv
1392.65 1158.07 li
1387.39 1157.74 1382.14 1157.32 1376.87 1156.95 cv
1372.93 1156.62 li
1371.6 1156.52 1370.3 1156.39 1369.03 1156.27 cv
1366.47 1156.03 1363.88 1155.88 1361.26 1155.74 cv
1356.02 1155.46 1350.7 1155.13 1345.23 1154.16 cv
1339.77 1153.15 1334.65 1151.46 1329.72 1150.06 cv
1328.49 1149.71 1327.27 1149.39 1326.05 1149.09 cv
1324.83 1148.8 1323.66 1148.56 1322.37 1148.3 cv
1319.84 1147.8 1317.28 1147.35 1314.69 1146.88 cv
1312.11 1146.43 1309.5 1145.95 1306.88 1145.41 cv
1305.57 1145.15 1304.25 1144.86 1302.93 1144.56 cv
1299.07 1143.62 li
1294.19 1142.43 1289.05 1141.63 1283.74 1140.5 cv
1281.11 1139.93 1278.35 1139.22 1275.75 1138.34 cv
1273.18 1137.5 1270.65 1136.6 1268.16 1135.65 cv
1263.16 1133.73 1258.32 1131.72 1253.45 1129.72 cv
1248.39 1127.61 1243.61 1125.11 1238.99 1122.55 cv
1232.12 1118.79 li
1229.79 1117.53 1227.47 1116.24 1225.16 1114.9 cv
1220.56 1112.21 1215.97 1109.4 1211.67 1106.07 cv
1207.35 1102.71 1203.46 1098.86 1200.05 1094.69 cv
1198.36 1092.59 1196.78 1090.42 1195.28 1088.22 cv
1193.79 1086.02 1192.33 1083.76 1191.08 1081.38 cv
1189.85 1078.99 1188.75 1076.51 1188.05 1073.9 cv
1187.36 1071.3 1187.07 1068.6 1187.32 1065.97 cv
1187.56 1068.6 1188.19 1071.14 1189.24 1073.49 cv
1190.23 1075.87 1191.58 1078.07 1193.05 1080.18 cv
1196.05 1084.35 1199.47 1088.33 1203.08 1091.97 cv
1206.68 1095.63 1210.59 1098.9 1214.83 1101.64 cv
1219.1 1104.4 1223.6 1106.9 1228.23 1109.2 cv
1230.55 1110.36 1232.89 1111.48 1235.25 1112.58 cv
1237.66 1113.71 1240.04 1114.91 1242.38 1116.07 cv
1247.07 1118.37 1251.67 1120.63 1256.37 1122.41 cv
1261.28 1124.26 1266.17 1126.23 1271.01 1127.98 cv
1273.44 1128.86 1275.86 1129.72 1278.29 1130.5 cv
1280.67 1131.28 1283.01 1131.86 1285.51 1132.41 cv
1290.47 1133.5 1295.72 1134.33 1301.04 1135.69 cv
1304.82 1136.68 li
1306.05 1136.98 1307.3 1137.28 1308.56 1137.56 cv
1316.19 1139.18 li
1318.76 1139.72 1321.36 1140.27 1323.96 1140.87 cv
1325.24 1141.16 1326.63 1141.49 1327.95 1141.88 cv
1329.28 1142.26 1330.58 1142.66 1331.85 1143.09 cv
1336.97 1144.76 1341.75 1146.64 1346.58 1147.86 cv
1351.4 1149.06 1356.57 1149.62 1361.78 1150.36 cv
1364.39 1150.72 1367.03 1151.1 1369.67 1151.57 cv
1372.34 1152.08 1374.86 1152.46 1377.46 1152.94 cv
1387.77 1154.81 1398.12 1156.69 1408.41 1159.02 cv
cp
f
1692.35 988.664 mo
1699.06 989.542 1705.78 990.048 1712.52 991.137 cv
1719.33 992.131 1725.87 994.549 1732.24 996.408 cv
1733.84 996.873 1735.4 997.318 1737.02 997.711 cv
1738.68 998.12 1740.33 998.551 1741.97 998.996 cv
1745.26 999.887 1748.53 1000.84 1751.77 1001.8 cv
1755.03 1002.77 1758.22 1003.75 1761.5 1004.81 cv
1764.76 1005.88 1767.98 1007.03 1771.17 1008.21 cv
1774.37 1009.39 1777.51 1010.59 1780.7 1011.83 cv
1783.92 1013.1 1787.07 1014.51 1790.17 1015.97 cv
1793.27 1017.44 1796.33 1018.95 1799.34 1020.5 cv
1802.36 1022.04 1805.4 1023.63 1808.41 1025.3 cv
1811.43 1026.98 1814.41 1028.77 1817.33 1030.73 cv
1820.31 1032.76 1822.92 1034.74 1825.7 1036.79 cv
1828.45 1038.86 1831.22 1041.07 1833.85 1043.63 cv
1836.48 1046.17 1838.97 1049.25 1840.74 1052.7 cv
1842.51 1056.16 1843.6 1059.92 1844.13 1063.62 cv
1844.41 1065.48 1844.54 1067.32 1844.6 1069.12 cv
1844.63 1070.03 1844.64 1070.93 1844.63 1071.82 cv
1844.62 1072.72 1844.6 1073.67 1844.52 1074.6 cv
1844.25 1078.34 1843.44 1082.12 1842.01 1085.64 cv
1840.59 1089.17 1838.66 1092.43 1836.37 1095.32 cv
1835.79 1096.07 1835.25 1096.72 1834.72 1097.37 cv
1833.07 1099.34 li
1831.96 1100.66 1830.82 1101.98 1829.63 1103.28 cv
1827.27 1105.88 1824.67 1108.36 1821.86 1110.61 cv
1816.12 1115.17 1809.91 1118.24 1803.73 1121.2 cv
1800.61 1122.66 1797.59 1124.03 1794.4 1125.43 cv
1791.17 1126.81 1787.91 1127.96 1784.66 1128.99 cv
1774.99 1132.02 li
1765.36 1135.15 li
1762.12 1136.16 1758.87 1137.14 1755.59 1138.06 cv
1752.32 1138.95 1749.03 1139.87 1745.67 1140.52 cv
1738.98 1141.88 1732.29 1142.68 1725.62 1143.82 cv
1728.85 1142.8 1732.12 1141.93 1735.38 1141.03 cv
1738.65 1140.16 1741.91 1139.29 1745.1 1138.3 cv
1751.47 1136.28 1757.76 1133.85 1763.98 1131.32 cv
1773.39 1127.53 li
1782.83 1123.87 li
1785.94 1122.63 1789 1121.4 1791.92 1119.98 cv
1794.85 1118.53 1797.91 1116.96 1800.83 1115.41 cv
1803.77 1113.85 1806.66 1112.23 1809.43 1110.51 cv
1810.81 1109.65 1812.18 1108.78 1813.49 1107.85 cv
1814.77 1106.94 1816.01 1105.98 1817.21 1104.96 cv
1819.61 1102.91 1821.83 1100.63 1823.96 1098.19 cv
1825.02 1096.97 1826.06 1095.72 1827.09 1094.43 cv
1828.64 1092.47 li
1829.16 1091.81 1829.68 1091.14 1830.12 1090.55 cv
1833.83 1085.63 1836.06 1080.05 1836.35 1074.05 cv
1836.4 1073.3 1836.42 1072.56 1836.42 1071.78 cv
1836.43 1070.98 1836.41 1070.19 1836.38 1069.41 cv
1836.33 1067.84 1836.2 1066.31 1835.98 1064.83 cv
1835.53 1061.85 1834.68 1059.06 1833.36 1056.5 cv
1832.06 1053.93 1830.28 1051.67 1828.08 1049.51 cv
1825.88 1047.34 1823.36 1045.32 1820.75 1043.3 cv
1818.13 1041.3 1815.38 1039.17 1812.8 1037.36 cv
1810.15 1035.52 1807.36 1033.8 1804.52 1032.11 cv
1801.66 1030.44 1798.76 1028.83 1795.8 1027.23 cv
1792.84 1025.63 1789.91 1024.03 1786.95 1022.51 cv
1784 1020.99 1781.02 1019.57 1778.01 1018.22 cv
1774.97 1016.87 1771.86 1015.5 1768.79 1014.2 cv
1765.71 1012.89 1762.62 1011.62 1759.51 1010.44 cv
1750.06 1006.93 li
1746.9 1005.76 1743.75 1004.62 1740.58 1003.53 cv
1739 1002.98 1737.41 1002.46 1735.82 1001.95 cv
1734.19 1001.43 1732.53 1000.87 1730.94 1000.24 cv
1724.55 997.746 1718.52 995 1712.05 993.372 cv
1708.81 992.507 1705.52 991.779 1702.22 991.047 cv
1698.93 990.286 1695.62 989.559 1692.35 988.664 cv
cp
f
1299.59 877.106 mo
1299.59 877.106 1324.23 893.42 1334.57 892.913 cv
1344.9 892.405 1362.38 886.657 1371.5 890.079 cv
1380.62 893.502 1390.34 900.555 1401.77 892.079 cv
1413.2 883.603 1416.57 869.555 1405.74 865.098 cv
1394.91 860.642 1370.23 855.962 1363.96 839.343 cv
1357.7 822.723 1371.79 814.464 1380.79 813.848 cv
1389.79 813.233 1400.25 816.764 1393.41 823.82 cv
1386.58 830.877 1380.29 836.635 1393.2 843.049 cv
1406.11 849.463 1427.93 861.969 1428.51 871.414 cv
1429.08 880.86 1430.37 892.6 1444.67 892.861 cv
1458.98 893.123 1507.25 893.891 1519.65 889.971 cv
1532.05 886.051 1540.15 879.991 1539.9 866.544 cv
1539.64 853.096 1533.34 836.922 1541.35 826.38 cv
1549.37 815.839 1556.42 806.114 1546.51 801.286 cv
1536.61 796.457 1522.83 784.154 1528.02 769.804 cv
1533.21 755.453 1533.53 751.451 1530.45 745.384 cv
1527.35 739.315 1517.24 725.966 1523.97 720.244 cv
1530.7 714.521 1543.79 718.713 1543.52 727.642 cv
1543.18 738.427 1542.58 747.56 1540.17 758.098 cv
1537.36 770.425 1542.91 784.222 1553.48 791.163 cv
1559.64 795.206 1567 796.941 1574.24 798.266 cv
1578.05 798.962 1582.01 799.621 1585.19 801.831 cv
1590.71 805.681 1586.77 811.173 1590.11 814.604 cv
1592.96 817.542 1600.59 815.673 1604.01 815.333 cv
1613.94 814.345 1630.61 809.277 1635.24 796.224 cv
1639.88 783.173 1648.35 763.268 1643.69 754.537 cv
1639.02 745.805 1631.99 740.463 1618.84 744.472 cv
1605.68 748.481 1592.08 750.664 1587.18 744.896 cv
1582.27 739.13 1581.98 731.646 1590.02 728.119 cv
1598.07 724.592 1604.38 720.328 1602.58 713.022 cv
1600.79 705.716 1598.16 693.867 1609.4 691.493 cv
1620.63 689.118 1625.72 699.973 1628.16 710.315 cv
1630.61 720.658 1637.83 723.629 1649.33 721.575 cv
1660.84 719.521 1687.05 712.689 1698.56 703.176 cv
1710.07 693.663 1723.38 680.416 1723.68 661.941 cv
1723.98 643.466 1739.73 642.352 1749.6 647.626 cv
1759.47 652.899 1755.07 674.027 1752.5 683.666 cv
1749.94 693.305 1757.36 712.255 1766.41 716.567 cv
1775.46 720.88 1788.41 732.221 1784.26 744.864 cv
1780.1 757.509 1763.04 780.298 1799.59 815.476 cv
1713.68 981.294 li
1478.24 1058.94 li
1285.07 968.132 li
1299.59 877.106 li
cp
.34902 .682353 .882353 rgb
f
1713.68 981.294 mo
1787.91 838.015 li
1779.71 830.195 1769.06 821.101 1763.09 820.285 cv
1752.47 818.829 1745.43 828.405 1728.74 831.83 cv
1712.05 835.256 1709.66 816.861 1707.04 805.013 cv
1704.42 793.163 1708.71 762.18 1711.28 752.542 cv
1713.85 742.903 1707.71 737.633 1698.82 736.914 cv
1689.93 736.195 1679.74 740.443 1678.41 764.207 cv
1677.09 787.971 1672.57 799.54 1663.5 808.355 cv
1654.44 817.171 1644.11 834.238 1646.44 849.644 cv
1648.78 865.051 1644.66 879.041 1640.48 886.461 cv
1636.3 893.881 1629.93 895.156 1622.15 895.422 cv
1614.37 895.688 1613.05 889.912 1617.43 883.702 cv
1621.81 877.492 1626.66 869.23 1621.41 864.032 cv
1616.16 858.834 1598.43 860.384 1593.82 873.14 cv
1589.21 885.896 1583.42 902.138 1568.71 906.916 cv
1554 911.694 1546.92 903.364 1545.93 922.977 cv
1544.94 942.591 1538.1 953.376 1524.53 958.844 cv
1510.96 964.31 1461.22 966.854 1451.19 965.447 cv
1441.16 964.039 1442.57 954.009 1443.78 946.348 cv
1445 938.689 1445.7 922.634 1441.24 918.692 cv
1436.79 914.752 1432.01 900.043 1425.18 895.911 cv
1418.36 891.778 1409.93 900.049 1409.71 910.176 cv
1409.49 920.303 1427.74 930.729 1426.38 940.168 cv
1425.02 949.606 1414.49 946.965 1407.66 942.833 cv
1400.84 938.7 1397.95 930.112 1377.88 942.215 cv
1357.8 954.317 1349.56 938.136 1337.49 932.387 cv
1325.43 926.637 1304.18 902.137 1304.18 902.137 cv
1304.18 902.137 1301.19 900.865 1296.15 898.718 cv
1285.07 968.132 li
1478.24 1058.94 li
1713.68 981.294 li
cp
.364706 .498039 .752941 rgb
f
1372.29 794.505 mo
1372.29 796.12 1372.66 797.81 1373.48 799.179 cv
1373.96 799.972 1374.58 800.659 1375.38 801.159 cv
1377.02 802.193 1379.1 802.27 1381.01 801.943 cv
1394.07 799.706 1372.26 775.535 1372.29 794.505 cv
cp
.34902 .682353 .882353 rgb
f
1360.9 735.228 mo
1357.79 737.165 1355.58 740.698 1355.76 744.355 cv
1355.92 747.64 1357.86 750.525 1359.09 753.575 cv
1361.09 758.529 1361.21 764.216 1359.42 769.249 cv
1358.47 771.917 1357.03 774.996 1358.59 777.365 cv
1359.53 778.809 1361.32 779.439 1363.01 779.772 cv
1366.5 780.458 1370.61 780.058 1372.86 777.307 cv
1375.49 774.112 1374.62 769.037 1377.24 765.841 cv
1378.72 764.043 1381.11 763.108 1382.36 761.148 cv
1384.06 758.489 1382.67 754.408 1379.7 753.346 cv
1376.95 752.364 1373.28 753.542 1371.41 751.301 cv
1370.05 749.661 1370.63 747.149 1371.72 745.313 cv
1377.29 735.917 1371.11 728.867 1360.9 735.228 cv
cp
f
1362.39 684.032 mo
1362.53 680.063 1359.54 675.659 1355.58 675.987 cv
1352.25 676.263 1349.98 679.687 1349.53 682.992 cv
1349.08 686.299 1349.92 689.628 1350.13 692.959 cv
1350.45 698.07 1349.27 703.145 1348.89 708.254 cv
1348.76 710.038 1348.75 711.93 1349.63 713.493 cv
1354.1 721.506 1367.12 714.371 1368.68 707.515 cv
1369.49 703.939 1367.99 699.83 1366.18 696.807 cv
1362.94 691.408 1362.15 690.725 1362.39 684.032 cv
cp
f
1519.67 609.012 mo
1517.95 613.379 1519.06 618.71 1522.38 622.03 cv
1523.31 622.964 1524.39 623.725 1525.55 624.317 cv
1528.37 625.744 1531.73 626.176 1534.86 625.617 cv
1563.02 620.59 1527.62 588.723 1519.67 609.012 cv
cp
f
1537.7 641.263 mo
1534.14 641.645 1530.51 643.544 1529.08 646.83 cv
1526.94 651.734 1530.24 657.111 1531.8 662.231 cv
1532.06 663.098 1532.27 664.006 1532.16 664.906 cv
1531.96 666.402 1530.89 667.64 1529.69 668.553 cv
1527.62 670.119 1525.11 670.996 1522.99 672.472 cv
1519.71 674.743 1517.46 678.537 1517.36 682.52 cv
1517.26 686.502 1519.47 690.536 1523.03 692.322 cv
1526.59 694.109 1531.34 693.353 1533.95 690.346 cv
1537.54 686.216 1536.45 679.658 1539.35 675.023 cv
1541.72 671.238 1546.25 669.476 1549.57 666.493 cv
1553.41 663.05 1555.57 657.822 1555.29 652.674 cv
1554.78 643.333 1545.75 640.404 1537.7 641.263 cv
cp
f
1537.13 580.86 mo
1538.93 580.206 1540.25 578.579 1540.77 576.765 cv
1541.04 575.838 1541.06 574.907 1540.91 573.959 cv
1540.74 572.875 1540.75 571.618 1540.35 570.594 cv
1539.9 569.443 1538.76 568.672 1537.57 568.365 cv
1536.37 568.057 1535.12 568.144 1533.89 568.263 cv
1532.64 568.384 1531.29 568.578 1530.38 569.45 cv
1529.77 570.042 1529.44 570.877 1529.25 571.712 cv
1528.88 573.334 1528.88 575.398 1529.37 576.998 cv
1530.32 580.085 1534.09 581.962 1537.13 580.86 cv
cp
f
1750.33 575.271 mo
1751.23 583.051 1752.41 591.183 1749.67 598.519 cv
1747.49 604.353 1743.05 609.04 1740.18 614.569 cv
1737.31 620.097 1736.4 627.615 1740.84 631.985 cv
1745.78 636.849 1754.84 634.575 1758.88 628.939 cv
1762.92 623.305 1763.01 615.737 1761.8 608.911 cv
1760.97 604.221 1759.59 599.567 1759.72 594.804 cv
1760.08 581.649 1782.74 560.833 1769.61 548.805 cv
1753.71 534.225 1749.2 565.576 1750.33 575.271 cv
cp
f
1524.95 905.271 mo
1521.52 880.761 1515.01 856.805 1512.4 832.116 cv
1508.94 799.29 1508.28 766.305 1505.57 733.432 cv
1503.23 705.154 1489.64 677.023 1483.46 649.117 cv
1472.79 601.027 1458.26 552.091 1453.13 503.049 cv
1447.41 448.367 1451.37 393.031 1443.58 338.519 cv
1440.07 313.981 1434.2 289.865 1430.04 265.433 cv
1424.67 233.79 1426.82 201.191 1419.25 170.113 cv
1410.71 135.044 1411 96.9461 1408.42 60.6888 cv
1407.08 41.9515 1405.73 23.075 1400.9 4.95341 cv
1400.46 3.29862 1399.99 1.64774 1399.5 -.000207274 cv
1269.56 -.000207274 li
1274.96 41.76 1264.02 86.5711 1275.83 127.405 cv
1284.5 157.377 1304.66 182.376 1316.62 211.129 cv
1332.12 248.387 1329.92 289.257 1342.78 326.713 cv
1344.14 330.682 1345.46 334.69 1346.74 338.731 cv
1359.01 377.481 1367.61 419.247 1375.26 458.8 cv
1382.38 495.591 1392.36 535.273 1391.19 572.953 cv
1390.21 604.697 1393.8 636.279 1399.95 667.352 cv
1406.17 698.738 1417.67 729.524 1422.34 761.011 cv
1429.83 811.506 1433.09 862.569 1434.55 913.592 cv
1434.78 921.41 1439.3 1025.53 1437.17 1025.92 cv
1454.08 1022.83 1470.99 1019.73 1487.9 1016.64 cv
1507.44 1013.06 1532.73 1012.44 1550.69 1004.42 cv
1544.1 997.836 1539.73 990.522 1536.88 981.337 cv
1529.15 956.361 1528.55 930.935 1524.95 905.271 cv
cp
.541176 .772549 .92549 rgb
f
1341 2.39139 mo
1341.06 1.59403 1341.12 .797156 1341.18 -.000207274 cv
1288.68 -.000207274 li
1288.69 .109656 1288.7 .218054 1288.7 .327429 cv
1288.89 7.76493 1287.2 15.097 1286.15 22.4588 cv
1280.58 61.6399 1292.51 104.213 1311.24 138.269 cv
1312.61 140.749 1314.06 143.248 1316.16 145.105 cv
1318.78 147.415 1322.33 148.564 1325.77 148.205 cv
1327.66 148.008 1329.55 147.345 1330.97 146.055 cv
1334.68 142.71 1334.11 136.74 1333.28 131.749 cv
1332.45 126.758 1332.02 120.731 1335.85 117.544 cv
1338.2 115.59 1341.48 115.379 1344.2 114.017 cv
1348.92 111.652 1351.34 106.167 1352.47 100.902 cv
1355.44 87.1404 1351.1 73.2327 1346.54 60.4456 cv
1339.61 41.0418 1339.61 21.7181 1341 2.39139 cv
cp
.780392 .898039 .972549 rgb
f
1382.4 74.5071 mo
1382.34 69.7674 1383.26 65.0794 1383.68 60.3582 cv
1385.45 39.9695 1377.66 20.2034 1374.17 -.000207274 cv
1361.94 -.000207274 li
1361.76 4.08475 1361.64 8.16923 1361.76 12.2503 cv
1362.68 42.3206 1376.27 70.3831 1374.52 100.691 cv
1374.08 108.378 1372.92 116.333 1375.39 123.604 cv
1376.57 127.087 1379.69 130.748 1383.12 129.646 cv
1385.99 128.725 1386.98 125.122 1387.3 122.056 cv
1388.47 110.776 1386.66 99.4016 1384.4 88.2972 cv
1383.47 83.7405 1382.46 79.1614 1382.4 74.5071 cv
cp
f
1427.45 383.262 mo
1435.77 384.935 1429.24 341.737 1424.46 315.868 cv
1419.68 290 1405.07 219.617 1406.54 195.377 cv
1408.13 169.169 1411.12 151.81 1394.4 153.852 cv
1388.46 154.577 1378.01 161.229 1369.01 162.021 cv
1352.65 163.459 1337.02 159.288 1333.16 162.361 cv
1327.19 167.126 1345.11 187.889 1357.36 203.546 cv
1369.6 219.203 1380.86 237.583 1388.02 262.09 cv
1395.19 286.596 1417.29 381.22 1427.45 383.262 cv
cp
f
1412.42 449.975 mo
1407.56 450.883 1420.45 514.598 1422.98 546.901 cv
1428.62 618.877 1451.98 761.074 1439.9 762.828 cv
1427.82 764.582 1412.76 613.013 1405.8 536.616 cv
1399.79 470.614 1385.51 405.41 1363.44 343.115 cv
1360.36 334.442 1330.25 238.544 1355.05 242.637 cv
1356.56 242.887 1358.28 243.507 1360.21 244.54 cv
1366.28 247.775 1369.24 254.846 1371.65 261.411 cv
1383.6 293.912 1393.19 327.32 1400.35 361.272 cv
1406.52 390.595 1428.78 404.365 1435.41 455.421 cv
1435.41 455.421 1452.32 532.345 1437.4 533.706 cv
1422.48 535.068 1431.43 501.144 1427.12 481.289 cv
1423.77 465.866 1417.29 449.067 1412.42 449.975 cv
cp
f
1448.86 586.233 mo
1465.16 579.489 1484.2 713.971 1488.06 757.897 cv
1491.93 801.824 1473.32 777.724 1466.27 755.712 cv
1459.22 733.7 1437.5 590.93 1448.86 586.233 cv
cp
f
1447.29 799.903 mo
1460.38 799.196 1459.9 846.409 1466.57 845.486 cv
1473.24 844.564 1473.75 810.996 1487.46 812.81 cv
1494.01 813.68 1490.77 859.782 1494.42 901.988 cv
1498.29 946.841 1504.03 967.68 1498.73 983.678 cv
1493.11 1000.63 1475.85 985.265 1469.22 971.197 cv
1456.59 944.395 1455.97 914.401 1450.66 879.523 cv
1449.38 871.134 1434.2 800.61 1447.29 799.903 cv
cp
f
1255.61 983.745 mo
1262.39 1008.75 1265.71 1047.13 1276.24 1066.33 cv
1286.77 1085.53 1314.11 1103.56 1328.88 1105.35 cv
1343.66 1107.14 1362.92 1105.11 1372.9 1107.11 cv
1382.88 1109.11 1408.54 1116.56 1423.81 1119.58 cv
1439.08 1122.61 1471.39 1121.64 1483.29 1122.01 cv
1495.2 1122.37 1536.7 1125.73 1553.2 1128.25 cv
1569.71 1130.78 1600.92 1128.53 1613.16 1124.75 cv
1625.4 1120.96 1649.98 1112.21 1661.84 1113.16 cv
1673.7 1114.12 1689 1109.39 1700.6 1106.15 cv
1712.2 1102.91 1738.22 1098.45 1748.67 1087.36 cv
1759.11 1076.27 1767.47 1061.43 1768.43 1049.57 cv
1769.39 1037.72 1781.97 994.169 1793.97 958.349 cv
1806.59 920.663 1819.18 897.111 1835.03 861.809 cv
1850.88 826.507 1866.35 802.264 1871.05 788.323 cv
1875.76 774.382 1891.21 751.076 1895.37 738.432 cv
1899.53 725.789 1899.93 703.639 1896.29 698.869 cv
1892.65 694.099 1884.83 680.04 1902.04 672.033 cv
1919.25 664.024 1930.76 660.032 1935.31 642.495 cv
1938.1 631.727 1936.13 619.245 1928.4 610.95 cv
1925.69 608.052 1920.87 605.754 1918.05 608.533 cv
1915.93 610.617 1916.51 614.071 1916.7 617.037 cv
1917.36 627.249 1911.32 636.854 1903.71 643.7 cv
1896.11 650.546 1886.91 655.328 1878.55 661.231 cv
1860.83 673.745 1860.02 686.503 1855.6 706.034 cv
1851.78 722.928 1839 732.909 1828.25 745.295 cv
1817.41 757.785 1808.21 772.582 1800.56 787.203 cv
1792.49 802.614 1787.76 818.666 1777.07 832.564 cv
1763.22 850.561 1744.8 873.004 1724.74 884.055 cv
1703.45 895.787 1678.71 900.204 1656.65 910.284 cv
1632.27 921.43 1616.01 944.243 1596.44 961.689 cv
1576.59 979.388 1552.69 992.031 1527.83 1000.95 cv
1498.05 1011.64 1468.89 998.159 1438.95 1002.75 cv
1430.59 1004.03 1421.48 1006.47 1414.12 1002.31 cv
1408 998.845 1406.4 992.4 1402.19 987.359 cv
1397.65 981.912 1391.58 978.625 1385.31 975.566 cv
1360.86 963.644 1342.45 952.911 1323.87 932.601 cv
1319.24 927.54 1313.98 923.005 1310.09 917.352 cv
1300.66 903.632 1301.24 886.477 1298.91 870.678 cv
1296.14 851.876 1291.56 832.901 1281.96 816.323 cv
1274.92 804.164 1266.79 793.652 1262.7 780.022 cv
1257.41 762.35 1256.88 743.609 1254.74 725.403 cv
1251.74 699.741 1227.73 689.982 1220.86 666.202 cv
1215.97 649.246 1204.88 631.343 1195.37 621.623 cv
1185.86 611.903 1179.99 587.178 1177.58 542.755 cv
1176.14 516.232 1160.29 501.971 1149.74 505.146 cv
1139.19 508.322 1142.81 518.908 1148.41 521.599 cv
1154.01 524.289 1165.08 536.821 1164.55 548.863 cv
1164.03 560.905 1159.96 578.031 1167.18 593.833 cv
1174.41 609.634 1179.03 618.959 1177.73 634.967 cv
1176.44 650.974 1196.77 676.339 1197.93 695.23 cv
1199.08 714.122 1207.74 739.886 1213.42 758.248 cv
1219.1 776.609 1234.36 842.897 1241.38 885.584 cv
1248.41 928.27 1246.97 951.865 1255.61 983.745 cv
cp
.541176 .772549 .92549 rgb
f
1748.67 1087.36 mo
1759.11 1076.27 1767.47 1061.43 1768.43 1049.57 cv
1768.98 1042.75 1773.38 1025.43 1779.31 1005.13 cv
1767.3 1017.48 1757.68 1035.45 1752 1039.86 cv
1744.03 1046.07 1728.95 1055.43 1724.73 1038.28 cv
1720.52 1021.13 1753.91 977.758 1761.51 968.411 cv
1769.11 959.064 1769.28 941.644 1757.88 936.364 cv
1746.47 931.085 1731.96 941.119 1731.3 964.723 cv
1730.64 988.329 1721.55 1000.67 1711.47 1009.82 cv
1701.39 1018.96 1693.01 1007.08 1671.16 1007.8 cv
1649.31 1008.53 1644 1028.02 1633.44 1050.82 cv
1622.88 1073.63 1599.75 1074.87 1583.4 1069.19 cv
1567.04 1063.51 1576.8 1050.61 1562.06 1048.17 cv
1547.31 1045.73 1550.73 1072.78 1554.23 1091.12 cv
1557.73 1109.45 1542.8 1116.96 1508.61 1108.6 cv
1474.42 1100.23 1437.24 1067.34 1414.43 1056.78 cv
1391.62 1046.22 1384.54 1056.85 1368.14 1074.83 cv
1351.75 1092.8 1341 1079.48 1330.86 1066.21 cv
1320.73 1052.94 1324.55 1013.4 1324.41 999.696 cv
1324.27 985.987 1308.04 986.543 1305.38 996.29 cv
1302.73 1006.04 1294.62 1021.57 1280.7 1016.71 cv
1275.33 1014.83 1266.62 1004.87 1257.94 993.347 cv
1263.3 1017.75 1266.98 1049.45 1276.24 1066.33 cv
1286.77 1085.53 1314.11 1103.56 1328.88 1105.35 cv
1343.66 1107.14 1362.92 1105.11 1372.9 1107.11 cv
1382.88 1109.11 1408.54 1116.56 1423.81 1119.58 cv
1439.08 1122.61 1471.39 1121.64 1483.29 1122.01 cv
1495.2 1122.37 1536.7 1125.73 1553.2 1128.25 cv
1569.71 1130.78 1600.92 1128.53 1613.16 1124.75 cv
1625.41 1120.96 1649.98 1112.21 1661.84 1113.16 cv
1673.7 1114.12 1689 1109.39 1700.6 1106.15 cv
1712.2 1102.91 1738.22 1098.45 1748.67 1087.36 cv
cp
.364706 .619608 .835294 rgb
f
1697.01 1085.09 mo
1694.66 1083.63 1693.67 1080.75 1693.09 1078.05 cv
1691.55 1070.89 1691.71 1063.38 1693.54 1056.29 cv
1695.72 1047.9 1698.78 1038.37 1688.6 1034.1 cv
1683.11 1031.8 1675.54 1032.2 1670.77 1036.02 cv
1661.18 1043.71 1656.97 1059.95 1657.14 1071.71 cv
1657.23 1078.62 1659.3 1088.45 1655.15 1094.49 cv
1653.84 1096.39 1651.82 1097.69 1649.74 1098.68 cv
1639.61 1103.5 1623.91 1103.91 1613.16 1100.73 cv
1604.05 1098.03 1598.48 1099.08 1589.59 1101.92 cv
1588.31 1102.33 1586.8 1102.63 1585.7 1101.85 cv
1584.2 1100.8 1584.44 1098.53 1584.98 1096.78 cv
1586.87 1090.71 1594.23 1084.03 1587.49 1078.5 cv
1584.7 1076.2 1580.86 1075.63 1577.24 1075.68 cv
1574.68 1075.71 1572.05 1076.03 1569.84 1077.31 cv
1563.71 1080.83 1565.91 1089.18 1568.27 1094.34 cv
1570.48 1099.19 1572.89 1105.88 1568.06 1109.88 cv
1566.57 1111.12 1564.74 1111.84 1562.91 1112.48 cv
1551.74 1116.38 1539.47 1118.37 1527.66 1118.82 cv
1517.5 1119.2 1507.29 1118.32 1497.35 1116.19 cv
1492.36 1115.12 1486.86 1114 1482.19 1111.88 cv
1478.47 1110.19 1475.73 1107.13 1471.96 1105.44 cv
1465.41 1102.51 1458.27 1105.68 1451.45 1105.16 cv
1443.8 1104.56 1436.44 1102.7 1429.21 1100.18 cv
1419.59 1096.83 1409.59 1091.19 1399.04 1092.7 cv
1391.04 1093.84 1383.63 1097.18 1375.78 1098.96 cv
1361.86 1102.13 1346.88 1099.57 1334.51 1092.56 cv
1328.14 1088.95 1323.78 1084.16 1318.64 1079.16 cv
1313.02 1073.68 1305.67 1071.96 1298.02 1071.59 cv
1293.8 1071.39 1280.27 1072.9 1277.56 1068.52 cv
1278.02 1069.27 1278.51 1070.11 1279.02 1071.03 cv
1284.6 1079.76 1308.06 1109.09 1377.55 1121.89 cv
1459.68 1137.02 1562.7 1141.34 1618.18 1131.98 cv
1657.95 1125.26 1708.82 1117.43 1740.55 1093.36 cv
1743.45 1091.76 1746.01 1089.96 1748.06 1087.94 cv
1748.15 1087.85 li
1745.12 1080.94 1737.63 1079.73 1731.74 1078.98 cv
1697.01 1085.09 li
cp
.364706 .498039 .752941 rgb
f
1216.52 753.128 mo
1216.52 753.128 1232.8 802.781 1241.56 812.44 cv
1250.33 822.1 1269.82 891.11 1269.77 913.783 cv
1269.73 936.457 1281.74 979.798 1290.83 978.145 cv
1299.91 976.492 1308.87 961.7 1320.39 966.809 cv
1331.91 971.918 1352.85 1008.22 1359.15 1018.88 cv
1365.45 1029.53 1388.07 1030.17 1402.24 1024.75 cv
1416.4 1019.33 1436.1 1034.05 1454.38 1036.72 cv
1472.66 1039.39 1498.65 1039.1 1505.21 1035.46 cv
1511.77 1031.81 1522.31 1030.57 1536.27 1031.4 cv
1550.22 1032.23 1572.44 1008.37 1580.46 1005.14 cv
1588.48 1001.91 1596.87 1008.85 1595.71 1019.5 cv
1594.55 1030.15 1591.89 1040.97 1606.36 1039.16 cv
1620.82 1037.34 1613.51 1006.02 1622.32 993.006 cv
1631.13 979.993 1654.37 969.339 1663.28 958.721 cv
1672.2 948.103 1682.63 929.85 1700.89 925.359 cv
1719.16 920.868 1764.67 889.339 1776.85 878.984 cv
1789.02 868.63 1810.18 872.726 1822.67 851.059 cv
1835.16 829.392 1841.28 805.42 1845.33 784.86 cv
1849.38 764.302 1873.39 747.743 1878.55 735.628 cv
1883.7 723.513 1876.73 699.078 1883.02 687.652 cv
1889.32 676.225 1886.33 668.824 1880.71 671.95 cv
1875.09 675.076 1868.43 698.407 1866.83 710.81 cv
1865.23 723.213 1851.95 747.203 1842.55 760.169 cv
1833.15 773.135 1811.05 825.056 1802.92 836.931 cv
1794.8 848.807 1753.55 886.649 1726.15 893.386 cv
1698.75 900.122 1668.17 916.746 1656.11 933.077 cv
1644.05 949.408 1642.8 964.823 1635.27 965.707 cv
1627.74 966.59 1623.45 960.574 1618.67 964.364 cv
1613.89 968.155 1598.23 988.373 1599.95 996.568 cv
1601.68 1004.76 1590.66 1004.47 1587.7 996.772 cv
1584.74 989.073 1572.21 992.834 1559.95 1000.5 cv
1547.69 1008.16 1533.24 1017.14 1516.55 1016.98 cv
1499.85 1016.82 1488.21 1013.2 1477.22 1016.19 cv
1466.24 1019.18 1456.87 1013.35 1449.66 1013.96 cv
1442.45 1014.57 1434.87 1019.63 1425.24 1017.06 cv
1415.6 1014.49 1399.75 1007.54 1397.28 997.491 cv
1394.81 987.445 1367.16 982.525 1356.48 978.081 cv
1345.8 973.637 1330.6 969.722 1325.87 958.003 cv
1321.15 946.283 1313.72 938.521 1308.67 938.262 cv
1303.62 938.003 1289.15 938.026 1287.9 929.422 cv
1286.66 920.817 1273.18 877.209 1275.08 853.641 cv
1276.99 830.074 1270.44 805.824 1252.56 794.532 cv
1234.67 783.239 1233.33 750.011 1226.46 740.951 cv
1219.58 731.891 1209.25 737.307 1216.52 753.128 cv
cp
.780392 .898039 .972549 rgb
f
1223.13 540.719 mo
1219.59 545.305 1216.31 550.254 1214.85 555.857 cv
1213.38 561.46 1213.98 567.86 1217.6 572.38 cv
1219.58 574.85 1222.32 576.615 1225.23 577.873 cv
1229.3 579.634 1234.44 580.309 1237.83 577.458 cv
1240.38 575.313 1241.23 571.706 1241.11 568.375 cv
1240.98 565.043 1240.05 561.795 1239.69 558.48 cv
1239.57 557.293 1239.52 556.069 1239.87 554.926 cv
1240.47 552.928 1242.17 551.498 1243.63 550.006 cv
1246.43 547.145 1248.59 543.662 1249.91 539.881 cv
1252.33 532.967 1247.83 525.632 1239.91 526.24 cv
1233.04 526.767 1226.93 535.788 1223.13 540.719 cv
cp
f
1149.22 560.328 mo
1148.94 554.592 1148.17 547.959 1143.33 544.87 cv
1137.84 541.367 1129.95 545.13 1127.23 551.051 cv
1124.51 556.972 1125.74 563.968 1128.06 570.058 cv
1130.37 576.148 1133.72 581.869 1135.28 588.194 cv
1137.2 595.953 1136.31 604.131 1137.5 612.034 cv
1137.98 615.256 1139.2 618.886 1142.25 620.029 cv
1144.76 620.97 1147.64 619.783 1149.62 617.973 cv
1153.29 614.617 1154.75 609.361 1154.6 604.385 cv
1154.4 597.987 1151.44 592.337 1150.5 586.13 cv
1149.24 577.754 1149.63 568.792 1149.22 560.328 cv
cp
f
1911.47 693.271 mo
1911.44 694.558 1911.43 695.935 1912.13 697.013 cv
1912.71 697.897 1913.69 698.437 1914.66 698.847 cv
1920.86 701.461 1928.63 699.751 1933.16 694.773 cv
1935.45 692.251 1936.84 688.963 1937.23 685.586 cv
1937.51 683.033 1936.48 678.87 1934.73 676.952 cv
1934.11 676.271 1933.32 675.767 1932.53 675.278 cv
1931.06 674.354 1929.53 673.44 1927.82 673.091 cv
1922.98 672.101 1916.67 675.196 1914.24 679.416 cv
1911.86 683.541 1911.59 688.625 1911.47 693.271 cv
cp
f
1951.18 611.107 mo
1952.65 617.017 1957.54 622.772 1955.33 628.446 cv
1953.97 631.909 1950.15 635.622 1952.48 638.522 cv
1953.5 639.794 1955.29 640.072 1956.91 640.258 cv
1961.04 640.734 1965.65 641.086 1968.92 638.53 cv
1972.88 635.445 1973.09 629.618 1975.43 625.178 cv
1980.68 615.199 1988.31 600.964 1974.3 592.815 cv
1962.74 586.095 1948.06 598.6 1951.18 611.107 cv
cp
f
131.171 1072.78 mo
131.259 1082.1 134.356 1091.33 140.4 1100.02 cv
145.357 1107.15 151.112 1115.61 159.68 1122.19 cv
166.723 1127.6 175.858 1131.82 185.123 1136.79 cv
193.124 1141.09 201.614 1146.17 211.135 1150.1 cv
219.658 1153.61 228.59 1157.93 238.234 1161.11 cv
247.079 1164.04 256.65 1166.41 266.365 1169.03 cv
275.424 1171.48 285.023 1173.5 294.779 1175.67 cv
303.988 1177.72 313.668 1179.13 323.448 1180.92 cv
332.77 1182.62 342.735 1181.9 352.534 1183.35 cv
361.939 1184.75 371.587 1185.53 381.394 1186.69 cv
390.86 1187.8 400.522 1188.21 410.33 1189.08 cv
419.849 1189.93 429.256 1194.05 439.066 1194.67 cv
448.62 1195.28 458.331 1196.06 468.132 1196.44 cv
473.08 1196.62 478.083 1195.84 483.113 1195.06 cv
487.828 1194.33 492.566 1193.6 497.306 1193.67 cv
506.912 1193.81 516.597 1196.43 526.381 1196.34 cv
536.162 1196.25 545.779 1193.02 555.379 1192.7 cv
560.126 1192.55 564.888 1193.25 569.627 1193.95 cv
574.658 1194.7 579.663 1195.44 584.593 1195.16 cv
594.389 1194.6 604.154 1194.52 613.698 1193.74 cv
623.495 1192.94 633.186 1191.79 642.688 1190.76 cv
652.479 1189.7 661.643 1184.73 671.09 1183.44 cv
680.875 1182.1 690.891 1183.52 700.269 1181.94 cv
710.039 1180.3 719.16 1176.3 728.448 1174.42 cv
738.196 1172.44 748.375 1173.45 757.546 1171.23 cv
767.26 1168.87 775.355 1161.65 784.366 1159.03 cv
794.03 1156.22 804.524 1157.31 813.312 1154.21 cv
822.896 1150.85 832.092 1147.44 840.548 1143.76 cv
849.992 1139.66 859.313 1136.15 867.231 1131.71 cv
876.401 1126.56 884.239 1120.24 891.178 1114.7 cv
899.619 1107.96 906.845 1100.75 911.665 1093.53 cv
917.539 1084.73 919.01 1074.66 918.922 1065.34 cv
918.834 1056.02 916.616 1046.37 910.572 1037.68 cv
905.615 1030.55 899.136 1022.66 890.568 1016.08 cv
883.524 1010.67 874.319 1006.64 865.053 1001.67 cv
857.053 997.376 848.178 993.325 838.659 989.401 cv
830.135 985.887 820.765 983.235 811.121 980.047 cv
802.275 977.124 793.865 971.137 784.15 968.51 cv
775.091 966.06 765.146 965.481 755.39 963.309 cv
746.181 961.258 736.228 961.53 726.447 959.741 cv
717.125 958.035 707.613 956.298 697.815 954.843 cv
688.41 953.446 678.985 950.788 669.178 949.633 cv
659.71 948.52 650.077 947.243 640.269 946.366 cv
630.75 945.516 621.123 943.763 611.313 943.144 cv
606.403 942.835 601.406 943.65 596.378 944.466 cv
591.62 945.238 586.835 946.009 582.07 945.829 cv
572.483 945.464 562.895 941.414 553.099 941.276 cv
543.492 941.143 533.792 944.851 524.008 944.943 cv
514.227 945.036 504.595 945.543 494.995 945.859 cv
490.339 946.012 485.69 945.673 481.065 945.334 cv
475.966 944.961 470.895 944.587 465.875 944.874 cv
456.08 945.431 446.443 946.492 436.899 947.275 cv
432.263 947.655 427.612 947.588 422.992 947.52 cv
417.846 947.445 412.737 947.37 407.731 947.914 cv
397.94 948.976 388.214 949.724 378.768 951.016 cv
368.983 952.355 359.862 956.947 350.484 958.521 cv
340.714 960.161 331.086 961.259 321.797 963.142 cv
312.049 965.116 301.83 964.033 292.659 966.258 cv
282.945 968.616 274.038 973.146 265.026 975.768 cv
255.363 978.577 246.068 981.477 237.279 984.566 cv
227.696 987.936 217.659 989.283 209.203 992.958 cv
199.759 997.061 192.863 1005.2 184.944 1009.65 cv
175.774 1014.79 165.617 1017.25 158.677 1022.8 cv
150.238 1029.54 146.014 1039.05 141.195 1046.26 cv
135.32 1055.06 131.083 1063.46 131.171 1072.78 cv
.541176 .772549 .92549 rgb
f
631.479 1159.02 mo
641.773 1156.69 652.128 1154.81 662.437 1152.94 cv
665.036 1152.46 667.558 1152.08 670.225 1151.57 cv
672.865 1151.1 675.502 1150.72 678.113 1150.36 cv
683.325 1149.62 688.491 1149.06 693.309 1147.86 cv
698.139 1146.64 702.924 1144.76 708.039 1143.09 cv
709.315 1142.66 710.616 1142.26 711.942 1141.88 cv
713.259 1141.49 714.656 1141.16 715.931 1140.87 cv
718.534 1140.27 721.129 1139.72 723.701 1139.18 cv
731.337 1137.56 li
732.596 1137.28 733.84 1136.98 735.077 1136.68 cv
738.849 1135.69 li
744.17 1134.33 749.427 1133.5 754.383 1132.41 cv
756.883 1131.86 759.222 1131.28 761.6 1130.5 cv
764.033 1129.72 766.454 1128.86 768.88 1127.98 cv
773.725 1126.23 778.617 1124.26 783.522 1122.41 cv
788.228 1120.63 792.824 1118.37 797.517 1116.07 cv
799.858 1114.91 802.235 1113.71 804.641 1112.58 cv
807.001 1111.48 809.347 1110.36 811.661 1109.2 cv
816.296 1106.9 820.794 1104.4 825.066 1101.64 cv
829.305 1098.9 833.217 1095.63 836.81 1091.97 cv
840.426 1088.33 843.847 1084.35 846.847 1080.18 cv
848.313 1078.07 849.662 1075.87 850.653 1073.49 cv
851.701 1071.14 852.339 1068.6 852.573 1065.97 cv
852.823 1068.6 852.53 1071.3 851.839 1073.9 cv
851.147 1076.51 850.04 1078.99 848.81 1081.38 cv
847.565 1083.76 846.107 1086.02 844.611 1088.22 cv
843.109 1090.42 841.533 1092.59 839.842 1094.69 cv
836.437 1098.86 832.541 1102.71 828.221 1106.07 cv
823.929 1109.4 819.339 1112.21 814.734 1114.9 cv
812.427 1116.24 810.102 1117.53 807.774 1118.79 cv
800.902 1122.55 li
796.288 1125.11 791.499 1127.61 786.441 1129.72 cv
781.57 1131.72 776.738 1133.73 771.739 1135.65 cv
769.241 1136.6 766.713 1137.5 764.148 1138.34 cv
761.541 1139.22 758.782 1139.93 756.151 1140.5 cv
750.842 1141.63 745.704 1142.43 740.829 1143.62 cv
736.961 1144.56 li
735.642 1144.86 734.324 1145.15 733.013 1145.41 cv
730.389 1145.95 727.786 1146.43 725.199 1146.88 cv
722.615 1147.35 720.054 1147.8 717.521 1148.3 cv
716.228 1148.56 715.06 1148.8 713.84 1149.09 cv
712.626 1149.39 711.404 1149.71 710.17 1150.06 cv
705.246 1151.46 700.119 1153.15 694.668 1154.16 cv
689.198 1155.13 683.87 1155.46 678.633 1155.74 cv
676.015 1155.88 673.426 1156.03 670.86 1156.27 cv
669.59 1156.39 668.292 1156.52 666.967 1156.62 cv
663.023 1156.95 li
657.758 1157.32 652.505 1157.74 647.243 1158.07 cv
639.367 1158.59 li
636.738 1158.73 634.113 1158.91 631.479 1159.02 cv
cp
.780392 .898039 .972549 rgb
f
484.353 1162.9 mo
486.72 1162.46 489.113 1162.24 491.485 1162.01 cv
493.864 1161.78 496.232 1161.62 498.602 1161.47 cv
503.338 1161.17 508.061 1161 512.777 1160.84 cv
522.207 1160.58 531.607 1160.5 541.002 1160.55 cv
550.396 1160.58 559.781 1160.72 569.192 1161.01 cv
578.607 1161.31 588.026 1161.62 597.586 1162.55 cv
588.324 1165.06 578.888 1166.55 569.427 1167.53 cv
559.961 1168.45 550.457 1168.88 540.964 1168.84 cv
531.471 1168.78 521.986 1168.29 512.541 1167.34 cv
507.818 1166.86 503.107 1166.25 498.409 1165.52 cv
493.708 1164.78 489.046 1163.88 484.353 1162.9 cv
cp
f
347.54 988.664 mo
344.276 989.56 340.965 990.286 337.672 991.047 cv
334.373 991.779 331.081 992.507 327.847 993.372 cv
321.375 995 315.347 997.746 308.955 1000.25 cv
307.365 1000.87 305.702 1001.43 304.07 1001.95 cv
302.478 1002.46 300.892 1002.98 299.308 1003.53 cv
296.142 1004.62 292.99 1005.76 289.835 1006.93 cv
280.383 1010.44 li
277.273 1011.62 274.185 1012.89 271.103 1014.2 cv
268.033 1015.5 264.926 1016.87 261.879 1018.22 cv
258.872 1019.57 255.891 1020.99 252.939 1022.51 cv
249.983 1024.02 247.055 1025.63 244.095 1027.23 cv
241.135 1028.83 238.229 1030.44 235.378 1032.11 cv
232.537 1033.8 229.748 1035.52 227.092 1037.36 cv
224.51 1039.17 221.765 1041.3 219.148 1043.3 cv
216.531 1045.32 214.01 1047.34 211.817 1049.51 cv
209.613 1051.67 207.836 1053.93 206.529 1056.5 cv
205.215 1059.06 204.363 1061.85 203.918 1064.83 cv
203.691 1066.31 203.566 1067.84 203.509 1069.41 cv
203.483 1070.19 203.468 1070.98 203.471 1071.78 cv
203.478 1072.56 203.491 1073.3 203.542 1074.05 cv
203.838 1080.05 206.063 1085.63 209.771 1090.55 cv
210.21 1091.14 210.73 1091.81 211.254 1092.47 cv
212.803 1094.43 li
213.834 1095.72 214.874 1096.97 215.937 1098.19 cv
218.064 1100.63 220.289 1102.91 222.68 1104.96 cv
223.882 1105.98 225.122 1106.94 226.406 1107.85 cv
227.716 1108.78 229.082 1109.65 230.465 1110.51 cv
233.234 1112.23 236.122 1113.85 239.064 1115.41 cv
241.986 1116.96 245.045 1118.53 247.971 1119.98 cv
250.89 1121.4 253.956 1122.63 257.06 1123.87 cv
266.504 1127.53 li
275.911 1131.32 li
282.135 1133.85 288.427 1136.28 294.79 1138.3 cv
297.986 1139.29 301.246 1140.16 304.511 1141.03 cv
307.77 1141.93 311.045 1142.8 314.27 1143.82 cv
307.601 1142.68 300.91 1141.88 294.221 1140.52 cv
290.859 1139.87 287.576 1138.95 284.301 1138.06 cv
281.028 1137.14 277.773 1136.16 274.536 1135.15 cv
264.907 1132.02 li
255.233 1128.99 li
251.98 1127.96 248.726 1126.81 245.494 1125.43 cv
242.304 1124.03 239.281 1122.66 236.164 1121.2 cv
229.987 1118.24 223.769 1115.17 218.031 1110.61 cv
215.223 1108.36 212.627 1105.88 210.262 1103.28 cv
209.074 1101.98 207.93 1100.66 206.819 1099.34 cv
205.176 1097.37 li
204.64 1096.72 204.103 1096.07 203.52 1095.32 cv
201.239 1092.43 199.301 1089.17 197.885 1085.64 cv
196.456 1082.12 195.644 1078.34 195.37 1074.6 cv
195.29 1073.67 195.276 1072.72 195.262 1071.82 cv
195.255 1070.93 195.266 1070.03 195.292 1069.12 cv
195.35 1067.32 195.488 1065.48 195.76 1063.62 cv
196.292 1059.92 197.383 1056.16 199.16 1052.7 cv
200.925 1049.25 203.418 1046.17 206.042 1043.63 cv
208.676 1041.07 211.439 1038.86 214.19 1036.79 cv
216.976 1034.74 219.583 1032.76 222.562 1030.73 cv
225.482 1028.77 228.465 1026.98 231.48 1025.3 cv
234.489 1023.63 237.534 1022.04 240.549 1020.5 cv
243.56 1018.95 246.621 1017.44 249.723 1015.97 cv
252.829 1014.51 255.979 1013.1 259.196 1011.83 cv
262.384 1010.59 265.522 1009.39 268.724 1008.21 cv
271.919 1007.03 275.138 1005.88 278.392 1004.81 cv
281.674 1003.75 284.861 1002.77 288.12 1001.8 cv
291.367 1000.84 294.633 999.887 297.921 998.996 cv
299.566 998.551 301.215 998.12 302.873 997.711 cv
304.49 997.318 306.051 996.873 307.657 996.408 cv
314.027 994.549 320.559 992.131 327.37 991.136 cv
334.111 990.048 340.831 989.541 347.54 988.664 cv
f
768.607 805.419 mo
776.833 795.126 785.073 783.225 784.044 770.09 cv
783.013 756.954 767.233 745.153 756.465 752.747 cv
743.631 761.797 752.95 782.4 748.231 797.379 cv
743.287 813.075 724.465 818.882 712.569 830.253 cv
705.471 837.037 700.829 845.926 694.989 853.818 cv
689.148 861.711 681.294 869.05 671.554 870.291 cv
661.814 871.533 650.718 863.932 651.576 854.151 cv
652.214 846.859 658.586 841.67 663.267 836.042 cv
670.662 827.151 674.473 815.362 673.683 803.826 cv
673.439 800.264 672.738 796.636 670.839 793.612 cv
668.444 789.801 664.399 787.339 660.286 785.508 cv
642.674 777.674 619.547 777.579 609.015 761.434 cv
594.157 738.662 618.964 707.198 609.19 681.824 cv
608.159 679.145 606.681 676.528 604.36 674.837 cv
602.139 673.218 599.315 672.589 596.567 672.598 cv
584.666 672.637 575.451 683.862 572.481 695.388 cv
569.512 706.912 570.962 719.057 570.198 730.935 cv
569.434 742.812 565.637 755.664 555.599 762.057 cv
547.56 767.175 537.726 766.928 527.975 766.68 cv
525.005 766.605 522.042 766.53 519.141 766.606 cv
496.805 767.191 476.008 777.435 456.041 787.463 cv
448.542 791.229 440.931 795.071 434.793 800.793 cv
426.228 808.778 421.222 819.742 415.804 830.123 cv
410.385 840.503 403.913 851.022 393.735 856.811 cv
383.556 862.599 368.746 861.793 362.104 852.149 cv
358.779 847.322 357.998 841.243 357.311 835.423 cv
355.569 820.651 353.826 805.881 352.083 791.109 cv
351.516 786.302 350.881 781.302 348.233 777.251 cv
338.363 762.151 310.329 771.243 300.235 756.292 cv
296.966 751.451 296.577 745.18 293.732 740.078 cv
288.84 731.306 276.632 727.889 267.517 732.106 cv
258.401 736.323 253.12 747.091 254.487 757.041 cv
257.178 776.619 281.282 790.261 278.572 809.837 cv
277.16 820.044 268.72 827.544 262.582 835.82 cv
241.553 864.179 249.895 909.674 279.618 928.727 cv
288.065 934.141 297.699 937.545 305.974 943.218 cv
324.842 956.153 334.424 979.179 352.151 993.638 cv
365.961 1004.9 383.639 1010.11 400.961 1014.3 cv
481.722 1033.82 566.438 1036.82 648.38 1023.07 cv
681.604 1017.5 765.544 1006.88 751.932 954.95 cv
744.455 926.43 712.869 913.042 720.393 879.441 cv
726.752 851.044 751.058 827.377 768.607 805.419 cv
.34902 .682353 .882353 rgb
f
722.893 870.971 mo
720.004 874.054 717.502 877.783 715.607 881.296 cv
709.341 869.093 688.539 868.988 682.15 881.128 cv
680.086 885.051 679.364 889.753 676.377 893.03 cv
671.775 898.081 663.585 897.731 657.266 895.13 cv
650.947 892.527 645.425 888.142 638.922 886.04 cv
631.182 883.538 622.921 884.497 614.677 885.456 cv
606.027 886.463 597.394 887.469 589.401 884.477 cv
573.095 878.373 566.769 856.117 574.702 840.619 cv
579.619 831.012 588.683 823.692 592.062 813.443 cv
595.441 803.194 587.434 788.479 577.246 792.039 cv
567.454 795.461 568.624 810.157 561.845 818.008 cv
554.378 826.656 540.11 824.288 530.391 830.296 cv
516.913 838.625 517.871 859.147 525.516 873.025 cv
529.288 879.872 534.24 886.083 537.281 893.284 cv
540.324 900.485 541.157 909.296 536.756 915.757 cv
529.92 925.793 513.855 924.795 504.366 917.217 cv
494.876 909.638 490.086 897.817 484.854 886.858 cv
479.623 875.899 472.763 864.568 461.492 860.043 cv
446.025 853.834 428.924 862.682 414.873 871.648 cv
400.822 880.615 384.689 890.425 368.6 886.07 cv
346.123 879.986 339.613 851.747 324.416 834.102 cv
296.899 802.154 292.613 872.293 287.364 885.124 cv
282.297 897.513 274.168 906.818 266.087 916.519 cv
269.932 921.229 274.427 925.399 279.618 928.727 cv
288.065 934.141 297.699 937.545 305.974 943.218 cv
324.842 956.153 334.423 979.179 352.151 993.638 cv
365.961 1004.9 383.639 1010.11 400.961 1014.3 cv
418.973 1018.65 437.188 1022.13 455.518 1024.84 cv
477.802 1027.68 500.168 1030.1 522.606 1029.63 cv
567.98 1028.69 612.47 1015.92 654.147 997.958 cv
686.223 984.131 718.869 965.251 734.127 933.831 cv
735.12 931.786 736.005 929.7 736.841 927.595 cv
726.373 913.679 715.667 900.547 720.393 879.441 cv
721.036 876.566 721.907 873.753 722.893 870.971 cv
.364706 .498039 .752941 rgb
f
535.044 634.083 mo
520.226 515.556 524.661 397.099 517.287 277.511 cv
511.569 184.781 503.009 92.2206 491.625 0 cv
290.91 0 li
320.148 64.6226 339.215 131.702 354.744 199.769 cv
373.874 283.622 387.652 368.971 408.515 453.063 cv
432.187 548.48 453.707 667.22 463.034 785.253 cv
472.359 903.288 496.749 1017.79 496.749 1017.79 cv
561.312 1015.67 li
561.312 1015.67 567.767 954.177 559.159 901.167 cv
550.552 848.158 547.119 730.659 535.044 634.083 cv
.541176 .772549 .92549 rgb
f
329.867 0 mo
331.104 4.82611 332.365 9.62436 333.746 14.3346 cv
343.609 47.9487 354.104 81.3837 365.226 114.615 cv
371.125 132.245 378.135 136.512 394.923 142.049 cv
408.103 146.395 413.346 161.532 417.898 174.469 cv
422.45 187.408 431.011 202.081 444.909 202.183 cv
453.912 202.25 461.846 195.551 465.751 187.558 cv
469.656 179.565 470.301 170.451 470.674 161.588 cv
472.949 107.504 467.526 53.6118 459.298 0 cv
329.867 0 li
.780392 .898039 .972549 rgb
f
443.107 129.275 mo
438.45 129.275 434.213 124.5 432.166 119.915 cv
429.769 114.543 427.78 108.066 422.259 105.863 cv
420.818 105.289 419.325 105.09 417.8 105.09 cv
416.076 105.09 414.31 105.344 412.536 105.599 cv
410.76 105.854 408.974 106.109 407.21 106.109 cv
406.891 106.109 406.572 106.101 406.254 106.083 cv
399.175 105.674 393.215 100.266 390.096 93.9902 cv
386.979 87.7159 386.149 80.6175 385.196 73.6945 cv
381.902 49.7724 376.583 26.1236 369.334 3.06486 cv
369.011 2.03973 368.665 1.02288 368.335 0 cv
427.973 0 li
428.355 1.52641 428.726 3.05583 429.119 4.57923 cv
434.339 24.7929 437.21 44.7867 441.115 65.3609 cv
444.098 81.0804 446.848 96.7848 450.009 112.467 cv
451.228 118.52 451.385 126.628 445.533 128.828 cv
444.718 129.135 443.907 129.275 443.107 129.275 cv
level3{
gsave
clp
[-28.5189 -241.698 241.698 -28.5189 424.221 183.242 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~a6!*;k4m'\pr_aobNJZEkP<?cq9A.!cKP)Ml1r]jq9eL'dd$YWlM8rqqUFj-ea3.`m/#?$qUk33g$SXi
meY]+qV:Q:h=(6sn,(u2qqpo?i:6^'nb_>9qr@8EjRW60oDI_Ar9!VKkOe]9o_dtHr9EtQlh:8BpAO@O
rU'@Xme?\Kq#0^WrUK[]o(i7Uq>Ks^rq-'dp&"a^qu6?erqQEjq>C6grVl]mrqlZor;Q`prr;uts8W-!
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-28.5189 -241.698 241.698 -28.5189 424.221 183.242 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`lH-?a2l?CaN;QGai_cKb0.uObKJ)PbKS2Sbg"DWc-FV[cHjh_cd:%cd*^7gdF-IkdaQ[oe'ldpe'ums
eC<%!e^`7%f%/I)f@S[-f\"m1g"G*5g=k<9gY:N=gt^]?gt^`Ah;-rEhVR/Ihr!AMi8ESQiSieUio9"Y
j5]1[j5]1\jQ,C`jlPUdk2tghkND$lkih6pl07HtlK[["lK[[#lg*m'm-O*+mHs</mdBN3n*f`7nF5r;
naZ/>o()ABoCMSFoCMSFo^qeJp%A"Np@e4Rp\4FVq"XXZq>'j^qYL'bqYL'bqtp9fr;?KjrVc]nrr2or
~>
<~jQ5LbjlPUcjlPUcjlY^fk2tggk3(pjkND$kkND$kkNM-nkih6okiq?rl07Hsl07Hsl0@R!lK[["lKdd%
lg*m&lg*p(m-O**m-O**m-O-,mHs<.mHs?0mdBN2mdBN2mdBQ4n*f`6n*fc8nF5r:nF5r:nF5u<naZ/>
naZ/?o()ABo()ABo()ACoCMSFoCMSGo^qeJo^qeKp%A"Np%A"Np%A"Op@e4Rp@e4Sp\4FVp\4FVp\4FW
q"XXZq"XXZq>'j^q>'j^qYL'bqYL'bqYL'bqtp9fqtp9fr;?Kjr;?Kjr;?KjrVc]nrVc]nrr2ors8W-!
~>
<~p\4FVp\4FVp\4FVp\4FVp\=OYq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"aa]q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'m`qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL*d
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9gr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kj
r;?Kjr;?KjrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrr2ors8W-!s8W-!s8W-!s8W-!
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
386.61 206.297 mo
366.006 210.91 391.052 284.715 398.471 314.529 cv
407.653 351.425 442.198 439.533 443.917 469.774 cv
445.636 500.015 466.448 487.963 463.751 451.646 cv
461.029 415.003 445.023 375.658 460.677 373.74 cv
474.75 372.014 464.813 398.815 480.88 396.177 cv
497.467 393.454 482.993 291.267 475.468 262.697 cv
467.942 234.127 445.328 246.771 430.035 246.205 cv
414.742 245.639 407.653 201.584 386.61 206.297 cv
cp
.780392 .898039 .972549 rgb
f
451.555 567.09 mo
457.291 595.814 460.642 638.711 467.816 691.013 cv
474.99 743.316 481.685 797.033 490.293 839.912 cv
496.713 871.89 503.684 902.109 507.988 943.103 cv
512.292 984.097 537.16 963.365 528.074 935.094 cv
518.234 904.477 507.51 867.948 514.683 860.88 cv
521.857 853.812 521.835 899.175 534.769 899.754 cv
545.291 900.224 540.987 868.183 537.16 824.362 cv
534.499 793.878 526.627 749.764 520.422 699.024 cv
513.249 640.361 505.492 597.184 503.205 560.493 cv
499.858 506.776 492.684 465.783 486.467 465.311 cv
480.25 464.84 479.099 500.115 468.294 501.593 cv
451.077 503.949 445.817 538.346 451.555 567.09 cv
cp
f
751.242 1076.5 mo
764.111 1063.88 774.952 1049.18 783 1033.05 cv
794.842 1009.31 797.817 983.148 798.753 957.034 cv
799.488 936.494 800.634 915.97 802.19 895.476 cv
803.599 876.926 804.646 857.939 813.553 841.113 cv
821.432 825.251 834.685 811.094 835.783 793.416 cv
836.197 786.758 834.116 779.126 828.131 776.178 cv
823.169 773.735 816.927 775.416 812.722 779.01 cv
804.771 785.806 802.993 796.772 800.105 806.216 cv
794.242 825.397 782.534 842.164 771.002 858.574 cv
766.092 865.561 761.065 872.672 754.228 877.79 cv
743.947 885.486 730.698 887.878 719.307 893.81 cv
696.167 905.858 683.019 930.988 662.549 947.163 cv
639.399 965.455 608.535 970.949 579.03 971.002 cv
571.344 970.933 563.115 970.958 554.587 970.983 cv
524.324 971.069 490.285 971.157 463.313 967.117 cv
457.801 966.292 451.784 965.12 448.269 960.795 cv
443.412 954.82 445.411 945.378 440.827 939.189 cv
436.497 933.343 426.501 933.094 421.885 938.718 cv
416.532 945.241 419.294 954.816 420.753 963.127 cv
422.214 971.438 419.88 982.685 411.498 983.648 cv
406.747 984.194 402.255 980.68 400.226 976.349 cv
398.196 972.019 398.127 967.052 398.331 962.275 cv
398.806 951.064 400.564 939.836 399.418 928.674 cv
398.273 917.513 393.648 906.002 384.241 899.886 cv
370.83 891.165 353.29 896.001 337.462 898.327 cv
323.082 900.439 310.061 898.131 295.871 897.704 cv
293.975 897.647 292.136 897.649 290.349 897.651 cv
280.952 897.664 272.975 897.677 265.508 889.03 cv
258.261 880.637 255.577 869.321 253.58 858.413 cv
251.583 847.505 249.919 836.192 244.144 826.725 cv
241.032 821.623 235.889 816.857 229.938 817.397 cv
225.187 817.828 221.348 821.517 216.721 822.68 cv
209.775 824.423 202.679 820.12 197.831 814.849 cv
192.984 809.577 189.37 803.157 183.878 798.561 cv
178.388 793.967 169.911 791.659 164.155 795.911 cv
148.206 807.695 167.335 824.604 175.178 834.727 cv
187.604 850.764 199.138 867.492 209.718 884.802 cv
229.796 917.655 251.14 956.663 260.241 994.029 cv
267.062 1022.04 271.165 1051.06 282.698 1077.69 cv
293.812 1103.35 315.137 1112.77 341.616 1119.73 cv
422.573 1141.03 514.336 1146.39 595.018 1138.25 cv
611.54 1136.58 627.571 1131.74 643.563 1127.52 cv
675.457 1119.1 706.355 1111.71 733.394 1091.72 cv
739.684 1087.07 745.654 1081.98 751.242 1076.5 cv
f
643.563 1127.52 mo
675.457 1119.1 706.355 1111.71 733.394 1091.72 cv
739.684 1087.07 745.654 1081.98 751.242 1076.5 cv
764.111 1063.88 774.952 1049.18 783 1033.05 cv
794.842 1009.31 797.817 983.146 798.753 957.034 cv
799.291 942.004 800.054 926.984 801.031 911.977 cv
789.808 954.682 760.578 983.838 730.66 1011.39 cv
726.806 1014.3 722.772 1016.93 718.601 1019.33 cv
710.257 1024.14 701.318 1028.03 692.282 1031.35 cv
670.988 1039.16 648.651 1044.13 626.053 1046.08 cv
610.502 1047.42 594.703 1047.36 579.581 1051.22 cv
556.124 1057.22 530.993 1072.31 509.743 1060.71 cv
491.722 1050.87 487.707 1027.33 477.408 1009.57 cv
475.973 1007.1 474.26 1004.59 471.671 1003.37 cv
465.302 1000.37 458.053 1007.36 457.449 1014.37 cv
456.845 1021.38 460.284 1028.01 462.462 1034.7 cv
464.639 1041.4 465.209 1049.7 460.113 1054.56 cv
454.446 1059.95 444.866 1057.95 438.546 1053.34 cv
432.226 1048.72 427.622 1042.04 421.217 1037.54 cv
403.793 1025.3 379.406 1032.85 361.495 1044.36 cv
351.249 1050.95 340.253 1059.09 328.225 1057.16 cv
312.178 1054.59 304.717 1036.37 299.191 1021.08 cv
291.38 999.477 282.935 977.988 266.989 961.173 cv
262.116 956.035 258.115 951.419 255.364 944.785 cv
251.133 934.579 247.667 923.937 241.904 914.446 cv
239.35 910.242 236.204 905.314 231.99 902.714 cv
226.736 899.473 222.099 896.486 217.671 892.068 cv
215.35 889.753 213.458 888.203 210.827 886.631 cv
230.578 919.101 251.308 957.348 260.241 994.029 cv
267.062 1022.04 271.165 1051.06 282.698 1077.69 cv
293.812 1103.35 315.137 1112.77 341.616 1119.73 cv
422.573 1141.03 509.833 1144.41 595.018 1138.25 cv
611.581 1137.05 627.57 1131.74 643.563 1127.52 cv
.541176 .772549 .92549 rgb
f
787.926 1028.41 mo
795.544 1003 797.818 983.146 798.753 957.034 cv
798.763 956.745 798.778 956.457 798.788 956.168 cv
798.386 954.795 786.937 1022.19 760.153 1037.9 cv
751.027 1043.25 740.571 1045.92 731.214 1050.86 cv
715.708 1059.04 703.851 1073.07 688.167 1080.91 cv
654.918 1097.52 614.351 1082.47 578.077 1090.57 cv
566.11 1093.24 554.775 1098.42 542.702 1100.56 cv
530.631 1102.71 516.885 1101.21 508.322 1092.44 cv
504.231 1088.24 501.654 1082.73 497.383 1078.72 cv
493.112 1074.7 485.852 1072.68 481.574 1076.69 cv
476.006 1081.9 480.278 1091.63 477.13 1098.58 cv
474.154 1105.14 465.578 1107.02 458.421 1106.15 cv
446.867 1104.74 436.031 1098.22 429.39 1088.66 cv
424.202 1081.2 421.423 1071.98 414.823 1065.73 cv
406.039 1057.42 392.221 1056.41 380.716 1060.14 cv
369.21 1063.87 359.482 1071.57 350.108 1079.22 cv
344.552 1083.75 338.775 1088.44 331.823 1090.18 cv
314.093 1094.64 297.548 1078.1 291.391 1060.88 cv
285.234 1043.67 285.013 1024.53 277.079 1008.06 cv
272.198 997.93 264.767 989.525 256.755 981.537 cv
258.048 985.714 259.231 989.883 260.241 994.029 cv
267.062 1022.04 271.165 1051.06 282.698 1077.69 cv
293.812 1103.35 315.136 1112.77 341.616 1119.74 cv
422.573 1141.03 506.951 1145.85 595.018 1138.25 cv
608.025 1137.13 703.111 1128.93 757.667 1081.73 cv
772.507 1068.89 781.324 1050.44 787.926 1028.41 cv
cp
.364706 .619608 .835294 rgb
f
332.796 1030.85 mo
332.762 1030.85 332.728 1030.85 332.694 1030.85 cv
328.349 1030.79 324.946 1026.91 323.377 1022.86 cv
321.808 1018.81 321.47 1014.36 319.912 1010.31 cv
317.85 1004.93 313.811 1000.61 310.475 995.923 cv
305.065 988.316 301.394 979.478 299.824 970.276 cv
299.016 965.536 298.987 960.05 302.388 956.651 cv
305.104 953.937 309.261 953.335 312.507 951.284 cv
323.088 944.597 319.242 927.345 327.142 917.637 cv
331.026 912.863 337.352 910.611 343.5 910.313 cv
344.833 910.248 346.13 910.212 347.39 910.212 cv
360.305 910.212 369.154 913.93 370.249 927.621 cv
371.705 945.857 371.378 963.752 374.543 981.938 cv
375.277 986.156 376.102 990.475 375.321 994.684 cv
374.54 998.893 371.74 1003.04 367.577 1004.03 cv
366.893 1004.19 366.219 1004.27 365.556 1004.27 cv
360.243 1004.27 355.61 999.362 352.165 994.911 cv
347.164 995.527 344.038 1000.83 343.296 1005.82 cv
342.552 1010.8 343.38 1015.95 342.411 1020.89 cv
341.448 1025.8 337.784 1030.85 332.796 1030.85 cv
level3{
gsave
clp
[31.6997 -110.949 110.949 31.6997 323.956 1025.79 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[31.6997 -110.949 110.949 31.6997 323.956 1025.79 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
520.878 1035.2 mo
503.982 1035.2 502.297 1006.71 511.811 996.346 cv
523.095 984.051 551.235 987.384 566.029 986.229 cv
569.158 985.985 572.393 985.773 575.608 985.773 cv
583.267 985.773 590.809 986.975 596.513 991.809 cv
601.327 995.887 604.793 1002.47 611.038 1003.37 cv
611.484 1003.44 611.928 1003.47 612.369 1003.47 cv
616.814 1003.47 620.932 1000.33 623.642 996.683 cv
626.621 992.671 628.506 987.922 631.566 983.97 cv
640.373 972.592 656.106 970.531 670.846 970.531 cv
672.629 970.531 674.394 970.561 676.134 970.608 cv
681.021 970.742 686.052 970.942 690.505 972.959 cv
694.957 974.978 698.735 979.278 698.629 984.165 cv
698.537 988.421 695.663 992.044 692.929 995.308 cv
685.16 1004.59 676.833 1014.26 665.426 1018.3 cv
657.338 1021.16 648.536 1020.88 639.962 1021.18 cv
621.573 1021.84 603.291 1025.41 586.011 1031.74 cv
581.747 1033.3 577.099 1035.01 572.686 1035.01 cv
570.594 1035.01 568.555 1034.63 566.635 1033.66 cv
560.727 1030.67 557.866 1022.89 551.457 1021.23 cv
550.614 1021.01 549.794 1020.91 548.994 1020.91 cv
540.383 1020.91 534.053 1032.55 524.928 1034.7 cv
523.492 1035.04 522.142 1035.2 520.878 1035.2 cv
level3{
gsave
clp
[-7.20448 -46.8291 46.8291 -7.20448 606.981 1030.34 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-7.20448 -46.8291 46.8291 -7.20448 606.981 1030.34 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
2855.69 1072.78 mo
2855.61 1082.1 2852.51 1091.33 2846.46 1100.02 cv
2841.51 1107.15 2835.75 1115.61 2827.18 1122.19 cv
2820.14 1127.6 2811.01 1131.82 2801.74 1136.79 cv
2793.74 1141.09 2785.25 1146.17 2775.73 1150.1 cv
2767.21 1153.61 2758.27 1157.93 2748.63 1161.11 cv
2739.78 1164.04 2730.21 1166.41 2720.5 1169.03 cv
2711.44 1171.48 2701.84 1173.5 2692.08 1175.67 cv
2682.88 1177.72 2673.2 1179.13 2663.42 1180.92 cv
2654.09 1182.62 2644.13 1181.9 2634.33 1183.35 cv
2624.92 1184.75 2615.28 1185.53 2605.47 1186.69 cv
2596 1187.8 2586.34 1188.21 2576.53 1189.08 cv
2567.02 1189.93 2557.61 1194.05 2547.8 1194.67 cv
2538.24 1195.28 2528.53 1196.06 2518.73 1196.44 cv
2509.15 1196.8 2499.36 1193.53 2489.56 1193.67 cv
2479.95 1193.81 2470.27 1196.43 2460.48 1196.34 cv
2450.7 1196.25 2441.09 1193.02 2431.49 1192.7 cv
2421.7 1192.38 2411.85 1195.71 2402.27 1195.16 cv
2392.48 1194.6 2382.71 1194.52 2373.17 1193.74 cv
2363.37 1192.94 2353.68 1191.79 2344.18 1190.76 cv
2334.38 1189.7 2325.22 1184.73 2315.77 1183.44 cv
2305.99 1182.1 2295.97 1183.52 2286.6 1181.94 cv
2276.83 1180.3 2267.7 1176.3 2258.42 1174.42 cv
2248.67 1172.44 2238.49 1173.45 2229.32 1171.23 cv
2219.6 1168.87 2211.51 1161.65 2202.5 1159.03 cv
2192.83 1156.22 2182.34 1157.31 2173.55 1154.21 cv
2163.97 1150.85 2154.77 1147.44 2146.32 1143.76 cv
2136.87 1139.66 2127.55 1136.15 2119.63 1131.71 cv
2110.46 1126.56 2102.62 1120.24 2095.69 1114.7 cv
2087.25 1107.96 2080.02 1100.75 2075.2 1093.53 cv
2069.32 1084.73 2067.85 1074.66 2067.94 1065.34 cv
2068.03 1056.02 2070.25 1046.37 2076.29 1037.68 cv
2081.25 1030.55 2087.73 1022.66 2096.3 1016.08 cv
2103.34 1010.67 2112.55 1006.64 2121.81 1001.67 cv
2129.81 997.376 2138.69 993.325 2148.21 989.401 cv
2156.73 985.888 2166.1 983.235 2175.74 980.048 cv
2184.59 977.124 2193 971.138 2202.71 968.511 cv
2211.77 966.06 2221.72 965.481 2231.47 963.308 cv
2240.68 961.258 2250.64 961.53 2260.42 959.741 cv
2269.74 958.035 2279.25 956.298 2289.05 954.843 cv
2298.45 953.446 2307.88 950.788 2317.69 949.634 cv
2327.15 948.52 2336.79 947.243 2346.6 946.366 cv
2356.11 945.515 2365.74 943.763 2375.55 943.144 cv
2385.11 942.542 2394.99 946.201 2404.79 945.829 cv
2414.38 945.464 2423.97 941.414 2433.77 941.276 cv
2443.37 941.142 2453.07 944.851 2462.86 944.943 cv
2472.64 945.036 2482.27 945.544 2491.87 945.859 cv
2501.66 946.181 2511.41 944.328 2520.99 944.874 cv
2530.78 945.431 2540.42 946.492 2549.97 947.275 cv
2559.76 948.079 2569.63 946.883 2579.13 947.914 cv
2588.92 948.975 2598.65 949.723 2608.1 951.016 cv
2617.88 952.355 2627 956.947 2636.38 958.521 cv
2646.15 960.161 2655.78 961.26 2665.07 963.141 cv
2674.82 965.116 2685.03 964.033 2694.2 966.259 cv
2703.92 968.616 2712.83 973.146 2721.84 975.767 cv
2731.5 978.577 2740.8 981.476 2749.58 984.566 cv
2759.17 987.936 2769.2 989.283 2777.66 992.958 cv
2787.11 997.061 2794 1005.2 2801.92 1009.65 cv
2811.09 1014.79 2821.25 1017.25 2828.19 1022.79 cv
2836.63 1029.53 2840.85 1039.05 2845.67 1046.26 cv
2851.54 1055.06 2855.78 1063.46 2855.69 1072.78 cv
cp
.541176 .772549 .92549 rgb
f
2202.76 1007 mo
2210.21 1003.45 li
2212.7 1002.28 2215.21 1001.13 2217.74 1000.02 cv
2220.28 998.911 2222.86 997.902 2225.51 996.986 cv
2228.19 996.067 2230.9 995.352 2233.6 994.685 cv
2236.3 994.036 2238.99 993.479 2241.64 992.861 cv
2242.97 992.556 2244.28 992.237 2245.58 991.899 cv
2246.89 991.563 2248.14 991.197 2249.5 990.812 cv
2254.85 989.298 2260.25 988.1 2265.61 986.849 cv
2273.66 984.998 li
2276.38 984.394 2279.1 983.873 2281.81 983.349 cv
2289.94 981.854 li
2298.09 980.411 li
2303.6 979.494 2309.08 978.831 2314.5 978.088 cv
2330.85 975.886 li
2347.08 973.812 li
2352.38 973.091 2357.84 972.044 2363.51 971.471 cv
2366.32 971.184 2369.34 971.029 2372.18 971.096 cv
2375.05 971.133 2377.83 971.334 2380.56 971.5 cv
2383.28 971.669 2385.95 971.811 2388.56 971.817 cv
2391.12 971.842 2393.89 971.69 2396.59 971.555 cv
2402.03 971.276 2407.56 970.817 2413.16 970.791 cv
2414.6 970.786 2415.88 970.805 2417.22 970.764 cv
2418.56 970.728 2419.9 970.668 2421.26 970.583 cv
2429.47 970.022 li
2432.25 969.88 2435.05 969.778 2437.86 969.861 cv
2440.66 969.95 2443.4 970.11 2446.16 970.347 cv
2451.66 970.796 2457.12 971.378 2462.6 971.892 cv
2457.11 972.302 2451.59 972.424 2446.11 972.646 cv
2443.38 972.782 2440.63 972.869 2437.94 973.074 cv
2435.26 973.274 2432.58 973.651 2429.9 974.072 cv
2421.74 975.32 li
2420.36 975.52 2418.97 975.697 2417.57 975.851 cv
2416.17 976.008 2414.71 976.109 2413.41 976.221 cv
2408.03 976.689 2402.63 977.365 2397.13 978.005 cv
2394.36 978.305 2391.65 978.622 2388.72 978.772 cv
2385.84 978.909 2383.02 978.855 2380.26 978.805 cv
2377.5 978.752 2374.8 978.681 2372.17 978.717 cv
2369.52 978.737 2367.05 978.94 2364.4 979.286 cv
2359.16 979.96 2353.83 981.039 2348.27 981.916 cv
2331.84 984.116 li
2315.52 986.2 li
2310.04 986.836 2304.62 987.446 2299.27 988.17 cv
2283.03 990.537 li
2277.63 991.325 2272.32 992.247 2266.87 993.171 cv
2261.45 994.073 2256.09 995.044 2250.75 996.074 cv
2249.45 996.33 2248.03 996.623 2246.65 996.859 cv
2245.27 997.1 2243.89 997.319 2242.52 997.519 cv
2234.36 998.663 li
2223.65 999.886 2213.36 1004.01 2202.76 1007 cv
cp
.780392 .898039 .972549 rgb
f
2355.39 1159.02 mo
2352.75 1158.91 2350.13 1158.73 2347.5 1158.59 cv
2339.62 1158.07 li
2334.36 1157.74 2329.11 1157.32 2323.84 1156.95 cv
2319.9 1156.62 li
2318.57 1156.52 2317.27 1156.39 2316 1156.27 cv
2313.44 1156.03 2310.85 1155.88 2308.23 1155.74 cv
2302.99 1155.46 2297.67 1155.13 2292.2 1154.16 cv
2286.74 1153.15 2281.62 1151.46 2276.7 1150.06 cv
2275.46 1149.71 2274.24 1149.39 2273.02 1149.09 cv
2271.8 1148.8 2270.64 1148.56 2269.34 1148.3 cv
2266.81 1147.8 2264.25 1147.35 2261.66 1146.88 cv
2259.08 1146.43 2256.48 1145.95 2253.85 1145.41 cv
2252.54 1145.15 2251.22 1144.86 2249.9 1144.56 cv
2246.03 1143.62 li
2241.16 1142.43 2236.02 1141.63 2230.71 1140.5 cv
2228.08 1139.93 2225.32 1139.22 2222.72 1138.34 cv
2220.15 1137.5 2217.62 1136.6 2215.13 1135.65 cv
2210.13 1133.73 2205.29 1131.72 2200.42 1129.72 cv
2195.36 1127.61 2190.58 1125.11 2185.96 1122.55 cv
2179.09 1118.79 li
2176.76 1117.53 2174.44 1116.24 2172.13 1114.9 cv
2167.53 1112.21 2162.94 1109.4 2158.64 1106.07 cv
2154.32 1102.71 2150.43 1098.86 2147.02 1094.69 cv
2145.33 1092.59 2143.76 1090.42 2142.25 1088.22 cv
2140.76 1086.02 2139.3 1083.76 2138.05 1081.38 cv
2136.82 1078.99 2135.72 1076.51 2135.03 1073.9 cv
2134.33 1071.3 2134.04 1068.6 2134.29 1065.97 cv
2134.53 1068.6 2135.16 1071.14 2136.21 1073.49 cv
2137.2 1075.87 2138.55 1078.07 2140.02 1080.18 cv
2143.02 1084.35 2146.44 1088.33 2150.05 1091.97 cv
2153.65 1095.63 2157.56 1098.9 2161.8 1101.64 cv
2166.07 1104.4 2170.57 1106.9 2175.2 1109.2 cv
2177.52 1110.36 2179.86 1111.48 2182.22 1112.58 cv
2184.63 1113.71 2187.01 1114.91 2189.35 1116.07 cv
2194.04 1118.37 2198.64 1120.63 2203.34 1122.41 cv
2208.25 1124.26 2213.14 1126.23 2217.99 1127.98 cv
2220.41 1128.86 2222.83 1129.72 2225.26 1130.5 cv
2227.64 1131.28 2229.98 1131.86 2232.48 1132.41 cv
2237.44 1133.5 2242.69 1134.33 2248.02 1135.69 cv
2251.79 1136.68 li
2253.03 1136.98 2254.27 1137.28 2255.53 1137.56 cv
2263.16 1139.18 li
2265.74 1139.72 2268.33 1140.27 2270.93 1140.87 cv
2272.21 1141.16 2273.61 1141.49 2274.92 1141.88 cv
2276.25 1142.26 2277.55 1142.66 2278.82 1143.09 cv
2283.94 1144.76 2288.73 1146.64 2293.55 1147.86 cv
2298.37 1149.06 2303.54 1149.62 2308.75 1150.36 cv
2311.36 1150.72 2314 1151.1 2316.64 1151.57 cv
2319.31 1152.08 2321.83 1152.46 2324.43 1152.94 cv
2334.74 1154.81 2345.09 1156.69 2355.39 1159.02 cv
cp
f
2502.51 1162.9 mo
2497.82 1163.88 2493.16 1164.78 2488.45 1165.52 cv
2483.76 1166.25 2479.05 1166.86 2474.32 1167.34 cv
2464.88 1168.29 2455.39 1168.78 2445.9 1168.84 cv
2436.41 1168.88 2426.9 1168.45 2417.44 1167.53 cv
2407.98 1166.55 2398.54 1165.06 2389.28 1162.55 cv
2398.84 1161.62 2408.26 1161.31 2417.67 1161.01 cv
2427.08 1160.72 2436.47 1160.58 2445.86 1160.55 cv
2455.26 1160.5 2464.66 1160.58 2474.09 1160.84 cv
2478.8 1161 2483.53 1161.17 2488.26 1161.47 cv
2490.63 1161.62 2493 1161.78 2495.38 1162.01 cv
2497.75 1162.24 2500.14 1162.46 2502.51 1162.9 cv
cp
f
2639.32 988.664 mo
2646.03 989.542 2652.75 990.048 2659.49 991.137 cv
2666.31 992.131 2672.84 994.549 2679.21 996.408 cv
2680.81 996.873 2682.37 997.318 2683.99 997.711 cv
2685.65 998.12 2687.3 998.551 2688.94 998.996 cv
2692.23 999.887 2695.5 1000.84 2698.74 1001.8 cv
2702 1002.77 2705.19 1003.75 2708.47 1004.81 cv
2711.73 1005.88 2714.95 1007.03 2718.14 1008.21 cv
2721.34 1009.39 2724.48 1010.59 2727.67 1011.83 cv
2730.89 1013.1 2734.04 1014.51 2737.14 1015.97 cv
2740.24 1017.44 2743.3 1018.95 2746.32 1020.5 cv
2749.33 1022.04 2752.37 1023.63 2755.38 1025.3 cv
2758.4 1026.98 2761.38 1028.77 2764.3 1030.73 cv
2767.28 1032.76 2769.89 1034.74 2772.67 1036.79 cv
2775.43 1038.86 2778.19 1041.07 2780.82 1043.63 cv
2783.45 1046.17 2785.94 1049.25 2787.7 1052.7 cv
2789.48 1056.16 2790.57 1059.92 2791.1 1063.62 cv
2791.38 1065.48 2791.51 1067.32 2791.57 1069.12 cv
2791.6 1070.03 2791.61 1070.93 2791.6 1071.82 cv
2791.59 1072.72 2791.57 1073.67 2791.49 1074.6 cv
2791.22 1078.34 2790.41 1082.12 2788.98 1085.64 cv
2787.56 1089.17 2785.63 1092.43 2783.34 1095.32 cv
2782.76 1096.07 2782.22 1096.72 2781.69 1097.37 cv
2780.04 1099.34 li
2778.93 1100.66 2777.79 1101.98 2776.6 1103.28 cv
2774.24 1105.88 2771.64 1108.36 2768.83 1110.61 cv
2763.1 1115.17 2756.88 1118.24 2750.7 1121.2 cv
2747.58 1122.66 2744.56 1124.03 2741.37 1125.43 cv
2738.14 1126.81 2734.88 1127.96 2731.63 1128.99 cv
2721.96 1132.02 li
2712.33 1135.15 li
2709.09 1136.16 2705.84 1137.14 2702.56 1138.06 cv
2699.29 1138.95 2696.01 1139.87 2692.64 1140.52 cv
2685.95 1141.88 2679.26 1142.68 2672.59 1143.82 cv
2675.82 1142.8 2679.09 1141.93 2682.35 1141.03 cv
2685.62 1140.16 2688.88 1139.29 2692.07 1138.3 cv
2698.44 1136.28 2704.73 1133.85 2710.95 1131.32 cv
2720.36 1127.53 li
2729.8 1123.87 li
2732.91 1122.63 2735.97 1121.4 2738.89 1119.98 cv
2741.82 1118.53 2744.88 1116.96 2747.8 1115.41 cv
2750.74 1113.85 2753.63 1112.23 2756.4 1110.51 cv
2757.78 1109.65 2759.15 1108.78 2760.46 1107.85 cv
2761.74 1106.94 2762.98 1105.98 2764.18 1104.96 cv
2766.58 1102.91 2768.8 1100.63 2770.93 1098.19 cv
2771.99 1096.97 2773.03 1095.72 2774.06 1094.43 cv
2775.61 1092.47 li
2776.13 1091.81 2776.66 1091.14 2777.09 1090.55 cv
2780.8 1085.63 2783.03 1080.05 2783.32 1074.05 cv
2783.37 1073.3 2783.39 1072.56 2783.39 1071.78 cv
2783.4 1070.98 2783.38 1070.19 2783.36 1069.41 cv
2783.3 1067.84 2783.17 1066.31 2782.95 1064.83 cv
2782.5 1061.85 2781.65 1059.06 2780.33 1056.5 cv
2779.03 1053.93 2777.25 1051.67 2775.05 1049.51 cv
2772.85 1047.34 2770.33 1045.32 2767.72 1043.3 cv
2765.1 1041.3 2762.35 1039.17 2759.77 1037.36 cv
2757.12 1035.52 2754.33 1033.8 2751.49 1032.11 cv
2748.63 1030.44 2745.73 1028.83 2742.77 1027.23 cv
2739.81 1025.63 2736.88 1024.03 2733.92 1022.51 cv
2730.97 1020.99 2727.99 1019.57 2724.99 1018.22 cv
2721.94 1016.87 2718.83 1015.5 2715.76 1014.2 cv
2712.68 1012.89 2709.59 1011.62 2706.48 1010.44 cv
2697.03 1006.93 li
2693.87 1005.76 2690.72 1004.62 2687.56 1003.53 cv
2685.97 1002.98 2684.39 1002.46 2682.79 1001.95 cv
2681.16 1001.43 2679.5 1000.87 2677.91 1000.24 cv
2671.52 997.746 2665.49 995 2659.02 993.372 cv
2655.78 992.507 2652.49 991.779 2649.19 991.047 cv
2645.9 990.286 2642.59 989.559 2639.32 988.664 cv
cp
f
2705.33 1071.36 mo
2705.41 1074.46 2704.45 1077.55 2702.93 1080.28 cv
2701.39 1083.02 2699.34 1085.43 2697.1 1087.62 cv
2692.56 1091.94 2687.29 1095.41 2681.84 1098.44 cv
2676.37 1101.5 2670.64 1103.94 2664.95 1106.39 cv
2659.2 1108.81 2653.41 1111.04 2647.31 1112.8 cv
2641.21 1114.47 2635.09 1115.51 2629.14 1116.88 cv
2627.64 1117.22 2626.18 1117.56 2624.75 1117.97 cv
2623.3 1118.36 2621.86 1118.8 2620.4 1119.27 cv
2617.49 1120.2 2614.55 1121.2 2611.52 1122.1 cv
2608.49 1122.99 2605.37 1123.8 2602.15 1124.29 cv
2598.94 1124.78 2595.77 1125.01 2592.66 1125.21 cv
2589.56 1125.41 2586.51 1125.56 2583.53 1125.86 cv
2580.57 1126.14 2577.62 1126.64 2574.59 1127.16 cv
2568.58 1128.22 2562.42 1129.48 2556.08 1130.16 cv
2537.56 1132.03 li
2532.92 1132.49 li
2531.38 1132.6 2529.83 1132.65 2528.28 1132.74 cv
2518.98 1133.2 li
2509.69 1133.66 li
2506.65 1133.8 2503.7 1134.05 2500.63 1134.35 cv
2497.58 1134.64 2494.48 1134.98 2491.32 1135.2 cv
2488.16 1135.4 2485 1135.62 2481.54 1135.42 cv
2474.86 1134.99 2468.84 1133.47 2463.16 1133.16 cv
2462.45 1133.11 2461.76 1133.1 2461.05 1133.08 cv
2458.82 1133.1 li
2457.32 1133.12 2455.82 1133.16 2454.29 1133.22 cv
2451.25 1133.35 2448.15 1133.52 2444.99 1133.61 cv
2441.84 1133.71 2438.6 1133.72 2435.35 1133.51 cv
2432.12 1133.3 2428.97 1132.93 2425.9 1132.56 cv
2422.82 1132.19 2419.81 1131.79 2416.87 1131.56 cv
2415.37 1131.44 2414 1131.36 2412.57 1131.36 cv
2411.13 1131.36 2409.67 1131.41 2408.17 1131.5 cv
2405.19 1131.67 2402.09 1131.96 2398.85 1132.08 cv
2397.23 1132.14 2395.58 1132.17 2393.88 1132.09 cv
2392.18 1132.01 2390.49 1131.84 2388.85 1131.6 cv
2382.3 1130.6 2376.36 1128.66 2370.72 1127.83 cv
2365.13 1126.99 2359.07 1127.35 2352.63 1127.07 cv
2351.02 1126.99 2349.38 1126.87 2347.72 1126.68 cv
2346.02 1126.47 2344.49 1126.2 2342.9 1125.91 cv
2339.76 1125.32 2336.69 1124.61 2333.67 1123.89 cv
2330.65 1123.18 2327.69 1122.47 2324.76 1121.88 cv
2321.81 1121.3 2318.74 1120.76 2315.7 1120.2 cv
2312.66 1119.65 2309.6 1119.08 2306.53 1118.45 cv
2304.99 1118.13 2303.45 1117.8 2301.91 1117.45 cv
2297.42 1116.41 li
2291.45 1115.03 2285.33 1113.79 2279.2 1111.97 cv
2273.11 1110.14 2267.25 1107.82 2261.53 1105.45 cv
2257.25 1103.69 li
2255.8 1103.1 2254.33 1102.49 2252.9 1101.85 cv
2250.01 1100.57 2247.19 1099.16 2244.41 1097.68 cv
2241.63 1096.18 2238.91 1094.6 2236.24 1092.93 cv
2233.54 1091.22 2230.91 1089.35 2228.47 1087.22 cv
2226.03 1085.1 2223.75 1082.73 2221.82 1080.07 cv
2220.86 1078.75 2219.97 1077.3 2219.22 1075.89 cv
2218.48 1074.52 2217.7 1073.07 2217.11 1071.41 cv
2216.82 1070.59 2216.59 1069.71 2216.45 1068.8 cv
2216.31 1067.91 2216.29 1066.88 2216.36 1066.08 cv
2216.47 1064.39 2216.76 1062.73 2217.22 1061.12 cv
2218.17 1057.91 2219.74 1054.94 2221.76 1052.37 cv
2223.75 1049.77 2226.17 1047.58 2228.76 1045.7 cv
2231.38 1043.82 2234.19 1042.36 2237.01 1041.02 cv
2239.85 1039.69 2242.72 1038.5 2245.59 1037.34 cv
2248.46 1036.21 2251.33 1035.01 2254.29 1034.03 cv
2260.19 1032.07 2266.18 1030.56 2272.16 1028.96 cv
2266.31 1030.96 2260.42 1032.87 2254.72 1035.2 cv
2251.88 1036.34 2249.11 1037.67 2246.3 1038.98 cv
2243.51 1040.29 2240.74 1041.62 2238.05 1043.07 cv
2235.38 1044.53 2232.76 1046.09 2230.44 1047.93 cv
2228.12 1049.78 2226.01 1051.89 2224.34 1054.28 cv
2222.65 1056.65 2221.42 1059.3 2220.74 1062.06 cv
2220.42 1063.44 2220.24 1064.84 2220.22 1066.24 cv
2220.19 1066.98 2220.24 1067.5 2220.36 1068.14 cv
2220.48 1068.75 2220.68 1069.36 2220.93 1069.99 cv
2221.44 1071.23 2222.15 1072.49 2222.92 1073.81 cv
2223.68 1075.1 2224.45 1076.26 2225.36 1077.41 cv
2227.13 1079.68 2229.24 1081.73 2231.53 1083.57 cv
2233.82 1085.43 2236.3 1087.06 2238.87 1088.56 cv
2241.5 1090.08 2244.18 1091.51 2246.89 1092.84 cv
2249.61 1094.18 2252.37 1095.41 2255.17 1096.57 cv
2256.56 1097.15 2257.96 1097.69 2259.39 1098.24 cv
2263.73 1099.89 li
2269.48 1102.09 2275.19 1104.17 2280.98 1105.74 cv
2286.75 1107.3 2292.79 1108.37 2298.89 1109.61 cv
2303.44 1110.57 li
2304.92 1110.88 2306.41 1111.18 2307.9 1111.46 cv
2310.89 1112.03 2313.91 1112.54 2316.95 1113.04 cv
2320.01 1113.55 2323.03 1114.04 2326.15 1114.6 cv
2329.29 1115.18 2332.34 1115.86 2335.35 1116.52 cv
2338.36 1117.19 2341.32 1117.82 2344.26 1118.32 cv
2345.71 1118.56 2347.23 1118.8 2348.6 1118.95 cv
2350.01 1119.09 2351.46 1119.17 2352.93 1119.22 cv
2358.83 1119.39 2365.19 1118.99 2371.86 1119.91 cv
2378.45 1120.87 2384.34 1122.78 2390.03 1123.58 cv
2391.45 1123.78 2392.84 1123.92 2394.22 1123.97 cv
2395.61 1124.03 2397.05 1124 2398.52 1123.94 cv
2401.45 1123.82 2404.51 1123.51 2407.69 1123.31 cv
2409.28 1123.21 2410.9 1123.14 2412.56 1123.13 cv
2414.21 1123.13 2415.93 1123.21 2417.51 1123.33 cv
2420.72 1123.58 2423.85 1123.96 2426.91 1124.34 cv
2429.96 1124.72 2432.95 1125.08 2435.89 1125.28 cv
2438.81 1125.49 2441.75 1125.5 2444.77 1125.43 cv
2447.79 1125.35 2450.86 1125.2 2453.99 1125.09 cv
2455.56 1125.03 2457.14 1124.99 2458.73 1124.98 cv
2461.13 1124.98 li
2461.97 1125 2462.82 1125.02 2463.65 1125.08 cv
2470.33 1125.53 2476.37 1127.08 2482.04 1127.44 cv
2484.75 1127.62 2487.78 1127.45 2490.78 1127.27 cv
2493.78 1127.06 2496.83 1126.81 2499.94 1126.55 cv
2503.02 1126.3 2506.23 1126.07 2509.37 1125.99 cv
2518.59 1125.67 li
2527.82 1125.36 li
2529.35 1125.3 2530.89 1125.27 2532.43 1125.19 cv
2537.03 1124.8 li
2555.41 1123.26 li
2561.38 1122.78 2567.38 1121.73 2573.56 1120.8 cv
2576.63 1120.35 2579.8 1119.9 2583 1119.68 cv
2586.17 1119.45 2589.3 1119.37 2592.36 1119.25 cv
2595.43 1119.14 2598.43 1118.99 2601.35 1118.62 cv
2604.24 1118.25 2607.15 1117.64 2610.07 1116.89 cv
2613 1116.13 2615.94 1115.25 2618.95 1114.41 cv
2620.45 1113.99 2621.98 1113.58 2623.53 1113.21 cv
2625.09 1112.83 2626.65 1112.53 2628.17 1112.24 cv
2634.31 1111.07 2640.42 1110.23 2646.31 1108.87 cv
2652.17 1107.48 2658.02 1105.53 2663.77 1103.42 cv
2669.54 1101.26 2675.29 1099.07 2680.78 1096.41 cv
2686.28 1093.75 2691.6 1090.64 2696.26 1086.7 cv
2698.58 1084.72 2700.72 1082.51 2702.4 1079.96 cv
2704.05 1077.41 2705.2 1074.46 2705.33 1071.36 cv
cp
f
2315.61 965.158 mo
2326.55 961.246 2339.04 961.974 2348.41 954.376 cv
2360.39 944.658 2363.82 923.888 2377.11 916.795 cv
2388.35 910.795 2401.31 917.297 2412.77 922.712 cv
2444.28 937.597 2478.62 944.471 2512.63 942.705 cv
2520.98 942.271 2529.75 941.414 2537.3 945.522 cv
2545.74 950.109 2550.94 959.935 2557.99 966.978 cv
2565.04 974.021 2576.98 977.61 2582.98 969.38 cv
2587.95 962.573 2588.94 948.756 2596.57 950.032 cv
2600.6 950.706 2602.74 956.071 2602.84 960.767 cv
2602.94 965.464 2601.74 970.175 2602.36 974.816 cv
2604.54 990.99 2626.22 996.135 2627.91 1012.38 cv
2628.66 1019.59 2624.82 1026.62 2619.7 1030.85 cv
2614.59 1035.08 2608.36 1037.05 2602.27 1038.86 cv
2529.61 1060.46 2454.23 1071.66 2379.37 1065.86 cv
2357.85 1064.19 2334.66 1060.19 2319.39 1042.62 cv
2303.26 1024.06 2282.11 977.14 2315.61 965.158 cv
cp
.364706 .498039 .752941 rgb
f
2540.85 992.886 mo
2518.18 945.946 2507.63 891.117 2503.84 839.341 cv
2502.34 818.788 2500.62 798.258 2499.61 777.663 cv
2497.57 736.524 2496.95 694.691 2496.16 653.916 cv
2495.43 615.868 2495.04 577.811 2494.46 539.759 cv
2491.98 374.311 2492.6 215.374 2538.86 57.5249 cv
2544.4 38.6322 2550.48 19.5054 2554.18 0 cv
2380.04 0 li
2380.32 15.9776 2383.26 32.0524 2386.15 47.7432 cv
2391.99 79.4637 2397.65 111.243 2402.78 143.157 cv
2408.73 180.15 2409.69 216.909 2414.11 254.515 cv
2419.09 296.835 2424.52 339.142 2426.51 381.89 cv
2429.74 451.444 2434.95 522.263 2434.83 591.957 cv
2434.69 677.296 2423.97 763.143 2418.61 848.119 cv
2416.91 875.205 2411.62 902.369 2404.11 928.337 cv
2395.19 959.159 2383.03 988.737 2366.46 1014.29 cv
2362.89 1019.81 2359.07 1025.3 2356.99 1032.89 cv
2354.91 1040.49 2355.17 1050.94 2358.93 1056.04 cv
2362.99 1061.54 2368.71 1058.56 2373.61 1056.16 cv
2378.52 1053.77 2384.89 1053.19 2387.53 1060.99 cv
2388.96 1065.22 2388.72 1070.52 2389.14 1075.41 cv
2390.85 1095.43 2406.4 1106.36 2415.23 1093.74 cv
2419.91 1087.05 2424.65 1074.82 2430.04 1079.5 cv
2433.24 1082.27 2434.06 1089.54 2435.71 1095.16 cv
2439.41 1107.72 2449.29 1112.85 2456.15 1105.78 cv
2459.75 1102.07 2462.3 1095.86 2465.38 1090.87 cv
2475.82 1073.95 2486.39 1078.96 2498.86 1080.75 cv
2504.02 1081.49 2509.39 1079.83 2514.78 1078.17 cv
2522.48 1075.79 2530.2 1073.42 2537.33 1078.08 cv
2542.84 1081.68 2547.41 1089.97 2553.24 1091 cv
2561.45 1092.43 2568.44 1077.6 2568.74 1062.82 cv
2569.04 1048.04 2564.34 1034.33 2558.67 1023.59 cv
2553.01 1012.85 2546.24 1004.06 2540.85 992.886 cv
.541176 .772549 .92549 rgb
f
2454.4 610.907 mo
2452.8 613.022 2450.69 614.76 2448.46 614.46 cv
2443.52 613.793 2442.28 604.888 2442.37 598.159 cv
2443.02 555.999 2443.28 513.577 2445.39 471.581 cv
2446.37 452.187 2446.05 431.953 2445.92 412.483 cv
2445.8 392.932 2444.47 373.095 2439.01 354.808 cv
2437.98 351.366 2436.8 347.924 2436.54 344.227 cv
2436.29 340.531 2437.17 336.423 2439.47 334.407 cv
2442.28 331.955 2446.24 333.532 2448.5 336.851 cv
2450.77 340.171 2451.68 344.759 2452.27 349.207 cv
2455.88 376.743 2449.67 405.699 2454.88 432.763 cv
2455.92 438.165 2457.41 443.431 2458 448.958 cv
2459.04 458.741 2457.2 468.604 2456.47 478.439 cv
2454.7 502.525 2459.57 526.186 2461.61 549.936 cv
2462.56 560.933 2462.53 571.118 2461.34 581.91 cv
2460.19 592.29 2460.41 602.968 2454.4 610.907 cv
cp
.780392 .898039 .972549 rgb
f
2466.77 464.383 mo
2465.88 478.309 2466.4 492.844 2466.44 495.222 cv
2466.82 518.723 2467.64 542.216 2468.91 565.68 cv
2469.5 576.497 2469.98 587.37 2471.11 598.139 cv
2472.26 609.211 2474.67 620.088 2474.67 631.284 cv
2474.56 646.65 2469.67 662.666 2474.75 676.946 cv
2475.41 678.813 2476.37 680.749 2478.03 681.523 cv
2481.48 683.136 2484.77 678.766 2485.99 674.809 cv
2490.66 659.674 2485.84 643.222 2484.5 627.283 cv
2482.89 608.115 2486.41 588.854 2486.02 569.606 cv
2485.69 553.6 2482.66 537.711 2483.2 521.712 cv
2483.65 508.235 2486.63 494.699 2484.63 481.4 cv
2483.1 471.196 2478.66 461.275 2479.85 451.013 cv
2480.13 448.575 2480.73 446.159 2480.62 443.704 cv
2480.51 441.249 2479.48 438.632 2477.45 437.665 cv
2470.46 434.343 2467.75 448.991 2466.77 464.383 cv
cp
f
2398.03 0 mo
2398.12 31.4555 2408.86 62.6506 2416.78 93.1901 cv
2432.02 151.945 2434.52 212.057 2433.19 273.38 cv
2432.92 285.787 2432.47 298.676 2436.39 310.086 cv
2437.36 312.901 2438.77 315.797 2441.1 316.796 cv
2452.61 321.752 2447.88 299.003 2454.18 296.048 cv
2456.52 294.947 2459.26 296.621 2460.7 299.183 cv
2462.14 301.745 2462.55 304.973 2462.76 308.089 cv
2463.89 325.085 2460.13 342.135 2461.15 359.142 cv
2461.89 371.561 2465.18 383.704 2464.91 396.154 cv
2464.78 401.732 2464.61 408.845 2468.7 411.12 cv
2471.26 412.544 2474.41 410.971 2476.16 408.246 cv
2477.91 405.519 2478.53 401.922 2478.76 398.441 cv
2479.37 389.394 2477.8 380.363 2477.34 371.302 cv
2476.87 361.959 2478.04 353.282 2479.33 344.146 cv
2480.6 335.121 2479.96 326.087 2480.34 316.989 cv
2480.85 304.597 2481.23 292.197 2481.58 279.797 cv
2482.27 255.493 2482.82 231.177 2484.07 206.905 cv
2486.55 158.555 2491.84 109.84 2506.34 64.5766 cv
2513.41 42.5069 2522.56 21.57 2530.55 0 cv
2398.03 0 li
f
2449.44 630.039 mo
2440.43 629.59 2443.94 715.263 2444 725.012 cv
2444.24 764.16 2443.62 803.392 2440.56 842.345 cv
2439.01 862.095 2435.67 882.025 2432.15 901.328 cv
2428.68 920.321 2423.34 939.376 2424.3 956.026 cv
2424.94 967.035 2431.4 973.09 2438.98 965.388 cv
2445.94 958.321 2448 946.226 2454.97 939.118 cv
2455.86 938.211 2456.93 937.366 2458.07 937.538 cv
2461.26 938.023 2461.36 944.525 2461.5 947.482 cv
2462.49 967.989 2458.13 994.141 2472.18 1009.43 cv
2474.8 1012.29 2478.44 1013.81 2481.59 1012.25 cv
2485.9 1010.11 2487.89 1003 2487.49 996.76 cv
2487.09 990.524 2484.92 984.805 2483.29 978.955 cv
2482.01 974.357 2479.36 964.01 2482.32 959.747 cv
2486.39 953.874 2492.72 960.7 2494.6 947.524 cv
2495.45 941.566 2494.39 935.448 2493.4 929.531 cv
2478.57 841.038 2475.01 752.209 2468.53 705.497 cv
2462.04 658.785 2458.44 630.488 2449.44 630.039 cv
cp
f
2461.36 172.608 mo
2457.9 172.608 2453.9 165.78 2452.78 150.473 cv
2447.1 73.4115 2428.44 23.0414 2425.29 0 cv
2497.59 0 li
2495.29 21.4533 2480.43 56.8686 2476.37 70.7478 cv
2465.59 107.62 2467.91 144.409 2466.82 161.253 cv
2466.35 168.574 2464.02 172.609 2461.36 172.608 cv
level3{
gsave
clp
[-15.2211 -189.816 189.816 -15.2211 2474.75 165.999 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-15.2211 -189.816 189.816 -15.2211 2474.75 165.999 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
2274.57 1044.38 mo
2281.4 1061.07 2295.39 1074.68 2312.26 1081.06 cv
2324.97 1085.87 2338.78 1086.63 2352.14 1089.11 cv
2379.45 1094.18 2406.04 1106.58 2433.69 1103.99 cv
2442.29 1103.18 2450.68 1100.93 2459.22 1099.65 cv
2496.22 1094.08 2534.28 1106.82 2571.15 1100.44 cv
2585.7 1097.91 2599.55 1092.49 2613.3 1087.09 cv
2623.14 1083.22 2633.17 1079.25 2641.32 1072.51 cv
2649.47 1065.77 2655.57 1055.66 2654.81 1045.11 cv
2654.2 1036.73 2649.48 1029.26 2647.13 1021.19 cv
2643.34 1008.21 2645.87 994.115 2650.82 981.53 cv
2652.9 976.255 2655.44 970.662 2654.14 965.143 cv
2652.85 959.625 2645.34 955.527 2641.37 959.567 cv
2637.66 963.34 2640.39 969.553 2640.56 974.842 cv
2640.9 985.441 2630.4 992.846 2625.82 1002.42 cv
2623.61 1007.06 2622.73 1012.42 2619.53 1016.45 cv
2615.17 1021.95 2607.54 1023.66 2600.53 1023.67 cv
2593.51 1023.69 2586.46 1022.38 2579.52 1023.4 cv
2564.17 1025.65 2552.74 1038.51 2538.59 1044.89 cv
2528.73 1049.33 2517.44 1050.52 2506.86 1048.23 cv
2490.7 1044.73 2475.42 1033.36 2459.25 1036.78 cv
2453.68 1037.95 2448.6 1040.84 2443.05 1042.12 cv
2437.51 1043.41 2430.8 1042.59 2427.55 1037.92 cv
2424.15 1033.01 2426.04 1026.2 2428.98 1021 cv
2431.92 1015.79 2435.88 1010.83 2436.48 1004.88 cv
2437.08 998.934 2432.01 991.987 2426.26 993.622 cv
2418.31 995.882 2417.32 1011.17 2409.21 1009.62 cv
2405.27 1008.87 2402.49 1003.82 2398.57 1004.71 cv
2395.24 1005.46 2394.47 1009.71 2393.22 1012.89 cv
2389.12 1023.31 2374.86 1025.59 2364.22 1022.1 cv
2353.59 1018.6 2344.56 1011.21 2333.91 1007.78 cv
2325.93 1005.2 2317.34 1004.96 2309.35 1002.41 cv
2301.36 999.857 2293.48 993.971 2292.45 985.647 cv
2291.68 979.369 2294.92 972.653 2292.35 966.87 cv
2290.17 961.938 2284.63 959.644 2280.02 956.848 cv
2275.41 954.053 2270.92 948.892 2272.79 943.833 cv
2266.83 940.784 2260.51 949.168 2262.08 955.67 cv
2263.65 962.173 2269.29 966.716 2273.52 971.9 cv
2282.88 983.382 2274.59 991.533 2271.68 1003.27 cv
2268.32 1016.82 2269.27 1031.45 2274.57 1044.38 cv
cp
.364706 .619608 .835294 rgb
f
2641.37 963.055 mo
2645.34 959.015 2652.85 963.113 2654.14 968.632 cv
2654.26 969.117 2654.31 969.603 2654.37 970.09 cv
2654.55 968.441 2654.53 966.789 2654.14 965.143 cv
2652.85 959.625 2645.34 955.527 2641.37 959.567 cv
2639.44 961.527 2639.25 964.148 2639.54 966.955 cv
2639.75 965.501 2640.27 964.17 2641.37 963.055 cv
cp
.780392 .898039 .972549 rgb
f
2427.55 1037.92 mo
2426.59 1036.53 2426.07 1035 2425.85 1033.39 cv
2425.51 1036.24 2425.91 1039.04 2427.55 1041.41 cv
2430.8 1046.08 2437.51 1046.89 2443.05 1045.61 cv
2448.6 1044.33 2453.68 1041.44 2459.25 1040.27 cv
2475.42 1036.85 2490.7 1048.22 2506.86 1051.72 cv
2517.44 1054.01 2528.73 1052.82 2538.59 1048.38 cv
2552.74 1042 2564.17 1029.14 2579.52 1026.89 cv
2586.46 1025.87 2593.51 1027.18 2600.53 1027.16 cv
2607.54 1027.15 2615.17 1025.44 2619.53 1019.94 cv
2622.73 1015.91 2623.61 1010.55 2625.82 1005.9 cv
2630.4 996.334 2640.9 988.93 2640.56 978.33 cv
2640.54 977.897 2640.51 977.457 2640.47 977.014 cv
2639.45 986.483 2630.08 993.514 2625.82 1002.42 cv
2623.61 1007.06 2622.73 1012.42 2619.53 1016.45 cv
2615.17 1021.95 2607.54 1023.66 2600.53 1023.67 cv
2593.51 1023.69 2586.46 1022.38 2579.52 1023.4 cv
2564.17 1025.65 2552.74 1038.51 2538.59 1044.89 cv
2528.73 1049.33 2517.44 1050.52 2506.86 1048.23 cv
2490.7 1044.73 2475.42 1033.36 2459.25 1036.78 cv
2453.68 1037.95 2448.6 1040.84 2443.05 1042.12 cv
2437.51 1043.41 2430.8 1042.59 2427.55 1037.92 cv
cp
f
2645.34 1009.51 mo
2645.16 1014.63 2645.69 1019.74 2647.13 1024.68 cv
2649.48 1032.74 2654.19 1040.19 2654.8 1048.56 cv
2654.88 1047.42 2654.89 1046.27 2654.81 1045.11 cv
2654.2 1036.73 2649.48 1029.26 2647.13 1021.19 cv
2646.01 1017.37 2645.46 1013.45 2645.34 1009.51 cv
cp
f
2292.41 985.141 mo
2292.31 986.483 2292.29 987.819 2292.45 989.136 cv
2293.48 997.459 2301.36 1003.35 2309.35 1005.9 cv
2317.34 1008.45 2325.93 1008.69 2333.91 1011.26 cv
2344.56 1014.7 2353.59 1022.09 2364.22 1025.58 cv
2374.86 1029.08 2389.12 1026.8 2393.22 1016.38 cv
2394.47 1013.2 2395.24 1008.95 2398.57 1008.19 cv
2402.49 1007.31 2405.27 1012.36 2409.21 1013.11 cv
2417.32 1014.66 2418.31 999.37 2426.26 997.11 cv
2431.13 995.726 2435.49 1000.49 2436.36 1005.59 cv
2436.39 1005.35 2436.45 1005.12 2436.48 1004.88 cv
2437.08 998.934 2432.01 991.987 2426.26 993.622 cv
2418.31 995.882 2417.32 1011.17 2409.21 1009.62 cv
2405.27 1008.87 2402.49 1003.82 2398.57 1004.71 cv
2395.24 1005.46 2394.47 1009.71 2393.22 1012.89 cv
2389.12 1023.31 2374.86 1025.59 2364.22 1022.1 cv
2353.59 1018.6 2344.56 1011.21 2333.91 1007.78 cv
2325.93 1005.2 2317.34 1004.96 2309.35 1002.41 cv
2301.36 999.857 2293.48 993.971 2292.45 985.647 cv
2292.43 985.479 2292.42 985.31 2292.41 985.141 cv
cp
f
2280.02 960.337 mo
2284.63 963.133 2290.17 965.427 2292.35 970.358 cv
2292.88 971.555 2293.16 972.794 2293.28 974.059 cv
2293.47 971.574 2293.36 969.149 2292.35 966.87 cv
2290.17 961.938 2284.63 959.644 2280.02 956.848 cv
2276.69 954.831 2273.44 951.578 2272.58 948.023 cv
2271.35 952.852 2275.62 957.671 2280.02 960.337 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 24.0.1%%For: ( ) ()%%Title: (2205.q713.002.F.m012.c5.pouring water splashes flat set.eps)%%CreationDate: 31.05.2022 16:58%%Canvassize: 16383%AI9_DataStream%Gb",Kq-Fu]p\&q9h?.FJ)C'E*YGKn`1bj!.)RII,Zq<_//=B*/pg*cDSo^nDN=)(l-A'/)R2ITWX/kOPcT,!!:+k)NeP`r(ZrHpL%+Z60GQ'tX&EDeji_pk3WS?^2XBBANjH*O-.;,3e34#34#3?]FM11$b55F9c[ETuG0Xk5gsX0&KnXVa!d\QYi\BJ-*$h[@uaHJs\Z%;FnK\/!\gqWMN4\GVV1F?1mqnb*@4Jei57g;F/;gS%I"-^1u(PoJh:hF1Au28hE,EX$r5IJMH-NVb>jLUIP5V^Yb'4b0<t^cmmYI%+(qNbFu>A$GN*p7g1dL>PbQJ\r@sRu%h%bs94!uHlU=%HAl:J&Chg;:L*f,!cta>F*;blU<7GVQ5',BAY&6K(KV*D09mQZ*XfX]l%U#k`oPOa+tX1%uW(#r)"P1[J(pp=?VZsoo)d_;2jN>k_2a)NjXdH].Lq^bTsT8WV$US?,5*j-1'E]mo^%u_lacfcC!/'!,kUn5PZ%;VVhhAfIkCndhIelSq2MO$YLrgsBRoXaKB<h6+\U=4M>Lp+nst&c/T\8o]P3hAKt&;IFNhXe,PC*HhgMUUWa/>H>+s*LaQLs0U0;%>q:;`_1YEeYZ[$f]<senm@5,K3og#]#YM-OUQ$UhAsB1KTZML@8qir>4n5r\6o^sII07L,BZY$VU>H_@l"6]<<3@hVNl1bW#ld)*%PY5ZU)sUBJs5DL=U98u?nuk`VG+dBCX*,@Qn)r96`5'Krn'HEJX/0(g'Ei-uDbJ%K<>(9`m7@6-q3h7LO14G\#6'%#UIMr?<K&rH%_1.=8[jl7ke'gdg?!j]Tf#FSnV:n5*g5Clk>(_W88o5VsTjMD0dk$reh+")/"46M-5++aJ5'-+1[(&SqP!@BYr+km'hG9?bP4CSZ%>[!Jphr781hDMD,lTO**V,/a#;V^+HDQWhrr_fEV3?&MMj49\`7O69Xdrt3tguZE:f6$6Q;stOiHp9cm<Q`S8cH+fn>D5PI>cbk*%hj^aXO,_d@K'+&OV+/(BSD(*q.VHYjqbq,tCbrPps'WKLM]\m8<p>D"bMHbk>^R26*dM?_hpm#7ZM2]fLZKPe6D[RDC)#sRjl0jT%\`E4MpN?N'f?'7\/sT"">p5Hap=]8Bcmg*?Pn0=3]oD`h&m%`NcKOibfg;?>V!Yb`0[aC?8iAT8dk8,hZTY=Zf&=!4G)ct'R"[]f%\^MGCh^9r$Xlnm0``-]Pg1:GZ2@?99)3BR%oW)`7E(V&Ja>TlHRBapRa`Qds;JGLrfRpH*(&BJ*55EJO`uk+)g\I5^-fRqCT7B,>%I)_I7rj_mRr)*1Ji0.H?cSBq>r5m>V`g2*J2PO!gT7B-)=OtfEoPs,jl(dJ&QkcsOT0.OB1`^nf(_b:E1kG2]iu-I1HXN(XU)!MU%8,4Q';pLEN$_f&F:D!?onKKp?oML_aY(Xu,50VECZD!sE@2P*(m=fGV6PVYU'<D>[5sEB;MR.j?U*'krZ+pb&5R/cXr+/)gRukV!%Ic1+;kIWp'j5,[&m,bo#m7c)h][.$Kht&t^;kE$P\BAdHc-_!&GNX]u0]r57kIRg>*PJ26Fe1K'CH"<(JbHLL?*1K/*OVX4.S$*W%g(gA,'rjNEb,(/"MVQ,bBA(Be94JHK)1<^1_"$YVYJp)Cs"jA)(r=WFTuk:"dY1K*6SDq`ekNO[FA$:[WQ4X8l(VOF=\<?U<"qBb%;3GTQ##]UV;ohN5V;;e_1gl2mShAL`N1srA"][-[a3Fr`A5*=[V!S^Pn2o,'I92fQ3Vn9KL8Z)8kj4=P8.B$8,dk?Oltf"+qKS=_%W^H:rBKem2O1L.M4(M]1_CqH)]\cG09Di?K%gHute"(02)'E;k!"0&G=>i\eiB2Z)&tb:H+nXG8k^7dWGhnT+lQZ:QiX>Pq"umiW%fF_R(s%JNBrl,h^/?jMQ"[X`hQSUoOfSO8h_G0#Q`ba"[&JA,86sWn<IgIWM@k@;1=CL;=<q*;'"^qW8!\:MMO0S>0)7is:Fg49B%%QIr&h5(@*R1Ya5@Us[cdA&5fja97a,J0$`JjoKc(@L;?]V7]YF89($CdjZ2(t,j<3DD/Y.9Rjo%`p-/1prTb*h6eT7m1;cLPVQI%@Y[?\QfbVJPVbcBT=2QZ>31Q0+jn<+[B'p"QA>qm&\t6.Xmi3ONZFnnL>ZL8Tj4kE!H0[#(Rlp)'q<?MarAKd`F=OlA<BL&C$[3]%lB\8f)sDsG*B`(Dfgkkr0f:<XF+2k.A%ur\^'8+;TET"4R7Ab:B[m]s5>+)#UE*K\<bQo=p;s00nnHuJg-7t%\3q:)Vi=uUbttdl%/oA$mll53qC+W(Xa:W2@lP8,27FZ=6nU7-38/*j*&kaJgH(s:*m4Lj$6rf:])itn*U_L*[<&p]LZFAgTA%j.4F,:c^@Yp17d1CdY%&XVQM86:U@MM0P,nb#J46P='"K"XPrSgRrR+]9d&J!]MQ:HBX-UG65m/?+LH.?3G.-#uP9BOX\s(c3?nNJL`DUj-pUJsN/HdRoD8%dj8;]PNE3DLDeNP9>oh8@e>qe1IeB?P;`&(3sMK8,Ed^2a[;*4m;dB(*$[n4P"Uh!:VKe!9$NG1?6Tn2:SP4ZF%F/jc6_H?8]8JN%1e,oZ-)o(MoI]6,nd`d9-Ah@c1'9:V&]naQj>BGJ]:<4O9;"hB\0TK$E^8>4,5%EOO"[u4?X@&F=`MG^Lf>n3gFKX>/$rp:dPS3D%)LI2;5%90W,E*IJ`!GNC_+RMj0/Y/<4:e@UPYXM)%fX$q2S"=V?^I3k:53Eu6se$X"Q[,pY0@*#0e*=)C-otgoRl1c#C+o44Oi&"%I`l+UX/11kp.h@JlX<lVaIdYLT!";.Xgg)Dht]"70K/rCI;P`[MXb2j>Qj%lBRIS_%u[FO^J?@[qU8]CeS:<Zg9%kFPI`t:T5?Cl%(O?dVbEYsMY2\n228;a<IckYE:[:+3L&5B/g"$%;V1)\%=#6iO*?)A4FM?qI6DZ8>bG?`#!),WgH9_8]s3kb&-@=&:Hgdq`^O_g)%(jGF@eFd(f+Ys\->C%se>j">c30NI]K__ZRC*!%TM=!3WXE>9&\n;!:T^Mf!>Wt2doj0o3msZ@B*>Haf9&/mG!=+<j][DVN[c;,-%%ioY`q]@2cm^]!*qfK0s.X[0O:_2B1s7fJqmD_H<eMQ8t]@$q6-N3r=.]TnI<k25C8qW\:UrhGSQLBG[k;qK+A_ImYn@7Y]jI'>t%8Oi^"doG!n\#7'$GC-ITCoZ+RocGNt:9E>#`_Rm.f%W'_p>MH?#?ApieZ8>r\`rE!R/`EjHT(b)4`1s;[79U2SFsNL=l9]uPB2aI%7H*-k!'?u>h`[Tm%o\Ag*\_l7J8#]ON<5tS^i\62L,36&N<'Jk][U.UO5d!5]_"Fkl*+#-Y,H0db0<f%1l@Yi&^r.;)F[?_,Gq=4%>?oiA/sL+#%<J7X:(M:(UqGXs0)F<%5n,LDg&KeH?AO#Alst@Co0K4$PqjC)0>)L2e81E@n[C7qSF";rmd>L5VYY##h/&AbeYT='%1l.0-DebO5YUQE<0IhL-_nZV#*uj*m0e(q325qT;2WN@GN;gS*UDjj'9jZ9[$#]5&JnDW7==D0N`BpD^W;h86OYHg`luBa_Z[ESc%%$>P4^pV(b^*;HfnCR3\Z"LPZrn\HH8[fYSepFTNkgusO)U!W^CXorK#DIVUim4g/mq(TqeRklO/'Bu#@[OfU$IS(0T%ih2pHJMb%M#^KI2>[C`n`Th!-Jr`hHp_5U<ioVDXn<D5s#Ya8]OM+abpq]rnjrU7Jcff-IgmY?=:kD]3$\H71k/>T]!k9r\LNd0g3iPgo@4ts%Vgam=eNJ%tA"%)pdu"$-KRm.#Q#_fOC`7b>>%j.)a/<pX%u0pn>'8c?T9DIKlJs:ZWfO-kI8&H;G$?jeOl\5]T)EHb)^=*agc11r%G=1GGoW<jdeaEHa',]8`r'NrtY3tIf[E;AlNdp[j7L-DiUn<6h!C`GpG8\-+"dLilmj3o"AHpW2kl^`"<1S1_C4(>'IGb4P;Ag:+%hi]*<e,.WVDIdJU@9A\A2s5M<)YITFi8*.l&!#i17m6^A.\n4g6au!\cU\M)eBi+JLg`J-0[)tW6``Y%Zco@1nm>&hoq=*qlo]:V%MU.tV:OLNY3!63Uqlp8+X-3<u,6lu-)kGt0S`9XX`8dl!lUWV`Zs"C+&s;$Ee*QZ3`_E#;ke2S![gLgFfrWtKTj!F+4)oth=0@VF%ek]*>nRZS3:8IgYZ@78^`iMSBgoOQa`>DrA\6c*EPGoDY)qb!AEs$2-HLLaHl`.9E>tt:iUH8-ZcaE=>ICQaX^H]H`dfL!/4$u4H%5-94=lu`[S857VR2],doeVBG2=A@=mhZmIdol7q>?bWRL:o($K0jD%L'Nj`l^kKL;eIKcf8mg+GPoEgmV-Juf]k_O8J1BQZ^O*0E%XQL#m=Ol9X-kqU,e+PX:bc\?qpDlL6ES.4\p;'kdld(4K=#j&^\Zn=NFHK=JhNR:hqh+[B*trA#rV7@gb$Tkk]iRK8YZ5B/B.Bb<%+(%Sak"rLqA=#o"Hl%,OEo$!Uk>-!g2X=X!9&@1rF76Z@oA+?+SM*scVu:;\J#Nd)8?[q$%W`LU1b+-fJZ8C[18?U\J$0:?p3dHO%+8>R>9d)oEL^PC&Ylt61PX^?<=$ea=6AYYh+[g=+$R'Du=rQ<cLu/.(J/:QE_=dtL'h3lgUI'c$.PjFs#gn^$)d$$Y)[dh=W"<DT%I+mO1KI@=M+[eOuG$m2XW"@sO./R%nBuTSkEV-"/qA,kGU=q;-i71U<g1]Ans1\NY3s^RKg]+qngsF5_`JnSW^5?A!GCk^i@rZD.%?,!f43fQ=2^0>lN`^iC$YFpK0Jf6):5u:Ck)0)IFr_j/=\NpZL#ATY!;[a;q%eV[LT18,1'(n)%T18*[&Cf1MHQ&l]F6]_dc*@:1%lP5.E99$Z.I3^!78kA`LP`Xb&*_FG&=@0I=J&dhV9&][H&0HJ8eR+m,4"7pgTpX&D]:W93Y-,[<a;XS_mE4J.6ZV'OZ]5tHHEL[u%hnonn^)Pmq0Y0!tpTROf/SZZ0I/:%1U44!DBDVWPr?4&r'u.6C6ATZi'H`XA=+B1A2s8`O67^rS%d<3SkDpPTE!6.rpKJ&`hf@)q%\#U"=COI_IIB5(7%",>R.$>Z9YoZl$psn`V^`LcQ-=>E=ftIVsAq),Ar3**")j9UGnoa5I3gAo$Js37@%UGQb5(>a'lok$B:ql@s%X$N*4!EZ?#H:pW!<<%qnY5U8bcmZA`:ZGItQ>S)X!IBsjU^u$;\I$RHA*R,q@<GB%*Hmo14L"^dl%7<^X1fo7b#nY'N9(UX1,m?X%N\ZnfOg,n^:d<*)r]@CM-t@O2*B0=iA;-#5V03XO;r49#je%517p3u3Q>uuR)2%3LO0XuP"1F2pP_174]rreu[Mt!4.!PO#_Y.7'%5L*N1o&4#hO"7RB<`'<Mf!sUB5bH8BY4KI"d_KYRhGgaQc./g.@9!,+b>/ZHnO7ke/!\gq4]bZ5+!%iSmrLqQh:[-`(]09OU_0+R%Js0;pN4q&$21h$@U[DGNC;b+7OZ]4[Z!8lGO(sU1b-ajs>&;-R`EK$5]eU*V_O3kQe*jS$IJ=$lYj"s@AC2?(N[s`pIgA>Af0=12%UY\Wmr$\2G>??6F<Auuc*H)AJaHtT;?\?k`<.RGD@ZNAs\O4<dlB\+q_[TX'lZ&&Wl,KhR$n%D+&&c<e-ngmBbCA+mg?JpSq"]ac%aNXClY5TT4T:Zs/(F/9UKO'P@M\1.&HUD0`'nT^n+G1hr&U#nG/k4L4#eR$?',qHJ!dY!_N1cLfkHJH+N$6,GIO3\i=NKKf*$;jo%aNNd<rlkiF&0K$_j1suR*m)/C2o,/n1H;lO[8LmZ(!9UPKL;P0Dqe.e4uC`]*l[SXlMl^9pk-'CK5/Sapj/@B2<_iEZ!RlX#2YT(%Y*Bka>;j&nB'=*bn0E\af)qcuAbqk2%DD[?>Ud"#>U\/%)LV_-Q#!sMT?Qf'RF/k/JT7$&hpsVF)#WQqdJJjN9"i!/O8B?_3"2lB%pTa6i.IZ\as8+.%bi)tdDLp1SEN)0nqWh>LL;\>#fCn+k^&J*RDj:u".!56n&hHC8Jl*LE^i@^4hlAc8r5kP:n&)E@$,>V'h[-;F%V`/&`.[Tu\f!=*9PI^O/hJU2S;f3]SIiS2_IFdXA637?GoGMm!T_B8UO-"lV7u_28"PeqipTa65,[c9.$lC"'<>[bFF;Q/%s2"n.%8AP7U"LJO7e?o]9%PZ%\?G8'fVY?Vh#DHd&dYPZHj(bh0cgO3p59JSP/k`:S:H+36_RFthj*(1qj(g(R1%\NESY\H$\*jD@<EErt%X`CIe'n4^S>bg%k\^HNuSEp*nf6#XnO=XEjC?7VhE6(tk(6jb@9KKf[Sa*=\+"OPN!!Pk/^Ke()dD[bgd%*15e5#mK/ai;P(GOV\%fA)s5?Ue+joKf":]*bC,OQ8WI'?\(AR-_7##OMk8mkDRirIdgr)KOVr],pspf-?7$_ok"`]=NKh9_PYNFu9DQ7NVdIUIq7F^Gt<`%IjIr6.i?bsU4.:c2V/O$)<]R:ke/JYL'Bq^Om*`l\X+u4B!L,lY6a1G6ZP[/dk?Qu-tXC:9V\!>k$k4Erl$9t)T>CFQt[6j%8G'r%qpb5!KhT/r1^]X?+k&-3^PmcA;:%-,RRTTl+9tWECUMSfUX06a$uEj=Va`Di@)bn>nAe4N1"W'f:&XGYD2t(]45DrrHL7#GHbf#.%ESii]*M'_?K4a_d'?3B^g7u7^7s>4;1S,]E(bcL.W4t!M**E0ght.01-m)J<HBg/X>WAYrMC4<2Br]\k`H(;A69h]"Zh;#[#OH*8%h3a#"?suDJ+\fZW0DAh8PC^,bs6+KdJ]0;BL]JK(Z@<:H*>D5u]3(l^DB'FLnP6@9Q_c[nqiA'_hr!!DW(M9D,E.)dQDmYl3nJXb%H"l40Ci??+V<2MmrYF`^K#!9Tr:*5SFkk:DeVa;TlFH5NRBC[<lp"0o0@,'&Dh&.3cZdRE^!5j+]B+N^%]jW(n>kYhR>3ZT%a(pM%DYZM.!XJ0`[Y0U_J(JJd\0$Lfk9gJ\%8/&$^E<1@'1:rfN#\.G_f?,*Q5qKD6g1fQg35srW276TFfW!o@2T*[2_Wt"D:Zg/Bu@*u%8"Tg(TMDZTdQM_qA(kV[bLu`Hf*>BN-Joe,r7\O).(>44j*iUas(>MXn2+&c>]k'#9\%25YI_iUHg:%?QMjm$=W^Qa<*Rq_"s$f%%p1j]SaHVZXg$eZ7#M#(31%kR".2s<BFn@7jK0b9B_(H56mf.VI(a@Dc_Fknfe+Y'BMD+GcH2#8hq0Smk<^sR#gq9!_XJe@[8"8+0%!tCBgX-@*YQi5EJl+'XiW=L#2o_[YV4Y>#W]l1+l$GknX9C(1]BFlKi<`o1PFi%d5EPN\'aB\0VARJ<js%Dk$T;KC8+2QhS*Pig;%;=<=/**?A=#Q-Eo\JS`"=Ng-7\.*R[W-.\Ur_"4gYYs>kMHfR%frC*ON#fI9,<P[Y'(Y0=DQK'Ars%=94F'VklCDs/'b2_`?Ct?H%\^#\pY5J"JJHr<aX2XHLdL)BrjePAY1pFXbFI7;ENRZAVZdR8rPpgTBJWlnANC($ufZ.ReK>Z0QjDk[1j7KBb.L$eQON%,j52Z]0%ps5W=>X=XW<;t>Y`@hSLW%RO_e`H`K0E7ke*1>$R.VF7A>3^M,#b$.Jlu1CR>;QK?EA8ic9CYligAQf3NB7%Oa^;J+D>N]JIpL%G%FLG.1Lf6s+G4R]$?DnX"i^R[h;520<s0n6j0it;Qb"#pKCsUp@XYN]PD&86dq=FMX.O1.Nfq4bVDdLj,1S^pV274;NnBbK63=c(I%O-Zf+h`>U!J&sTP41L3W.;^o_\X)Q:h'uC`<\#6/m'[DDS4r.7:t#J$6"lMQp]lT.kQg,rcOXl<b4PRJHG8'I0M;(ZL20oJr#!&u%5.4H2gKNl9,^J:N/8U<#qe9n=j"Kj>aT2?TkPOL0Xb(!\?^GGrDnKOu4260FfKLU"2d^55`[:HCPM\s^iO<]1rq#TMQ2>$m_KL<I%hau'G&Sn5?$^Gc(6;t3sCIqHlB_PE<S<5-W8Bl(n"mT,APY)a`4=rBcUkod^Fu>P%[q_o06Bf@&r$/r&RC5DX9$&h`WjUhXXkcSi%2/;NiF:EWTp$E0$,>s4bl_%9lPYulb%^EfH,8S6V\aO<07p#H8WCD8T[cgaFOF*1+Q;?8#%KbG+?sPGR3QVB(5puEWQ//V!RW>`(%PDa.J\;Ds)Oj:ORYSKQuHD,mfAXZi66n:n']B<ACk1=Z'SNTs8B"CFF8_j(VVfq+8>H-^^R:=rlV;1ob3sTZaG(r^.2clr,.l;Iq%k*b_hdn9##:t^lpm7O]P&L[D?;C.>r]=%KATel*-J(qtk+'8Ga/O&P#j-_dbKlhu_-Z6?XW>4.\<a6pTi>&e!)qN5UNJ`-fO%E7t%CsHj]g5_#'mFKVT8,phWX%o16r=aY0H"JREi5Am$r/IGQEbV/4\GUQo?DDU^ND$Z[X*34)b%laKIWUWm`hH)omuS`T;D`QB0!_F>%3p^Yo8T(A0NDhFgJ=h/m>s/RkgJXhi$<HOf.kfpn\fmZ/m-73T;Fu\L7oQ9jTte_P5:O4_j^YF!'3Cb?>4h/bX]VNP?qpX4IJ36G%[,ea%Rd][trT@HO2L'"eHU.;'FqWQkH!TuOq$Dt,fe,NT;JYg3\FQt"KrLVd]hV8Q9YJFlA#[^kEMMA=-Y0fu#;k1qJY9d%j-HeO%,>Hi<0lHSOr;HK&(G"T.M>:l!')t[8IRI\<R>$;=\fYT>o?Mb/?6[ob!aFT?hhqm,I\`R6M-@2%qhhPTjO0l1mcpF>k.a'tD]&K]%TDVBH?fmW;Hq[P0qqha?k$kOhM>Es[(BW<Y8b:_U6b5>aA[[FY$^dnDD'J4edG_c_W4VeB@a]b;`bMX01O,d7(%S$W??`gI/<ZU>%M>[D6lE?+<]1qoTF=fl1ou$Pf.61(R^@87C;+K4Wk$fmFfPZjfEjM5$hrDV.AcW)M+W@>?IbF6uQ]%E+Q'Hi>.^q]9RtlJ&YVj.'%0kaV1`F7B;F"2u>-<*a-"AW%#[TC.+:EbQYDJVJ=irg5a$GBchl/rFoGnusS`4]#'C#@#\-d]PmeZ5QSAoQ5B;/U&&SlU<Djn/5R%\NGkX0@%8YKd@>i<=:iqa9#bfAtsb'1CqD;q>$EZn,ZYe8]lt+=8U".!&@P54b_@p<@Eu*oY8\hr/^H:8.a=#\>u\%"Vg#FQuK0(%4_bdnim_#2Sj:n5]JaEscOTl[;(.^kiC[?k`MM'ZX&`#u<_Mu?W=D\PD<mP2,,M:7lqVG@2=g?Y&RnH4If*;M>2*qln^%4ulJBBo%UQp/uC,LK!j<Cs'Z.:>N/+6ip!3,dR>3jt9<B!TXXdt#$WH+8d,+F_XXaRr*Qce^E/eIVaf-USn9P%:Pi2L!q+]8Pq$+#-g4,A)>%Y/KA^!*\J8BXQY*>(qDa]p?-N/D*"u-[=0>2dUY+h<97^b<*KfhS"18_s2[qGIZdhkL"@`E77./45J7lmp236qqP5?[XHP@#H.N7%="g,&]""@KfC)tTVTW<mIBKGTDsl]^bb$?[q(K..$r<j!WLT=/MnL#`c+Y(I3&,etcXO#.groA]RO@4n!R^Z&U*dJ(0hJ<#87VRn%[XMBeP1O=eH`]7Fq^dc3\J^4io@h#qors`C"0m4>n+?L)Hrt&`>,g-D_>IWM'\DL!CBrrngs(H,F2:Vj4QICW>rLkXX-+pRfKAh[%!get*hR;1,HG67l]lZlHYu9t9$M@<#0a4oIFM*P=lLfo!G4eMUa1bM6"fgUk?L6;*>_hIa?JW>dF&f./.BuaI6=*Ps*Q]#gS=T:g%SA"ih3D*XueZ;dr`Zhfe8f`:TjW!<"kA!UA5$n1JiHC7E/o9+hSU0^h%$c4JH]PuqFSgpGgl%B%f.2kZgajOI]+WHd3[$_l%V8FQ%:cg40HDiCB)U3nTla0LWV2<JpiTJ0\)Arh:of\2?.Zq;rg4F)u"[+r-#(NWC216F?9W\=sWc0T:H>1De1,R%Z`Xh=q?dXd[R\+Z0%5JQk>F"PGc4r/3.=j@bqpuk[4<mQ6PY$Y\F=K`FR?d0\@Vc[eBa19]t<N^H!Su^I5<2pYt^%]A:]4UL(UXPD8H/Ajlpc9FR?CgQ$%^5?4,Q`/n"+h4C"Z$38(l:=Q;qj2%QF=$#XJ*+DT\U9hN8Ak2c;f!_Zp<##W!6Si\HZX%FeNieR.C/aSKgtYPWh$8Be6GemENXA`%CIu59G1hr7b20%M`_#e"2#?E`B#K#im@)%+136Q7AP/6ReXQ312\'WRlZ=)W2;8@moXU=9W(@Ba'EhZ5`Fe7__ng-#<9'_T8j'9D%KGY16#1mo*qN44G?9_IZ@C/A,[*'1%ou$O0a,Tk_>sbI!Kqa,Jc)j@#91M)$/%eQVs'<s@X%hNO?.Q((\57[Mr%!(7?0li*5ATdm%h;Q[;rM42hqOV69Y'hU2CC97Aegif4lG[PG$?p/i6ZMNjC1$A7:kto"@,Wc\9*DOj8:+d$lhq;#URJm@#5:/p=,Y\7P4Z"VFM^e>%c\f=MWn!n3nsWmu!eTEGQeO@QgjZi!>$]DWaooPNcD[e\XAe]G\fAB+G+\UR@Ob_9lM>37WQ-HZI_X1Q3pTm`*VYGX`M'q46@,&P%mLZ'&[GB[;dV.t%i9b-HY8+T-maCSaRlo=<+=Eqe'q28+NNH:R?+M2Yk7c@@"7$]%-!Lq*@2$5Z@e.kan.?dcG_h8*00XLW9`gd]%lDs!F52MR?1HX,RrUhnMfQup(1#RL:4p'Nm]W)pb$MA%rmc#X**fb_:PKZHL[9fg2<"O8YBFuK`M.3Pe.W+m=C5nHH1k#VD\;\\;%UKdPZrS9s=F<1;3]B^4mEi\#Vgs>>XFA;%)qsCuE,m`*s@66[<Rd=T0PP!(%^OUR*haqXV3Dn8;a.t7aKgqRVD3;,[7uD+D9%oc6%^Q.>hW`]<l&1=>?T,H40Q:TA=WBq8JP=#rSP"mHJ-M=C\j3iFHr7JPg^Xq2=3Z7foXdUFiK>6n$AB^f8\XG!Lq6<m8?eeH)CHKjD%BfW.n%HA/_<12/%6E3rAa1e<6]hkn6b!dc5D;nY%c$$L`k>;.o/:"G3NV8Ah:o\\`2Oe_CeZPKCCO]>?=0Nok"?)VO/iLlFleRPR%)CqVb?H3:tjnQ%9KU.5REWTHOfC_K+l#fq_K&NQo&EC(!=sSptZE'f!ZAp!pJQ:S*o&En$>.A$@If3$"<$>uKlTE'qf_&FU<]k9L%:<AUq<L#V;9D%Dt)Shfg0"tO*%a>aR;Cu7iLp^SJB.4ik]lLNg-%5j$eQ.Z3o(t:nn1Rc0?L%9VU[CA$K$1Ul7CcUua^grl\Bf3k%le[RnC3!t7Nig"/`n0FY4l^o?1hT^@J(5Gbh:bp,6*H9b<S0Ch-XV2Ijl\Dq/(W7Wmef*mZAc+n/J9kfL3.L_oucJ*p9P^4YMd(:%3+iuAE;#rj"KB.*LQ6rP8*7+r7dZkq=t=u]'<U?g`M[!(F2k01Y7dp[ocgRu]<jf;LJ,8'EBiO.eZ'pM4]b9Ef(*60EUs"b]rTHg%>d$ZCn'a^6mO;8);W\dIbDs:&SB-fABijTB^JZ0HESRH>TeB>qhR,EL[_/'8Y!O`o3ifIEJ&iSB[0eoDAC#KbqH#(N%rLs[mj4%I%,G3l>qZ!"+o]I2r2?PdW;+4gWktA/l>J8c?9tB87lV9lS-NP%-fbjltCBO*q67^nUDP%tL$fsu&@>gD2h6,4\]q%4Td!6:J]<V^o%RnBdF]VSTZqI2PR"&Q@*D/FoFqQp3gqA_Ym+<%rj*9/53UA5O$'Y-uCf\)C_Zp?cd1$r$;n$k^ClX=&2U^"]NY%-(>4,%VC3^lnW%RXOmWR_M>mI+^E@_d@,d1<!EYET[uhA@6`H_K"Z..*.*U52RddolI?e&qAf$6aSSnmUaMD0/UtEb3Nf0dcpCEgMB#[g/#J3oZ5;'%Da#t8.tu*b_kipAonbPME?h#l]QV_%hQuSs$_'pqVS'56iCC9N[XGeDolR>8j2[4&HKK94S\B;l4Ir'm5!CkBq.n0C5L06oKp7&7%Ge'j<LH>tC\sj-n*`_EZad;Xln`]5cPP?TQBBg=`pRgf#r&R20gqCnG/q5LV50'jbr9KLb/O%1XS'lTV?#]n[(AZQuo[9kj&(BPU%qa!-oqJo+kbriqJ]47%#mq/m"l0!EW1qrp1nmoY7TC-XUl/c0\\N>jZH(oaOZTX'fY;sRO?-1'FYP@c*I[s^Br93H'IONQmN5)0L%%iY?rYJnl4!rqoZmjkrdNt6^Cmt1E+o"hIb^@EE(c=Yk>a7nAcq73WomapU^b4<tD9m]&%EV\P<_Ya8ih.MrI(N&m[D]*Jj4#Y3M%5F\37+7&j)]<:aLhCgj\pXJnt+&hhoN@.$]]R1F[cFnY(Qd^"Ko>dbiAeTK`G4!<\-8C>NlHg14hT7inm/$%=#&VW'3;.W@T,[$/%C48q$]_g\%24p+s^>fTocK7=hATdld[NT_8d`\3%Oo&Q3URj*OICGd'/j5e0>+VAU0V@URdFV1#q*ueCQ`"S:mQFkP&:@eF=X`*U%o(?jFWJd%e7bo=R_mj!q028!bc(<LHg+*\7<]>Zh7<'t^Ie[_fG'SL14o+ra(sXb;X_\..STaPDO85"&0@I1f>)gns;"aWNG3Ajg%C9Dq`C5krBV]Qska@8?'Qergd/3R.gpi8.iic*HV:Z&3S(M:"f\Cu>=\U<>jDeEFiSN%leI[OK11G@YK=%fT<a!R-&:Fbd1`Lf6u%_tiGgRr&j@ea/.g#k8a]q4-<S<m0p<e&SdfbPL^B<]0#OTB,D]A>?]ZGlD[MK:?4O?[m0[UdE6HbelZn'/OAU4Y^;+9okX4I7^@.%Y<Cmu7P:6\r4I`/Na#]3h"s(&T%SA[219DZgg_C<\l'%hZ-sfbgVh6V/TQ:CYNICA:RX(0&cOTlhG-kCa/;*RUaPTn2pupBlp5qQ%,gi0/\EO[qhd(2mVPbM;hPY"PGA?Ah0,?A.fpC_ll2,h"p<n"(QG94O#BM]cq4mMuZu`hO19I!RS9?8`GLCC+<KQpP*^!4'pEr/$%6abfB7o.^lZrupjV&*I75G]0S\4S"EE9_S5Ie;k"B);&S_kZjfWgZX8/_nOIF71LMe&t[L46`$4Y><Tm-L2c%X./d=oS^8'2SE.Y%geViNSt/Gk9a.T^QNu2aH=qBV9>>N(]LqY#^Po)JeF"ufhsEWjVRLqto.!F`H<L'*rk.RS:ESq?n"`Tpl?C[3V+5=cj'&.A5+-G_%V,%oaISJEP1JcJ,Mm'mm>PIfsnapRi4[)_M=s'A?R[>"c5(<*<HoC`O)4t\>INE^a$]F&J>!F$s*;@3!4<KVBmS8fr/lY&o5It'D%0`Im<p?QtkG^F(NjjOTUI.cN7AUNm_Zd&$bd^hBO?$TQnJ(<9-*ImD%3$5GknaZRKo`"X%.D>OrEE/'d?dSkO'D7FHorVnmhU9"4%.[V(1C##,DnfAlKb`iWE:X&2/cR+nR2Oa-5gt@PJ[*Y=fn9OPCilUn\G8'e3kF3.2G+=hS[FZc:-al4OoHnar4Ihmc4#(f#ihNK6%:DC5ENJ[FDkB,^AIdpucEh^.94.^+\AWQ8<Da$@tF8(.Okg&OmVoO"O`>;nLputkXGKbj@YBM&$W2K+Fo'5Y6B5Vn\cMHmCs3C?:%k/09a1CI"II$igG\l2^uG^nmqrPe;tPL%MISU0U9Ahq'PIQ05G3V?uoD0!(5pVWf\-r_RH<d&ZW_8b!"aX-+hBCb<WbN$_;(Ct.*%GJ_Rfag^<42j9j`-XS5o?cp4GQi567PP)iQku>5nn>>WFP[7*rVG?GU?9#YY[BQLa:H^.>VoL-^Sd'NpVUjXp<2Xo;mQ[4fp[[Rb%<5C#1;b++mI]AidSXF6=c+LbPeU0N(G:oJ:F4]1DR(9j(Eq.''V&)#Xmcrq0l0d,X8!!,Q/l1*fIVKt.h`VD)cJC]i>M['K3dL:`%o\\Ip&(B!q6h=nN0YtWu__4l&H?j)lc1F&2`Tc4DcIDKA%u'"bl$7\o]!CB"e#fG_j"knGio810DK]eB>[)P3oCu6?1\:6S^,`Nb%3@W4cH(K@Go=:090iNP.95g6o>)E0(PPMDgpG,\9-gh-[o3^rLIcd3VHfj1An%G6k(%/c;`LlQ=<!j`8SWl@Q^XoLQ^Rq'b3Vk_9%UY>_6ij80-g&,LGE-C8j^,#S3rCpe10]&=irN[JUAm=<MiRm5il2?I8qg)grj8O\AgACcjc'@kuc!kbRrnEK<meu-XGPV7&_9)#R%n`oPagt^tcfsu'1/j#EUq"f=)7HLa3\*&6[k<=B?]fpY'ffl!C+2)_NZV0c=1VqR,-1g3-:2e7efUI>\firfB-W>9[l<1"T]NU^F%J*oLfTA/3dR#aiQrd:mIm*kmp6HbpLpZhRPH"'0krp/.5"(up@qnR2Y9q42(rPFH`]X9WUllG1p3sREEhl5%Ne`?#fg=W3!)`.*N%iQfZP=tM`"l;]Fcl9OHGWqpOI:JZEkB=325G?-r./Q_S&go%XXc+V>"?&EhmrH2u:Xuhj)WOdX>o@_CaT3o-5iR2fAUUg!7rN^S\%H/l(eSZtb)^6P2\*^0k-]]X3Ga1XG+m^0Y%m@C-+FRM'bfopb7hn0H>rMR3]V#P1YF2flY*BF,NqtItchS#c+6)6\/$W`SUGCnZ<%Sc.K>10k4#R^Z5S]anE\R[MS2fs@TK?G$U=*pJlme>V12RjH^Qp!)+9K4iNqd>QeC(VP1&\.P!54S`G52P4ZXitkp3Bkjhh?7m<a%0V@Ae,k'-5q[</@DdP+JXGj&KB0C^Tn2<J509gZ&k/Sebn%>UK(;8MPQ,S.MDKBeVs)Dn\o_SC>`E'g#rP4hmn/jd7I47D53\IR!%-q#.h*dg+up\Ee'j0uRSO7&9F*c;[PM\#RVm_!dHJ*sq0mQZ-IGk<\>nF=oGMgMLcp>;tcocM`-or5uQF1ILTO#@mu+)f`^[N65c%mcPZNl36ciIe2h%PAKI>IBkXlR=8$p4fN)CT0AiWh89&0G.I8=./Wl)ojRR;h88^1h$5<7QH[PGl-bL$docIRoQ4QAhC-[0:$+2M%pY9"SY<C%qZs(dsLBgWLnorrt9DNOJUR?VGRE=MS^-9j)l^udQQKP.eQ'[i3HS`jK5,>O.ja3nD=73g%dTfqF5;k#2n]@hsK?[Hg%BmO4MiDY4YqXelPAqSt2o]'J%rTVqeRDq&']Z<7ZD`(:]]fBDJo^)3Vj_4>dmYaT9fpS6]X0:@rF/rZle&M!I[bc9..%ZfS^9`1a%nbM]]r92,lk54;!L[RFo]qBW*OM39Teu#4^gU2h6H>.29D<Gg1hV.MVq_.7k._W=jW4\@!hgJMUlX,qndi5XPdIB[a=FS$Tg7R$M%3.:9>^R853=kq5NEqJMknb2q+YKJ;;\+FZK@VbZ,L\B;JlVm+\qVu#]A[G>SJ%99j-c[Q@*mOsGgXGaucLtcB9=VYObs1&Kh0AU?%B0Mo5[I\KhqdAU9k"L1^4oSl52qi]X@!?BpH?8hZFa3E@??'oCe^F=2$a8FS4F-b&Z+G7dkC7fVp=>9HXm[9*/Ur%/ZaAbP9tnmo%*PQju/t*c0h)Kehr$H[^n]REHg$-I77jmWA\$M^qKQ$H(?QHfXpg-JZdY78N]7o:Qa7"3?0@\jL0$gW4=,5%ImpERpTAGnu*Ba0P%o<=V]OIIf9qs`R;rodkg@qKIlo&J`L_SO8o06bu2eoiS&-a+(TI+h9/48`%fn%IH$]R$uu^H/L6rSj=,g!;J2CAW(TW_Pa-HJ^1f%m]7IW-p2sapU]k^ajs4\]t3n-?u^O/lX6p'[rp'-GHbA32HkH;PJs)iH=*be==obhqaY!c08iT#FLq3q-MF#mI_>@Ch,7M"/T)ZA%cb:/*2da=6+.aH9EK=AlXr_HJ9^Npm1i)>cpLSL;G\d;#n$mDdBU$1@1Q1@]Y85u]WuGj8I=;L2MQ:*-50TUIW?86+4>Bd"d`GfZ%)kJn$e-hNHb:fX5gU;u8a5<CN3dpR,kOeD1??okj4)OCdQg^pbe`+75Y]`7TZtdpZ\Z]eh#EKqU[BhkjhqHc`>d)DLT8u]qNBTSt%^V4#+N&T1&->krfI,&N(h[?&7B-n.K4X20Xpp8m_OR,r<%k04gTY.Uh>;#7<1TK@$ae6VFU\)ONKk':aq3o5J@2Ps/OtfG2a&GYp%nnihQkBm,Sr+GD)Cmqu4oLs#%3l\(S>*kb]`UTUTPk<e0^9TK=54sAiPWI1Hp;`\&QMu=((VMb3Vk5lfcFum^T/VJ/ZYpS+o::>U%:-X-"VS?$O8ZeoIIrnR7%'_sm6U/Y:&T):7+ktJNZ_O$rc"l.[Y&Z9Y1+otXNH'5ZpCN*]Cd='=,L>s:.LJ8AC8&;E5\+XB9e5bN%67rJhpVoPGX4;-B9"FiiN=4RO;7oVQ!%PL_i*=?6?6$T.W5aha6E/aX/hErNp5Zj/PII*P=JUneG27(dAHBB+i]DVqq8,M&cRN^[%3XL/,la&2\4$iBhFBP`3;%33)?,1HLej%grodbrBrlH,Ool%q2J,bK(q>rp+E>#b_k-&gsiou>9Qg"FTWV$-kpWg8hBG-leb2;3L%ir]3FEF.T\3?`TaJ-uI'4nGaO/QLfM7eZr0F'ZA!?(4%gEM'.J&Z'!md'pS<j*OCP!W<Rag@l$DWT=)C!`X^mAHEUVUj_%>brC8/%Ut<-0f+Bq\ST.A]Rf&--.PuF2U5'pLH7%ZA6&8"YBs&-FW?OK#>0,/^RR;DFo2E.q0,'"fKLY?A+qn>a(RgNZ'fEQ`j+T<)%%o<k%H7bT'9GHH2jjM'V:VbEsV0#+bNgC%R:E%-0'6sr2q^.tJ2aF^Q12_nlq,*ARU#lYHklrE4aq&2e^?.?X["?@0G^tn<V%*/.>afIs%0Co:2;'qOA;+B$!W0,*oI<ehk17mN\49/)1V!2j)QZ7/HWNYW"85!W6U_t'pMt1SaT%5XsD5[)P$[bB="YL;s.A@i=i6u_a^uGHO%>[^#g<hAh;NY<jZoJ=LJ1^:bATeX3fZuX2A?A`*jPi7sk[IM$L[$Vur]$b7k7QVc3U?C![.[_kCJYE$5aY*JE[uCal!YT5&_MC*/%'B&:J4KjT^*]"C(OZ83o.bZl&$#O1JE=K#47)WTJ<$Ih=I=p]g'+r%_V?-YZ7'm`h;NoMHMmh"h`5nZtM3?Xb>8SieJK'u8E?i->%GKAcY*E$7=ZL99^NO6YGEK$XM2%s_AgJ"9.$!`PT*J?%(q\_W6qd#r$*uJmjD=\M!Y=Tjm$#F+M4l-0?C#\-nk@QCqD6\+%S^F.%%'QKF^l2;;NOqV4N5\qK$9E?0u9E[YIGnC3o#!+"V161Y4bb[5W;,@*$[#n>X!f/7mJ7RIoqmb'PBbF0MQb^=n]$^qm9+pRC=V7cq%@O<AcOJJAA3=%kOXh]V0ZeJrJ8)('.-Y5DW)a.X5%%rEr7*!*G+>ShqXb\b8fCb:rKd@9X@Y[![eV7(\,2T-OEU@SM-JhQEM&G$A%aA0p8>iJ'Rc89]JMO;oT4XB0_22]`nDpZX?^M.=:clrd3P067Q`0qs7Tk37\M_7oGS?s;n(_Ao/?\`lea;N[FO[C*[*DOOT,4j<J%.*GS_QfHM%DC+.l'KDmp!\J.?Jq!g<32BkO$s?m\g0tTtO$g`khp>%h`Pl^T`1!8GA*<sAaOEZdPk9H92$PK@H+he)b@Lch-D]@7%nM8LR'Q.HhQ>m?<!9#d#&X",87<kC\81*t?W^I4:9O`g.3oCkZ+\du'7&l3Q\'I)\n>I;F,4mQP&K/t3:nB;EMBTAoI)Jh0O/.k;%MPQWJ9@U(>`:s(9QhJZXpCfWN??:52OM)cbau&\QNO4G)_#f%Q%W.+Y#5XBOehKlOblTr_5`36GXGqj<#udYRM3fFC*o_@\MiNTi%.UZk!KgdmB(").OK9JGED+55#aEWf*n?a@^d&-GS#Wf1RG(mI8on<,M"1GQ.(=HLD('V?^A?@!e5!Md8=mUtQ]hEcB4\=^%#BP"'%qEDZ`[S4fl`;(`fV&@\=Up?h^L3Lb2@kiP\%-5!%"%cO(n2.1n=4:BH0+Fldid&dc1l6`(0oB'WLp05*Al?[B5&F6^Z>h3S8s9^<%>2W,97jMY97[]Wqa:UB_OtQ,4%HnK$'eCk;=48Drj7(O3JJn0lPtVn&.OfBL8.B7skn:Ckc%oQq&%@\3QAJ,MKSgY>jp/Gif?heV%@q]a)=TQ,iK9KAeR?Iu4FVG-*@0gPWg^Kb!dKJ)*D[MIL!n_r70sVXN%1UgkNup*,7uMGU"#WZ6:P(o]8br4s0t&gRDNg$kOE"t[%5Ksp3mt=N?Z;gBGfEWOA6M<:tIFaLmLdr`nD*fh6UiK%!77k>=@@i*'#[JNuQ<^`:@J81rI81VE9bM/s-G7g7l(hKObE4n`#@9#C%J!"66&R>l;GlSIWhkg8s4j.#h8Kc7@nGkB_q**5#L)gVOZo?(F,-4qM'kT^8:GU.iTfqsS#qu@L'[;6.IBn4(Me%-)pBkKiZ5JEl%%;?7dL:0t<8(]9p7IU%q!hg-/Vcj&h^(T=WfF5&D2!ZQICa5?jhEk[)Z8B;#c/e3=!\b7l;DKZ=4N/6]L<S4^e?6:h?kYbDZu'tD%Ch3aUW0=BH/(U9p.%(f%^l--:+g^?%.V\TC#Q=q_5]I[HK)n&MA-1\L\]Lqk:q>XmL19Cl"#N!g-.X=`-aJ@;Mg02bBRe"P10rj9%ZG/e4(tfoP/e!QJiN?d?EUM1TiU2'@@:XM/5I*G[ULaVIS<4W!QFBEI_A#KJI`Q7mPOIT]C]US5E@eno0'jstN8RfH%8;MI1Q!Fh%Yt/6m1gTlb*jI&/R'I><Ogso]`10RNZR,F!^Z<cFM=@MiSEu!Y5fO)36L^Yc$h-Jl/Q]lHW9KGBRf[k'ae9<L4:JGaS4V3>XNp;u%d0+Ep,#@hJZ+0lAIF=g_B1+oA>s;^(-rGl7\</lq?YJZ@&(;^V,S)0k#TJSSTdX\N3ueG9DP(V+Mq8JgML8dj%b`h]-u"_"0=_@/%1a_NkSP-_P#`$J&7Yu"0m[**.X#c[i6)\eOKa:Q6Q'5%M`i!YsY?XDtaQ'CG'ccUkV'*S(fZIA0Z@3C[L-WX-3W(Xi$7Ik@&c7\:%?n4g-9;)u6!=JZg+uVFQA#+r!.%YMm!:f**3$k0g+uiMp22\a_1&slPXbHY8S<AMb!LO+ZY?W81l%Um7C$]%D3s9M)Vc]CtPG/ir%e)]8Hc&c<oN&Zi;&/*De#c>L71ehe?bmuAu6E#E5kZ2^;`7]ai$<RA&E4'?GTSC>mIAtnBE%Op%U9>OG5^TN5"Mc&L&2Yi'CWh:%%&%do-JQ-$6*rlkI`uS8S,>J9[6&m>DL&=6nJ&Lq"ki@CNHE9KM'J>eJ*WYVC&BOnng^X`(+G+`@gM#N1!VE2D%:fHlGJ;:O#S`!8%16hr/[>%]enJP8ZS89q`R[\"-,KI)4UtgZBNHeXN0cHJ7a;i*RZc3-D8d`]%\&$s#Cs10F_:GjT-J.(]?Aer=E1)]1AI>RIXc&f!%jV4r=?jA%\[no=V6*:fCf.pKD,S>#:AK-IP$kGW"fiRlQLh/oSJ:o2t_QO=GF2WMeO:YP1q,]c!@6B&Ar#dU;q4A^aK:S]A;T90J%a>jj^$NNfTBaYq`-jPm:FZ2/k5GDT.h'"p),hMB[]&_"4kUc6`*'k%0`"6]t0eY/]3[.'6:W)i<eV#&)KT&j.NX47C66)(H)q)!B%prVUD&g897J:Ue^acJ,S0/5Z$X:jZPYNgl3mtlOA;8BD@52nRb%JNYAab)*4EbQrETX`=S:M]MY;@#4gopro;Z>*;1U^oTbC'oID%ZddtOnJn6X%D6[NG_oN+qAsEq0ittt6d)<T6uqg(YW8M5kZLf[OXD,A*8pojaK\qfC%9QTh.4.N/Th,Y-r!cs*-]f)6ZLJ0*t3jK%bQP]t!m<8c:W4A'1V[]Cc:<[^g]GA8k_.h<=/6VYS#6<<1>609eI)(CU>H'>-_TFp378JqUkK16Cg<X70`,[G=UoP8k^k3n^#<GM%^pB$%TNR@ILFD&fl6N0m"b!)0Xjf_Y(`#O+W_`inK:N":>XrT5id:l%e4@oDNeHD4UPKj<Z?>Q?aR0;)#U1-XEm@$fpd,OM'orlQ%+L96K,?L=*2[)rieYaM+d;\$q"u\5&\E=#.Wg!El:W^Bk[>G&+*EkNt.TldfE"L"l?D=@V_*cV5_=?0P6DK_W'Ttm=M2huE=Fg\W%jQ2:%6^Ap,(lA03g2REpi"I5"Kr%$?DqBn#-;oe<5`ip^TLOn`S1G*l.rbTPFs8Btk;@G):R\\S0RtG"Ok#Uto:^I`1Nb]5SeMEk%UcX0j6@"auK*e=o[mGm_A`-Z&B@%t2i.4THeV6Q/fT&3$&QCYm&Fon=JD)on;"\UUmZ:A41_[c8\f,l`YhK_?)6Yt!EpD@Jh?7.<%H,A9t^7Z<Uhfs?-$U"L,!$]RJP;4.(,bWLV5U3%fk:%/Z1+7s]1:GkicO;R^+cA/1'^L8F-UZ+AN(MK!#oS^0"\h96"/qZ!T,]b?%8ZC*iF$P-2"43<UOlqAcT418FYh1]`Hqo3>jC?%!8dQ=Jq@"X'#$?>s_V]<Bg#1<p7fkk!87\CI+jHp<jj6QZj@1OKRAl6XJ1L(9%7j?Gkd[-h@K^!pD3B6,_&+2jL9<'5DNP;Y5O;K0`m0k0a1a7_g#9X=p'Y*'F#B3TU-&jC]cP$tRF\N1p+0%ki/A!6$1'!b+EVLkh%.$#%*!\r#XMX]7WoJlBW\s$Alr+[0ZKil5\6<#'+YS#D[^8^X6qgHCtjMJ-6irQ6GGA2:(OZ5'BH'JGE_2U'h1Xc]`ZuQ&)BB!%[%$q:bP//^4KC12^Xq1sT)V$@c7pL(M59gN5W=P+"TOLZl^7"IHrbT8M65^_sDm.(`a!?`*.MO<&d*U*r%5@FABA;CfO_mZm!aLXNr%!?B<EA/Bp17M^P"o8%X\HiXj<8Q<J`^j.U>INk2D$S[)Q7arkPW!6&FO)&:#%>%W03>)g\0u6<aS5UdG(-%q/<I@mEq++c#Cu?>D%hU3&<(&K-7')7T"Y:t3O2T9tQ9gFMF0g=A!G'6#nJ%uO'OdgqLJHSQl6(iaG)NWonO$.'H?VP(Y<ZE.<r#l%rdOV#-%nV*R;a=+k%;bNJZX/&kH)F.%0#I*:Y"3&<-2#LO#/e$)Bo!(:[.%rIH5\KEr!S?im)G+*R\?/&CcBAg!!n%X*/d')]0dHkNP$A-5"?G9O8h7,[%\<5imRt,K]2e:?*r3TLV'8CJM9Osdh4O`P.ps"t_E!<3c2p$b6QX63F&l6f*=3RTFVMO"J6]>>bHUa`OYn,?Nq\e>212X8#>p/N0%JA;8OZ$I=8)e`.!A=B`6Su%?7lj$]-+,-#`XIP-l87RgdjsRO5OHA;H:lFI+lp-SpFaqMu'g*@A@g\g(-_UoGUmO#lad0ug.6"Ch%O^M"GZ2fmfd$]uJcpHJ*GQ9H,+F0>>bK(9cBlQFe?d$nhq^?X_N>BJuEhLOt,RHk6MZ#c\M[Oo8_?FF*O;^)"]73(eI'GU_1<E_Q%&4E$\88F%2$nD^>+G8h[QQ!.pNBp$]<P\/6#XSP0S%p:Ud"%mmY&[fn'Clpe("SK*/C>rKere46_F2q-cl9&;*IrLb%.Qc>bn6S@%KUbL)Pq+JdkBMgb$RFXRiH)dTP$E1(KHkJ$K1+C4G)W\4Nat6*P,(U,LaN?hU0/oXl+!?T&d6Ru3omK]K^Fpn&</l08rXP_q2T),%,Nr&aDTJ*"aWM'?h(RmoBWEcm=.bU52UDffUTof-^_$Zg?Y&gIn9EjC31gfE`"[J\>6;TEg=fU3=`hV!Lcj?pOr":@+=F-@-'ei+%PfKaYE,]J<TTRu:<s1^f*RmN0?:[h#:$[\<KdDm!J\2(<dai.P^oc)lKJ^"&!U'#o!eZ]#m3^\Gk?FUt$ZtC&(g=R3?:!djlhCU5%8/%dF&d&L`hgsg_3:l+_2@2@akG#YsFTW>@qAjcXC[lAb!HCJ%9EOMN`>Saun^u+:%'I.l6.:>iEoPE.>FtV78D_27NaVUgFV;fF%?r]Ggg$F3@J[H:@5n'ZS:<1un0YWNK.&I7-.1T,j,estFa$;OsNh-lIiNPN.Xi4Mc23DJ[(EIpd)$q9s6p/cV"NXfge.>>pPlh5@%,'SYbnl10PCm@t]ko`=oHkT83)C7H#60//8#[G>6@<,nJ8`aC]_hifr(:d]2!#RbYGSl!M,TmdV]ul\gRg_lEPV(JuBICo5!VoN2%qNq\&&nJ?;R2_@<!%i7l>b;';(QaRga8o*JdXn8oLeWiH]a@_L<R)m2JLB\9Ka>J5?]q5#871?_"YEBp*l^uYp]o1ZSgR"UJM5?e%1""c67+"R-ogBBV&(P<'=W5qr-tLi"7#jhM#oD0Z)JQ[7j]laSTG\).*!EAF!O;$(pCBg%$A:>pEjp!FI3_QEb9@K0m3-093MS**%h1Ys3QjJ:HCL;Gjd_r;H&AUdK`Bq:XQ@WTCbhhn;da#QL=BpI<=r.G37=Ys*-_'E_!`,#VE-r],;4\OAOS3ku+6B<&7uIT]J;J\c%^uLOi0>R0*#t9huCFGP`MDncdcND6$QO&r\+qUBAG%"'D)o4^8,P(Er+q=War=K)u_1.R,!MJC-cnB>_kpP1*lj:OQdCMll(aBC5%#?:&GBEZD+F'TD?d)+I<*okGX@Gk"gbFC2Joi&1T-:p7R!AD6])M$um63pFe_eh/+<7`NQM.e3t'JIi7IMGFU+.4_Ni&%*.gJ]F&%L#<5%_9GUJf!BG-qF'2Zd1.(S<+_iOlCj#,7lga66f;.'05pr(@g?ZKil=?5aUXF4jbRe>2V>E8#a\B#-eE=nOH@6o!"V8#W4CP1%Jla1_*f4CI=;''.OWXs8!Q;p2pE_[4!4_"3:a=`tM63K+I,@+`j:ofP?=Q5M#0%TU'\PMTKb=C+k%I)$Tb1_s!%O%7DsXPbP:g)[%=VlkVi[_6ViJKFK_aut$e4?flC..\IAf<.O,#sc-5Up3\1\A1TKmZ$k\AgR\!]^$]=!VArohZ7tMptF(`sIs&c1p(\KZB#+`!LOn%1kH*P,>se1#(W@=;@LsH@us(O&LSp#,%T-WkQ,KseiD72iIZfC,,M@c7j`da,%TU_Jd1tn6fe_8F$/\kpWR,0!X_*_V&0\@LT;sP%9o6ak"V>of&HJ&r`")sWbSGns<Fl%[Ku>%%*^9pn`^j2L"t^2"F&%s%cRA"e9-FYd?tXnQTFBlmaRc?=n>p-[g&a9qK4O9c_&I@q%CM(I,n_m#:9ZNm]1*XMOn4CTF>)EDW!4kIU*`*th2h:\ZRR@;i3IqZBPaKu)O[CiaM?2[I-cm0cCI04</f3`BBB^E;q>ae46YK,4%%npi0O[)u>Xf0&[W"F_c[X_=#=N;C@8RQ=`80N_>.=peO:St!6l,!9hbE]jl'K0Ap%^j4rLcCJ=@0UpQc6.OL@W&u<=N:;;(.$l1%7S&N>"fTkRITF8J7uQ5C`ftU!J1C)(d-(V6Hr24'M'+4V\(5d-W-7itTM`U,Va_bRB&C`o/_4+?Uomach[Y1PdNkh[)7EL@#?I:e%H&snZ7RRL`oYB,]fYU8#".GM=1l_!d9r3(r:l(.L)DOWP;NqlQ<fmitk0oZFKq8J=#g.n+g0p_)8^Vibbm>K0%<X[r*[.VI\A^aZ%P>s`L[9D"E>kd7_U6CR%4"cj,,q<3;(>'=A%/e$ngTU_P8':AS<'+?Z!!=#4aT/+<,MVDbJi66-m>FpLD]oW6#rBLbO^gnhje&cX%JWU?o2iFX:%)?EuB]H3+r$66G>u_S08d`t7P!fPD4me(4L\i(q@Xriq<'cK$H(k!Z>0njG&>?A1*MJXSK,!<[Rj5prX&)83a3+H3%@65\aohh>ohp3THiWCqklY,6#m>E'H8Ac%F3WLLdoo"4IRkSJE8[4W*"co5jf%,"D`4<V'"sS0TfS+p5=Q/8h]JsnA0u/K.k^84_%(jd!Kod"cI,MX_b>uMjbP*Z6-T_W.?Q\W3([8ad>5QFK@as>^c$h1N66,[1hU0LO3i-7gkO\]Yq_en_6i<)T1FUd<")bHSFSJI&$%Dj2nm]KqO4(5Lf"oJeD-E]V$&A>(R8m<j)Y!"\nb/jbURK&OTZLa6J(%sa9pAdTfH"`SXPr<FScD(%k`)22f4ha,Oi19/]=g)"g`%nle<t&BSTF;/9ZHdN+505h+fo*49qK!p*9YA5Gn7Z(,Ggg1ndK8kNA)RPbnuUF+$(9TjW2]tai9U!9F/r0DEE>YFC=-:3M)ZHES*%C"(J"J`0]B=^5%N,Z%4n9%\piIF")c3MKC%g.4,a7j\O<+,@B\!+a%-N[T)[KWn@),i1,;T(-[]m3r'0*EsjC?@Yc&U))BNhSb&/%5`1BGIA!.ta,hC6A2YYB">5W2!=HIX1TBW,e=5(`QjAfl),3W$gB"'hd"_B4Ou!@)/JMG6.uJk?ImA8eP,ukZF6(l+Li=*%"lsu+%R>&*ob:<nE#\>tXBf'QiK&9C^Jd>;d6B"'^;V8;Z0bba#YQ\[t>ao('1_F\4/m$<miXk^n$n'&Vs*(=/%JaoV,uKJL+Poat70@5&%-[1]^o_E&032E`TA1fjU$F,pMj""@bb&'\rL/Og<=sT81W'[2\bO7r1:kBlD=(g,*l+Y7%$jJ1."'<bncu(!^#EL9t4WuA?A8K1r%8\h'r5U_^R7Bs0BKq9muIo_C5<@40t%nG)YD]$!Ij7<JJo$:`V;"12!@s8L"R7rpm2u')ZMiS=mEFROmSqI>fUb!:L>1ZNb%j]%K%a!I@@79"d>Q'#oLKT@$me9SXbCad)I5X@((lJb.]ZfGh2TNp^L:+"pBdYMR&S/?2u&/mTbCFfMW#d9m=-_""3Qfq"qh8/nW!"d(G%aD+lWd=EMI)IV^'64pk"3ZUYXW-RtO^/fcJ,.Pje'piDG31:DhEi9/d'RU1giM:IU-S`-SIO,IIBZ3uO3(`.eYb9o2i2Ul7<p^j"%.Re'mOYTVmMD,-Jj>02//Ds)[-br?-LAZMMi!ZN(q?)RA)?^O+`uGXENs.e(>W[l,!Pph:[:`*F2oR:5\O+B6G[-R`[:C\&#X)Jp%!dp=H5DOeV/MdZpoo`o@2U!*VB#8aYUC.Y6NeY^!8?*pPMg$`ZJ5*9bN#M#<b?@a0?u6M`9H6RU7ScXA;'06Y.J"<!LFM[9eJKc#%ZmTNHA,q]4ED[%k<RMM1`n`&r6?_t.h3a:4E]bF(Ch4T;-rBeu*2Z\C"'P>F.CKGZke$13EP2OG&[lPP9r&B83EP[,i%hnVkPDo_%/q\^5*]ms@!$s!9\AH>WP=?rt3"h7M9.3@;LR_"h$>4B0e-htSP59dP7#@U`JM@k*F!QcaF\$%J3ro1]0=(Eu_Jptf"-mPDneFj6%3rnKenH.G^BK=N#i_5j^U;FEkM_0UGlT7]Ueju3b$Xgmf`I\ao<f8-e8Dt\T$Ug<&+ueknAs#[d7&)@as()S"k`>)(*'c_XbU;uU%%N?%jhGGP8%Q"j--/dbsk%rq@gu<TgBO?u8E\(W)L'LIejD]qhn0nd:@NWo&*G)'47J:\hMh#*C(hO?`nP$ejOpWUC1+5\&^X4HT%Pmc5Jc:H*O%408X>(?ikMHU?m+Ya#U0<WkAUWs`3,uO_`"VHra;ece/3>\(b$(=ZlLuTZFVX);o)tGqRM*o>7e/=oe%(u0d'ELNt%JZ*Q4JHHNn98AQ<Gd;cF[\rLd\HIR(JI/q4Ycb'r5rL_JKB`VL0K,__1db>k<oCN;RkoZ9Z`4&Y#Q$>KJ[#qVnUUqP$dU&],@r*u%1b_U>%fo0+[PW_+m6KABlS:.fY*]5H7XUj5q0L-cTOJ,'bN=ld%M0M`8*b0.,uX\2H+(_^PK(O=W(U)eUf7!>+GahF="94di-'(I%#q?o'c3G-(99(:tMM_4bnTot5Wj)rp676e]&='Q'F)[-?8"B'pm7YisCoCgh&MT%,0U.5_=UGM#J7R.m86FKQ7oQgX;T:^LW$1-j%`6fAd%b8E[MKKfS-`8rO#U)48]E2&BL5lrsP@:164B94#5m4>'5B3hSjCU*TO[GA3M"a_^<OpnO]^jd/krB!fY(:N&N_;#WAW+P$%l#s3+X464m#I7><_P7[(1e(BT9n=mZgsheBDNh/2s5Dc4]IFH;Xe:`V^]F?nS7okOP!d(^dt?3cE^`P&9u\<n-gGqXXgdGulRp5A%fccXD253]dr_WnKKtJfN-f::)Ck0%K/1EdT/>j[<dL[MCj2t&73g'^\DC^_I;`8"*q?3,$FlZXP5X\]EdL':p%UO.B&dXMNROg+B%$0>*4;I4p3W[KkTJMTb:HU0XRUc9%NF0-I(+:/ET$O^mOFOJ5f[s/m$Yn@oSn/?:;LJ>1.iB*d@)5hNr%e^KHGfI%^#.gVKIK1&D%[%G@>IFfCa897IZ@t9;Tm7I@t=TDO&1<><cno3NQD%.p]hA4G$j+1*6,GcgXGE$`t\QhPTL#W9&)YacUGjuC85<eKCkXeGL*)>3[%Ys50o0qLsA<_`f"&;mib^YpuU^)Xn-`/R/hQtUtW1tH+/V8>an7(2k(0!E/.Kd>I(@_d878r<7s6dEW)pk=jJ7t#nu3YM&BO;BPm%`:4fnNJucL#p>IFasn*IEn))PO"7d_d8@\UUs#Z;6n[-:'M"NHF].mdN?JmA+39^.B1-crd+O0Sh&JFB"^JkU$NT@K9@KkCF-XHO%V`BnRLRKX;5VuQpg*0=5e"om/rCCJ#j^])UAdj%b-r/r:i>`kjXaKESPG<e5Wb_Q@EY0L&NbdV+":dmG%k&SKOtfM,&LeEWLN4T[%7g<4m+G1o]3dKFJAt9jV_>GA87m_*6P?S^qZlR"gI[i3'h!B#CKn.?cU6Kj)!'.>7&nAImHAR<s=S#>f$Fp[&!06;_dM?8[EF_^]%SV,,K9Md\b"qlcT7?T&;Y*r<#1O?lK&kEbZ70`=)BV[AECkC6H0Y8a2"j+$2W?NCFK7Q8tV:6EO+MM(\_3^In=^8#faY>.h34,2`%_\!'T-Uo.:nri$j>08*e!G)cL\d6b2$>'_lV;Bk>aCmS"*f3qH;!X,]'b><<4gJn`_f46f4tomM%9/pWN#cCo8f?/h#gn3K'-!TA%>SN&;J6EmnZ`rCR+s1c6(Y&h'>0R#B:#=#)E(:8*ZkNqDl3S3X;W4SqKM:J(mp0gLf/hL9mC(;UQWq/\BSQO)c@dYcAc3,"%Y+_T%-I"T.,rd[@7]s=g#g4r#>_BQ2#0@(i_1_$`PLE@fhC>MMnNo_.d)]7Qh&RM.gdE+LH/c.T@Q2Gl^3jEX+En.EUP*<6cO!foK]sB0%ZIf0X'beZh&E.WaaK(J%/-jfkVk,QrJ`:Sl$SO:mT#AsF=6']3k3+5?elI-fn)3tAG*6XrpmqU6_gMjJHp021]8Q8e!mMkkkGqd2%cqs!j&5krScQ;"6"d)`RLQ2GHnV"AY''g#Ll"!D:hrUdH*!"mT4bF!B(rJ\ZRI=<qc\[g":7Q4N%RXG1+'U[IJ%<(IH[;Bqee)p.%Sd":rJWn;9JpBt#TET("A'!1D+KNlE@?<d6,+&8_SOEP<"\-j)RrdVBG[>'_*r;S='C_!K,k.?T<P8g63gN)1c<=MD`tA?s%E'h*%:i.NI8"$5R*+6*XQaJ<pN6?*oE/+-=K?GY`Euf/#EC5(U"p,O-('8+geDn:(<q6Zll;/24I]KS)!Y#7`mmotp80n,P!!kF)S\:9'%&`CI2!3am3!HR`UHf#&@URi+Fa^4hZ>A.eD^fm=F!THAiR5-fLJK8Zf(j5%4b6"-5jopN,btap1QV,)4'JU<O!Y7-m`gq5@WO-tD%>)<i=Y3c>70pZ?0?^V0:E<u\?c5$Vi1Lt/6=6-.,QZ?12PC,Y)Qh?*ID=dPP(;`g@IQ!Z7j9%`/K+21$B'duo9G%hd;+t$r#@9h%%pfMKK,m0Yf%QC3-QSV/:AUFPFi/ie.Dar]<??:LKJ<0Q\pKK$U#86,d,hb?e6r>qckC51aDdrmoV;K.X#kB2mb<XPrg<9S4D$8Pm%$l-j/*+)GZj8<,7!\__tj;ROJI$cgTVkZd1BSVc27pMX%_fM'8fZdJ;r:'<V%Q'kR>W>W=KLUa'H^Bin\$6ZXg>MT`KD!$r5948#%2<)9:d;W6>Rc$lPiDO($k)&%n!$E[)T#4hSXplZXdZP,rVr8Tl$jVQ<Ts+jC`?>aW97.ePM1rCR?8*(f>ao*\_Acq=R[cp_aoY9G%fAPjQZlP4J`<pWi!-BWR'eXWcE"n_rAtQ8s_?D4q?h&9\U4;'TZL3Db1n=NpI/=eYlaY*G)Qk%[C@-"!"c*b)(pn90K3*R3KT[jH%E#h3^(S'D;X2>5^4>#_6E#R7AEaYNtG;:r8>ATW>'RUK":'e)]aO`[KeYN:TN#tT[j7=6X?OAg[drKQLnGQgd#`8?+3kpHp1+&%0%$H&MR)-Tg&!nht:omGs'!&IQEMdm1<)BsVdW[51Z"WT;^!)>^.QO"CU0b7]dU7%+W$uD-il4:dG]4?#F3C*S/'bd5%k4)]W=A\.R%I@K;Z.VtWA%@#r&YhPb&=+'3LTg!CIG"&l%p-LO[EC>uO_4Z?0D@>>=_iXpL7R"G;,`<&j.r(>$2BR^-1?17'3$-=!,cm*9)aqR'%8IUJ;(@81iKdEW5i.eO0%rhu4]jM9E"\WRD*=]Pi&*GM+E+/t#kgH=>gbM*:mO#ijG;t/or"uY)6_#*7B#Xfj2NlbhM8OhDoJh5m%4gKo,(7rT:J[fnpE[+,n-pD&TENLa4((+</Y)"chn(H2#EiKUnjQ)\kNi5dM-89aRa,B_54kt7WEK7gu*2%tU>#D0`-#[3q6las9%>1tfR][Xs!V,`]2$Q0\ubt<$"(=j,&Q\:j"$m2$JIUW0jn^W1sP*I7]<mo(NJUI+u)(41dZap_a%:0_%Ot/%*b<@.X4=$[K?t$j&%g_>T?8!9*X(,EeK$33hI3g$L5$EDM9nq@`Z[DI>`gnsj'3%hLWlihI/+:Mi!!hJO3\S<AK3nM^gVfBHcdn4i4BIG_B1)2O`jk9<p%8D<!0-6%-"97@f^b,p,qQHAt_Li=h4M9J$Q6<E5M&6D&+Art(AjU)f!;K3Xn4H^$R>jUJ@a[<u-qGR9jjbblL6(3p5q#0Pmi'+55%mLV]fMKUtYio2^bY5RG@10,!7NnT\06^Q=Q.Q0VE'EJ1=P.g?ES#Yh/O.:_ciBcYF5o=X:_WB"!JGO4](jgiPpC13>EKJ%/$&u:1%Qjo'&Y^;"fBZH7"!idSd4HJ)f^U^eo-Xo1*E9WLI[XbFYE0H`#jPhMn)D:F\JITL\.,bTAn1U`6q4n*&V]lb3E$X(,b_9:"!\W>j%4:ZILhSnI.on_4=7p>15;ZA@-\l^!EbEo0E>nRC$,)nBB`,.l5'IsOE-[/(Sg55E5ACB]_llV@!\#3UJ=/:\'iJb._W#`$pKRDdd%P?\:3#IBB&Ul#cN3PL>$Zl#.f?'9HNXZ[`_4b`cUR%XLQTpc@NW67($Bu%O@qhU`7fVQM`(<$U`-X@93cUBhI'LAfsK)ppdg6=,,%!Xqhu3/a^O,,O3&('TuX;aT,!\Q/]u?d>b4.\@!Sg'gY!Z%iYEdNG]QJNLlfG2T$dR_A(7#cGpeje3Hb#ZOX'>XPKoK<e_$&%Ns"%%]n"@/4$@#Gk2u'3YEVcS--\%.<?o?@f=DcP1A`9=#`$WnqsV@5n;Ef7^dFoL(R/@CUN=B>=/P$3lf#o+/!0*&an?mhZ@<V8k#f(%3!j?THj2btA&AtoKEd4J\]s4tG</f]kJm:/)%UlPh%tuBE<YNW?+pJpO,>GON/fUnPQuRJ&5mlE[8;Gq(eN&r7<`-<^-VkCT>;S@%)$'LeONTV&klKB@U=@Og!lR''K+:B^a*@B4)1r`a2uA=;F#a//30YHoOCWP\dR3ha_dt1r+("(3RYL8>5nhO>9:X(:G^q^-'Bl@t%!g;Qa+Ca-W8=\jaDDVK0iQ<`saG7XdLB1aX?n]@F;Em;\!R,!g='S[Z&L5'o>QTi#.9`JoL9j67*)@=bau5@O^4:"DE3@r^$QhW6%5,Sd,4Rc=*H(7--'4AA>JKrsP.7gVZ#r;eH3/\e[gdW6@RY2HDP2_PL0Z\s#-BV8R_.WL&`=VPc&WBor%ZQ^<3eYh"Etld\%GsVi%nP($pCN;gX@Ent%^CLkk,AmeHF*fJKDE6i0U9kn2P=FI;m+f4o3I>cS&[8fB>X(H[Vg\ASRY6YS,#X^9]St/f8dV:mn)>Np7rDSY%P2)5S8K=Q"`FTRe]flYYUP)"EmQiJTKCc7BSc_0:j*>YI,AoC"$7IlO;UC8RK[pbAs/bUGkDChjdG86H"s^k-$un"'G+;/T?P^dV%+9F[Ok@#AN!T>q##:s_>rTZD^i't/tjd]dFCSX:2jU)0*1J+(^I^6>SWZH!XWnr[)FN>jmnoBa1&a$tlE#N!d0R6+f"?>1'WD)N4%Q:.j2a8Q>7MFMZdW0f[k'@+Vp%c7W1\&G'SKTDVtp1YL@jba>6@WC&L!2@O_i>g.Ypj@a[cUTcXNA=]sd:mtGV;]u:f>/cBO741=%E[-EGJd-VWfJ_(P.6-kaF23c9ZI\a?'T_9B\W2?hLEi[H^HRG6]5(cuQ2#;6q+M;l(YTkCgkbFKB"6V^i"C'oL([1EWTsR.j>0XS%-^kUj+SCOH093`l%E3]+Cq^)U'j:GgEZu''^2lFt:+aR"1^/G8B+,H3TFL'f>UN>SAf!2?MJEDeA/RBtB[,[+nbGW3?rC?ikl@hE%((>Cp7'X/&iH%ul$6-]QArb2?BPe9#F3"T%)S1+$,@`1I-S#-\F)S??l]H)J?,=71*86#jU2Pdh4lt2/naMp/"U!n<@7UHIpPrmg%2no2]m]'2SPp&kXNSpFs?PC]=XG1E*o#ch3R8M(IoT-'8(T@tNP=m82T#WrrZ\A2(N8Y^@6n0scjIN-"#l7+P@uYU2S%9r3.!7St%k:\kmYqFTNNLHOH#&J6qX5f)cJl:@,CQUN,.c8!DMkZoc\_jJ=B!c44"c<0CD-MJpN.IP(f/Ttt2mJWf_N1L3#>jYUEJm2@N`o\^%&W#=3=;9SqXi!oX^iA*A9@O4Y(;gSlH=>eW2),g1Xn+KJKMBTpL2=aCj1aJsV()nX0[<tOKc!VG5"T-\)GF;1>Y#IlHpS)qXqrk+%6oEij]kVWG+)m0*.EtJrT).s08%G'68R];6R/EC)W2?Y0YUC!F#E/A^H=VDKf,S8NF[^1tS3NTH.*IE52?5)PQXO3_.SHaXS3Wp,%(!VjLI.E4.I^s;_;asC0UI`-Fi_G)P@M.VS1GcQ6/fAu0<mY#A*=E.jg(U/)N^,<1N@#6kRoSqm3H.;u09@0P3`bW3%s4Q:%6Sm&%?rAhm`X$8[@m6"Zn"O;bk":?CP</loaL<JCFVFnUS'jY:G@.tID_$"=UoG[^*o0C8)le0$W3/$e'pG^-8A:cpk..4?B_&$&KJhhF%-'>Lm!OXMT!^q*P84;a4R_@e;S845!lSS;<bZ'bJ"3RLlF.`q5=`_poQaFO=hR2MHl&TB3k=AW(Oi#e1+FFMPV)WIPG=J)N@d72.%i$=#e,l$>2!@HY1ef-`=dk.f"!\P)LeY,a,MH"^d0/)L%gEBc?3FVM7dT(U+Tdrs'2?F1i0t'@CVeFk;i`8qA"=S@L[3g2:$Ht%u%/F?(S=VGd"gRMHX?/$RW'X9Zc?6+T"XTI]bX,9XQ5Z0(58-%uhP;h_7iUr;6:,UAH$Ip!5k*FqTQ;%X')jROG[m/!5/Z0J#B\?rK%48r.KfYW=VA:N8[7<M;O/3R3g+I<AeSu5j6YU=9],U=U?4h;ijTYYBQSR0kk;I_)HN>P_ME<rO!W>p%d%^fcRY:!`T*(>=$_pVsq%+@<+!6:sa0leN,pSk&<X^M1.OYU97GI0N<AMX.amB`30Y9NptMq)_YO/+nP9I-;4;r_.E/X9f*O#P]BRoKTMo8j<mc](_r5:*G_Q%84JT>X8E>>SC@fTMWD^+gf<G;AII7o4Q<i_U>l6kf*#;$j-<`^-8me]@?9uUU,h3[+&QIh0"I_.ACZ0%-@=u2(D(`"7T`'2rP@%a%';(50eNK!AOpTa8U!,SNN3Ot26A^D'N'`c+b4<6R@4hn=hp[!2SjO"3.'#d"GQuEI@PsCH9ST=sqMT+9hkDe8,R"b[`/;_1E"4E)%_QK2hQ=D63"g1q(8Q&rgnetS9*&?8AeYm=-U6mBM*K`*_ZF2*pjCTnrW=pMG*!cY0VDp!3fg>ML;i&fT"[-XC,hc[NG-J*M!6mCN%)R^YY<bUjK/Dak3OA/mrJA$*e'(@q="\b#>-CG-BY!^HY?Y_0drP;/)s._:D-d%U^*V:&GdF;,P]b2u54VGW*6#>5#W4U;0>C]=4%072=Q7bQP60r`#hJh[HCOpi63CjYk)AO[B5/Y\P"V":#CK@IPWP(FPlo4:K)rmpE`!G&Vb\bO?pg5ns&lO`,od4U,<XkJ7qp_+Aq%Le%r$!EgrcBGER/-pC:*:n\Kj;7F06+g;.*V(A'f^oh(La2ZTs,[a`F(R)-U71P"pR<Lr62!eboUmpUE;XR-<WffqVZq;!@>`"A=%KLU]qBIjW:E=.@.=\@?_q19rpE4$#X19Ll`!M/<7B!k#2(/qo#`-sT!dM`=U9$sj1G_]04U2^4hEn;fmciV>JO>>ku^^fQ9nCGb\%ap$!9E@1hVmWH1]e?68fO=\3P%(`JHM%!9&f'neCJX,iYKuCl<3NLa7$sFHj9+p2PIk#>m5C^uMen(u65aQbG+o)Y==I8,Yi.7*H%m?0q`@'325'G<#f"*5"]%sC-4R-kHC1(Rq$kNr^[I00[%N92NT'FIPY6$>VN#DmX`jGu2OF(dhY9W$>`EeJ5J)+5n.h//hW/3#hC%)+SV3=eNiOE'7SK3OPB^E?UOq'p/glkESF&gGDD`24lS@F^TcaZj)9C&"Kp^qePg=L-X*H-cp!hT,UGWKGrn"9ZdCk:,<n[c!3a6%%3_f5hWTA6dGtO)#I6_NWmGcD+A8#.1osH(BKh@bMB"*(;aX"I6.nM<?Q8>AbNrIXF?u#dr1*lm?+=k3C=s3_EnrF!($F#aX2%Cc%f#<!lLpRnh.7<"sFnK2A<t<2(ZGl=hZ"nLtW'S_(0u$dp3+-$#fFa*J5XEZt#HKIN^lYFd-4CVZ[IoA7Mc"=9995a7?'M@dQ8jKG%'9&EBUOq-SVN1aH/1pu5&51K^aBIE,[Hc98e3qh[=@_F4Em.T%Em'q!C*IEV-jDan7L4*Ib690EPbhsIPh(fAU?JqCP!Bs0jFdu4%<-M5<GA__X;1bkW>7(&1&Y6/VUW&$k8bOkjfY+nqSDn--:kml]Lk+J(mLD_cjDXJOG1iOU>/?(6c/b%M9UNoC:JMNL4Y.G#*R<qe%<u;oI%oU/Lnra+"'TObY?kmZ6+cJO4,:?@scKD^!;q7^=fcYiPO2-%k`_Uh9MhOd>Si4'U9%0<=n@VLFH*OJe73bMh8SiFe7F`EL%\f/M*BolH)+cFF8.L!dVQd%;nfn=M+kYhsSq>u&_kn_4kC\Y[\+;e^WF@t?(0TM`Va"ddgI6[3=_!??To+:,9AF;YKq!`/6VmAD\%bSDW07Bq/h93DJTaS'@30D1F,^`4P7'Pgpu@:L"K:o)`8]9Z`PUc#NRGeCn_L6Wpu.H+#2KKeq?9q_95re-.t)lsrVW+SS\Q=VJC%78c4R3iKtfbK_L?lmmZ/9I>l(Rd:1%,a5E=[@7(p"!IAr^6m!iB(Fm:VJVK-*]+?M,cMG-`9VdHe3TnTT?#6rcsj"/@_O)B3bP+&%ATJaO&];m$#bqTD?*M@!N]LiF3EN26jd?IOWfRq!s')0sQ>eq?#EH:'UW_FA")cc$$F/\*<i+R*_aRs7BoOh85n&YNK$@LH6/Dt3%[dY;FEDYZ&l[kc5M#-?p_)quJ]qb\R[1T+5,IXC.EGbfIU$NE<;!<;eU.-]LiNjql_NY/K16dtR.Ps7nSE$WN1DVW[&Y!TCK%Nso%-5%^ndgm-RJhmIE"X?b7#_3JS1:[;J1oH;"+:gC"6HLV'`^Lu7I0qDQU)SPJ.bPJ2Ja(fhL^<WUKFX4jj3eSZOos34mX<,#WmrI.%W^V&5JQdZpTSs*sYafP;8`*8lZKfL-dZ0j"2tdV^qjHirC<>u%i5eOb`eR'fE](3HZJ!Q;^.LF*/=/NXd$r+@Cc<gNds;sD*867X%*k\u<WXoiY\*.J>Kr,-5bTAX6Io^GV6VII_l6Sd;Lu*1GpYRZ!OU"W<!`+[Z_FmSO+,%VJ5%3sri;QGQSH#.a3$:KPZHoRP_92mq%ee=s64/E`h_6d>79Q!TO[)""T*HiaoSIZBtI7>H]1o9n7@FD\QQ,&rC.hmE?F*X!%X5$UBi2'J?V#F@FB%L_^NX4P>1_@#;`?+$7%L^Go^Clt1a>,gaW_2>6o$CW!`3\FWu'nicin=pUn@5(pQU_q8o&p7.?*LXX$IdpKQF1T68Z@sC]Uq(<*-!.TeocR;6Gj5@OAjZh)%POocJL$TaWG7/oA_HPB1S3a3XdFb>%)6$b?A]DS\<u-B_i4`C!9STOf"[#XQd4Pg\&7\PF8E"2LmnW]]P.@h)QWW6Xa0a`=[C4^!%CU#n1,e`oP!Qq=#5LNc2g#NDEVH!XV/si>q\LiH:lk[ICBkD>NP9Q_6._ou5mk10:[Z7`KP#SSs!,=gHftIhjKMu=K\tr\\:pfYU%j^m0q8KTR2Q;S;Iq.?p2Si&s+\(sQMnL%cmDA+J;oKoiieMHai4cJ%?"[-B(X@OL7I;@4>92'4g&Q+g2C7<AVK?f]^2l_R"l;4Jl%>QqIToiuQ/*8-=pqOmLB?`;9gmsp"(M,s5T$_OB0l2&Zq[*6EXQmN,fdk6daGf<L\/<3Q4K,`L^1,i-X:=iuSr0(];Eb?/^f\1uo%h;6diLmg>f'ds+;#iDB8"A75]pSfRROhCLdIKgKs)[ZWjl1u6Idh+:!8>g*Ub%N9*g.tDKC:JjqH[?)2748n>aNG&YqLURV8;hF!%)=/qse^k<>?2=U=]%U*Ho$$mpKs(:@'tWhjrhe'8r8hi)>uqg42heE8e%^S#qJRj*p&?XuY1MR6F1!ZDY'[;N8=aODWH24Pp93)Y%g/I0TWUULAY5S2_SP*>J3`l;rFftc):[1cT1RIOZPBMKKgY9-pPY?YnCH/,D82p;cMk>&sXJi;$7cNHr7&,b-ZB:KugsKT5GIJW,%2<e=L.!H3(C7gOW4`FHUAODfdmkDVGR"&#,dmLiac85g8o-_le.>;Xa$0%&U-UG65:LHH=d6hPY`"tstdfDe$LTMjH=c-#X8_9;U%+O[t>6;nfH27uV?"m#K2Ug6*SN4babEJGU/hC$&K\2cZ1^gGD*+%O+1gn+%Mg"Gej1Fs'^fC*8o$'L/aP@RHZ86,GME@7!lLN,q4%:MG"4\1>F35C8[cH0Rt0nGrkjg>e?$QuT74AgEgE3K_!$OQ`JX#-kIKNDUL^,TF/Gj'a00>q<(eqj0=#-rg^;mjUSpE=>q%^"pQo%OtAqaf:n7EjS'L[&JRlnQ%]AE;RM0f]O0!RF&U8N96FB0#'7'2!ePgqCtq[:gmD2EQga%-U0F>m;S[C1b1JC0$8o!SPXWL,E2f/O%qQ34gKq36^X?K!?TP:[-e[qZ_i3EK_EkcY:OqX2S/(%FAiL(PtF_b,7?=t-l4!`LtrkBWc)*ugrdb?o)?BS$,,J"5#;^0"HS>9W>%-m@?)oIH1ll8C0S4"(+377SIAf0)BR`;_5UeZ_N,cV(rF]H4ZAoL]QA(OI_D+:7hEOPb,i8"\*g.?Jl_7J*<pqn0&EE+mbLB1%g\%6!/-RpD'JEK\(OQ?[.*.XC>#H'eXFe$rTb0#;coe_21/9mR&:=M9?-DmD`Va"4FB*2fQFZUo#K5%f2[^I_I[8+Gk+)0RRVD@"sh6%[2,33OA$CBr^f&)P_49)IG0Pb5VYNCS$!!Aj4J'i]`hN\.n0>\i)ZL@Gl]Dm'dgRoX%rOb<=c?:gU%<u']oI0_HGRj@j3/,YYkc^%[\eq7?!EbE+MNHX>QlM18_sQ7Ca_4'k\r-unNlu>3n9i7YI:)9"5oE&<ob&`af*X(T-8CD,.a=%KYi@@Z>RXr01^5s6Hb!qV(`Np%K_X+L%O'u"Z)gM`PP7mC[lG>%/`#nrMXF4f-.FKp'aAl*&1YIa(u#YD>Po9=OF$5MNI/CNhGr$&Z9g/#!%cI00CYWi$Xf0QD0\R8%2<<_k(ae@UOM,S<aEu4:eabRjl^EE'Qjk3cflH.m7VT"AF)hQpo\Fe=D>&9B\ci@uW(5U-E-CAq8;<L.@2U;(^>a@8@8j-CcJ*.`%!#Oo!D+4lWKCq60AY-%T+D"="PH<7H-JQ3n+m$OP8^[-e!u*A[1065\'I*K_MRWS)gbkD&k;9X0?Su3R=#nM7CZ]22^#87b.Fgo&%!klkM6;b*)1!(OHJ:pNpcKSbS*-Au*A;h)YJXPMR5f4o?@M"=[iM@IDIhK!8*h/rrD%34.'$t)JTJ,]I?#k-"e#5:^hP:1GR#7]D%\>oX0BO@J<>5r1:823KEK-[MZQ\u,4)tjY?+C-;Y4DmS/8?C94CO09ud,?qn)4bZn%/Q7dEXC/_JteUt]M`XY=[5Itc8U-86S0Kb%ANHT%1>"9Y7-ZE;.2'rG;pm7U,HpSg"XrI#;S(lG;GG\]L.6-r&ZN-I`0(Y3n-5-3r,#2@s'[gl<i7CH!?k5kl2U2C]Z/6`73C=q%;JKb-._3fE"0rjAlGQgF/IHddLdCQq<.b4Hd;N`4Y%T;mp-eR9C:RepM0%c/V-\\RW>+=bV5;ZNZPMU_>=Q4rHtbV=]\=V*4%*:Q%L.Zob_$bR;MJ9o!Rl2GS>]!!D/;%scVZKW$h108E7:*/Hcj37L(kktd/gf>LV^-qaC2Gt3YlR"qgC6h*g("b.RW;R#3*_ah3e?9.%;OX8\3*fJ)g.8;tMJD/E$^<-GeD8N7f;Ft.bM3"]ICPn:iJoM](MiH:DP3:pRJ$*@Do%RT@57+$<3Z6FQr#Y1@kaTCpfcB0S)Wjt%-UoMRlEG]j_YK(Sm(e#Z;*F)Zln5:"%O&=;W)6"a&n8p96[`j\n)f.J5Tl=%THltsm7Q-r$hen454titr$`UN$0Eu?4S+KLLr\NM%4<@,D^<hOhU"]Bc(9P&=h/_stC9+]tio29V6Do.?9e2nRYS[!qZMkcS=>SJC++rWl@Zmg_C=C84<\*qOXl#uL:YB<iVi37Alci6/%LLi0Gpo)d1X?X*hb8W@;5G%sWi(]MiFLk/Cgt+U.l5jRE/lL,=/48mQG$oL4YZ<i[g];Ip*cD_s)J6PrfbY*mCPr$1[&:G#\mo^J%&C@XfRRX8n.J&sBFF0,:X#cF-,<F6q;lp/E3k$Z.BMMGE"M%UhNSVb?Zg5B,Kt6q3VblVkG4".5RRP9MKt:j)`Qm`u+P0FLHE0/t%7VE?6obhmT3s6XA<u,F1]&,j2;4S,(2JVGs"mc.]jW8,F<qC[*JkiL;4!g.NMTnRr=Y9tV!$:9kStd)hQkdM*(oX9qrO+,>2N(o*%J%Mkc7fI?fP>seOYq7p+oP(?!a(7sS1$qEcMKu"k-$CsVs(W6P9I!mK)U>VUB"t[_"8t5FJYb216,j6-q:[:1]`?k??R(;:2Bgns%l^fKC7t2T,G)A4B.AZX`e`ee:?MR5jD*M&&O;aiW["jhM.8#RbIlAn5(YQ21;l\+`B`]M"\3lMEKI=mAh*q=C_B'mKj[[Qu^;*EX%.guM+*Ul3Abn^8<qks9oE@$h;T"um'@M7qPk6Jh+[)D:?/lF_p/E/%8jF!dYS)g_cEGd^)OF<ItX3q=<",<Ji/@8I4R9#6X1-JT]%7'`WA)ZqA`nfC3>ZOb5:;_TihK&R!fY6af()-Fen,R\<c&0ZXfDmDs`6_!/rBW?jLn662u#A*e-#kstA"\#sIBtma]nq\!/olVip%]=[?!;qFjalW=89l?OX1b&-F_j+d""P%Luq%;LJjDKuVa+Y=(QPIMdm8mPK'(h;sr@7YQ0P2eY],*isI,4^,H</qk)1t8j]EiK,,%NC;YD8<RpmR2ojs%a/BUfm6a$@l>@Bi8fc;kTuJpI<hkC,f($/H?f!8Pg[8E',L'3W$EP62lJQ3/2X,/!,4t(^eeC$k<OrBW&;D!%'0p:u&&uMSOaJ6]-/N0Gb0k:gTT`C'(T_Nd/1dAJ\mNPJ,dfWJWrN"Jei]JIDlSV"9Q.V1b?4j^6O1@$dO7_2mTc09?9/7j!8Sn\%OEHa*$9_hWO"&o.Kbb@N,[IRK?l'2+IMDL]8g"Mq,B;;#ZBAOA'C)j:IP:g&=`YNm#al`P6rN@sL1!1\HfTH7&oAEl`74/X0,3Ia%Z6KN_A1[eU5@I0oDquZf4q?RFAg:3+OW2Ntq\QiK1*0YW2#/8r4,*[HECKKCRSib7&;5YUc3GXc.M\>JK($"G7eI+]#pu40CiLL]%&rWH$TZ2?CV:L!u8[8R?a]CMIHppViq?"BO/ja@\"bia772)0,V%W)Hd\YeRJSB;Bga7JB5Mdr"+qmO[p&`Okf/EKg6ps.A&7b^?%"A3N&*3NDo9\Q4qguKbq(H1M6T3m+YL('A6`!jM"L1CK8<L7EQ&:'.HZj=I'F0Xi=,NU<2CllOndW[2;5lk\&gPmP8aK8+>KX8#N%g,p,/P(PFe_%caDYt'O7_H-`P%r2Sg\/#U5W#dqKkZ#a*>Iq1/l=B31h:6U5Z;=+_NsIp"JfMkMY&re*c;$p-1=VJ%O_E)ndME/h%AeBNX)hk7+_9F>EkV7qb$po1Tdm32o&a3o6#m]E\"@K2r5_Q&4r0DtmZD+1gN0tu.OQ1@NRk[g*]&YflVe*k!5qaO,"6?iua4T->%JGco&;bshV37X?u`(sblFak<P?;8ucerKS`!"])U1Q[E;J;u&'Z)W"u1H)KY=WXUo"h7^Z^_(8GrEtc,\DVSP2Y>XU^!sa>-uAI3%B6Sr//QJ`(d>-TFf3?Za5FOM1ZoL-D6'Rt:gm_884+kLA4@2ui")_#7Y$Td\f<WD\,AR_2%_k]e@[=g"TZ-Nb!Pl3<6Ki=K_PfNb%,LpgJMAc@NV)9KW:B](t]_"#5#]_1lkXM*tJCoGtK(3YX$_F#66l&9Q/]gp&18N"C)QRo<RR5^60!:g)i-S?G<7nJ[S>&j*R";(^%2f2]89EZ#.fE:?i@NnO7"aHg&[?H>?FmgTM#V&rAkD?st'$d%R0F44*971H#a/YN1k2Bce&$[X"Rm2.'s*WtWf73bgRiP"J&R`bb%s5j:['6L.].*<=j2b7VW8#P=rU5H)Lls#/]pZ><@1CJ/OX>pqO0=IUa`0\B=4tH9Q9#QbC9t1\?MCF]TF&gbk2H=+3CN19o!T]VO%!U"U4`T62Y,\hCtKrsFt1bFoI2gRe;\]D'V+@no>D-ht,KPY_d<?dYG)eb7G5Btf@:<ZoThb,jQcsX2l=!V3,BYlOuY5hNp9'kC;%<GD_/RXUP=R/#l+bQ)_#GNnNL8XEO2;J*8G76#aITL4`%qVr4'47A?LbB/*$8oIc\ga,FbLVS`R8rZ2N\-JrLp\^ti)u]kA#>'KV%Z2f*L&Scs9\*j[NOF"c!XnS%:Ta@\*2?[Ss*c23`)bY@hdUQaIA2uEVF%9YP=uE/`l`:mr(oU%gBTd1mfIcn1NXL]1q<qu.`F6*V%IBV2G.(,1sF>XPjI]J((!EQEj]5;.2Fp7(T.sFDlJ>GsfZe,JibF/2h:'^nMIY0,?)OZ2b)[QN\181`V.)+NPXMiff72%Uu[?)6[%6T>ENojpN8f98H1W5,-(.Xn;0MM1kRM4rlLCs`i@YGVI;P\fH?X+@:"B"CYNB3Ym^:dJhqBC_!hFPrTRfu$'a*lB>ZUp/@eZ+"^o%;o,_2!$Qe\mKr8,*(bL3kVlBSldcs(h)QEO=\W%nY-ANTC6t@c?=RH:AW,fE`o(AR6M&C0VUNX\3g>rXASk?@0^M@?YnN&EeD>@7%@ua<R?"%/(D2$#@Y2ilJRC?Yf;>EACVX1/h>_HE\Ka*c;P'rXbP1fDHe_IqeJfNQ`Rq+&:OA5Bs$)ObhkeAX6`+2K,0JAd/rL"7'%Vn!hS&OFZ&K`ib]@&[j<T>cG*;2JU<SLGg!0e"S\>7PK$-qK_PgG79<&-ti\q6jnq%#."bj+U?NYr`[%(>[>e$MMq6&K04D.O0T#%jd%su5NN"_Z@\-SNL?HF,$"G]]tQjb*3rR9`a`CYK.=gt#1Xe"7^]^=&es4rcrQia;=]9?Q`Kk)c?8u^6\m^O>%Men)?sQpJOCWI%4;T_5EN^O4?u@A@'>sM,ihnJ&4eJT&'$X<MW:SKRm+p8^a$`Nt6e_Bf)C:GD`lI9omU]6b37$rfi:B:L^e*k$JM[)ME\Ps33%4FO%O\SV,WnNVIe()fl!31jH>8pFB*NgR6_J"*_"!4e*"XX'_XnOqOAK7p&X;,X6Yc-[dEIU?M"T5)$dFjAoD3\r3lqVNU/p1f"+@\#Q%lD+ps8bO>8-?nHe@hVj/1rlmZYhe?>]'_2gp7Ngb3]Tuu8NVo!&0%/](t1RSB)@o`R7#G-ml[OBm*mS]XRjK:G1c_*j`Pjl<g2[r%lXB\Q"L>KqrS:6KY=U?*hm%lX:K,dt`e(I:4q(ED/O)k43k&6'4hd&&^A,^&VFWQ1W2N95\d:Z//X$AYmOT6$WQtS$$_k+:Z8+B#%OP[u0_LtOP-]n5HD4qsTN+C[X"!CI=hZX(3T%D/.iR,%e-"n"l7NKk+=mM.nOuL(K'n!.s5^S?b3'nokAX'3pMp5gH#b?rXND^]b%nM:VZM-Llfr!:hWeL&eq2%>83L4go.@@mf:""#>.Wh[]H3-7ZF>#e7lWd:Tm"Gf<?/g&r0e=-X\+];Mo0iY05H1XG0na)4O0]Y^j%'rT)KF\l"qg:*.RRY&l:DGc2!5FunXH^st#80b?_!/p^/>h5TY>:DM:\777>AVF]'GSf)l"@c&Fds>An[6kM]<:r'D]'>3(HZoH:%`#+k".#"Gg&V!k[5]8r2\!T5\fnul.N-duMBN8"J=Nt\?ZJ$"["D4Fd5,AZV:dk&$k)opoQ27;lGW"'gE^LbUkS-`G>)f_NX>bFV%g0*5f>?TctZIojbL2>7q"581_*bL+3Wt\!DH@f2eZj*_k[$j9n)^HXkH/9,B#'[K>Ca+8Km[)bEDudj=K#cuP03)j%91`dm8%0hS%rb;?([iMZ`RYPh>drr2R!r&o-86rkhpI-Mg.0A=K>]JB[h4r!RD7@YD%*,2FD`^dtg\4P%dSLS9&>bb4>E]msJe4,jH^`EmCY(/F%T!'RpCm25J[_Fho*J"K:@TnTI;#_*"&*7NR!mQ:K(ftRD:<cQji6=gXfU3/q9uG\8ds'R9r@t#DlNqT#;lfB`pT_c/j8S(X,sfp@%Wt[.jc2IJJ(f^R5M3^n[Ecu"\;S.ZB?3?iY0Ro5O&2sWLq#1^Jj#/V+aSR5d<jHM!>fK`('+i]2FFpOC_8?Rag*=qfJ9K8\_%pOu%G/b/J,gM2kT"VGZ!MK"2>&8:J=1]q+kGL=KJrY@H&M8AQkp;]5@*dN@cDT'=Lte'<iL+[[]m_@'*>J8$DjmUTNk_6<:YDc>ji-DP%1`6UU\[2We)!dh1Fg'=-VU#*nV`N/MNCT0'M-bqrcQ4;??t#8U5he#Zkm?rY>e0dR-o[hL:GeS6gkrO!`]3Jd+@,:Tj.B,jg*#3\%_;ataq4$a;<<prc`tMGB\Qu0P/'Jo@qe^g;J`sn(Hrl[g+6^11rYrK*o:7Q^I1ek1(^__5?;1UbSP6V6?-oZ]Sk$'"f_9=,!e%#G%ciGKqL1?7n(m5RoTH`t2q*I*daF%0%f_A3tQ&G$oE$g6681;b\haN%h`1T4N1biB$?:6IV-2t-1/K9c\MO^fX/+i1piM%t"q(O0j%E@->u#ld<-@"r2!B22rmTJ(SL#d3cBE(mr9k&*#*2t64r5bHN89.I`f>ENrX/t/k&1'](PH%heLg+M0+JG&8drS,3t!oA)a9FKC1%pa-oW"5*Zce+$hA;+<6a3P0un5"TY#>q%KCi]J&#'_/Djcpi]8aClN'%"qhQX"JSk2Ne_&-_;'0CV+7f8Zm.Q?O#F%fQQh@3Uk'V%<'aYig<`$^jcBeu"LT!/7=,uFV"!9VJJ8G-n`j6Rj9S?JT&tX'aJg=+U>OsS'j*MER.k<Rh@/\ArmKZBHsrrNcB$0f(uWCIhXT'<%@'9odVQY?uT^mXelcqk0nq!b<H"_Li=a/Om$C#06iUN^SL+!WLoZ"W,FdD(0G-W8T>bdW:R-nLcl8g6)pB/o/Mse5/kR7@;%lWtC%q6Y\;Jc#tI5\K-H)(4o7M5Wg-o#""s>s!IiW"OJN;5_\lMIoU<9nJeg6!/:]_M[#SOS>\+0L;OQ;.@(X/st<D.+;D!jeYY1JFG<6%kb=UZPI5sR]!"Z`')PUo[Z(g-g9"E4iU-&([8EtaVbjQPE*^drinK#nI!7Lt6Bha@cIpg?*A:847Flhhl%csW9$ObJA['*:]$Rlo%Ii=VI;so<5#$AgZU'NB+)F'i@$ZH9;PTOQ?Xq&@jIKTmY<,A8MTt9`S827BSU66JY,94F=D,&$BpP>7Z&n(JUH953#*n2IZCHreu%E0et*Y!sCN,U5qe755('+mC1iaQSHRfUua#<s&8@OW06.hh.S7T\0PhkD;<5&"I92m*Am)$oAeJdLGCm:$j?i"+K<Y+^o6=]jRpo%(?Q;Wi@Qu6&/Bg2GR(dT9@]RX]t4(RiPZ@fT:eZt?B<6"LP*>-q!Dpd@KM,q9Wk(V=(+`<_W1na',t!pgOA"PCg`upZfghE95Dcq%PDjEQ`+9An(3.][aTtV4(*Y,#07Jca(IC,/hWgeQY>MluY9m=qDsW^+c4=r#9XeV653%nAl"tc!HZWX&7A206EC7c87@dGn/Ae0$%&qh[*/l*d#8Q8WQO@4=50e+9pB&dr^Vdd"L]Z<A"0iYc."mqR@#THCj0EGff*AnlW:uO3KWl21`:(4,MQe.:-iU8-X7n6I6b$.'u%R6oi8h]NdG_k<BA[-iHr=`%2,rM6)>1]MmjBQ$3LqYmUqZK%np4Qied!;j<O:RY>EQKP:`'H!9&,cO'DF-P3a@A+Gk7_FPTN4$f$%g$29*e):&soE5]h5>2jVV7+mu3+HcFm`Q3a$+KmDM!fQ&Zk`;$:S0WTQ?(44V\>Y6;?DeK?rmBk)V"$>F,<aC,ur(OmQ7j;U8S0?%H_l:qR3ne>Ni,FaiOf6+DFQu$+O<&6X5%ejPFA!A$DN4Im+rdrE,<(KZg%:c6'7\JXa:PH,\-?8cN@ZX=QtuG=nJX<(;+:1#RC_,%\D>K[Di^WoJ/:"_]I\=(NL.V`l_%BpHWb[FeIk+%i(AIKY`nF=XUPf#2rLLD`B/TPJ#:GNAgfHZcV*^R-eDDmlaP]A66iH_O&@q)%YY/j>TPTG\*=`CmU:XhI*tEAQd_)<G@<M`=&B?G3K_?O+#PlI8DbPfBHsAO"b-r)R9teDXQi3AD[lKgA.tN,78:ee=Q*6@[RrEnO%@3N?9d5S_^X"boO2^3HHFH+*C.+$%bf6mZ)P,=AP`Eu(0Rk<Hl&d+1RJJ[TIQKG!%SB_`DWq+:$&5[?-.MWqqX3quV*G'E`^7fXO%Z5'K1gf[]F607*Hjm7]8D(*t_rs!['QqV1Z9#%'*^O+pu])]AuZ2L`G:%Z:Ng%<IB3OaG)T0A<#WZL5Zpnn>X7O1dtrgb<u@+GaN%>Uf)+,IV>*S=?X:(Y4%3=b((9KfL6QLRdAQ,\cP,_r89Tr>BnIdj1#h6d]i4Y7bo1YY"h$?srjgM21c?LB,oZ+BW.fNpQB%U:HsF%h6)0L$#r0c=A2/L;PRS>Yi"OMLH.%oUQGp8^Pt!7^s*Tr&9b?&/Q[?3J"S<=52FZ;bG/a`jW,nXST35jY`#pjdG?`LRNln>5^^')%,/.Wf>u`p!]?#&RSQjHY"ff:W62KWN!L)?X`4H4+0sM@J_,]5tCqJ1T71q$=i=QD^P')t(&]a%FN(L3ZNV/&4588A<e+&b;g"ZML%r"Qcm'\%&VeI.JkV@!I$AbafU*Q!R<F00<]P>JB!nB_ak-g;`;_j'N]GhB0!ed8_%h/Hknd]9F+kq5VK%cuhkGi;[s&M]nii6U;*%hdq,[(=Rk+[e?r)&7`#%P!L28Y^385c++!HcP1CM&f]u<'cH$maf]g=I#CZP/koG;WQ\\bl(!!Z0Fq'&-Nm<RPUJh,AXh+bmI<F5%C#Q]WEAS-LI5.a2B_r)Cci8#'?n-kY9?j9f,!likl]lpler[$&PFi8:h'dR6P2Ug(`0%^HHL">H"DKps/4subc+u$3fUEnlDFZ1<%("`7SoMG7mCfe^a$oAuq3U+X5Y$2Cho1@;"<IP-0@^C+`;Chmm.Wj[p`OM^F>u.iCba\`tG_;>U$j8<5$CmSJ#_;ca-]2h^"A>DN%euq?H0.0V^bLOEd7\gR3/WZ7n6uF7`"m?fa?Ms$4QQY&GO1%k^TU8:5$`T>WX1*!!o_1;dK;*QB=7QMX`\I^GO;Ke0_B/mrT&2+'%L;0OEX_jXGq.>7<&$BD1d1'[co7&ceMDMHe9d54B$i/Th=2p&t,I$_0QIh"PJ6@1R=0SNCbq`Fdf6E!@dtmj.E=c76a/6h9s0?ht%Aq6PAmjp]T>BJV+is8kR.qpR&!/j49bTl7[=%>Z1FWiWhM5?-A(2<KCQ*>H+<^B7BME;8i@.dcK/CghJ3SRDX[#@'J_X)4ug<8$b%.)UcfkK&_GcUhZJP*"*mA!>&d:PE*'V;i)d=_Ee1!r"j8(i!VR'=PohV>Rs)q<B+u1DPj7I4b>HBeL/O6F4jE.U0>'(h#+2fA2+\%.YD[#BR=]pMe-ka9`EuT$kB2H>3$MPXh\8X[cRmk(FoJ@<e*!Ggb2K.6s5q8#uM?\@2[ChHbO%hU)c[P)<Y&N*in1sQ]g73@PV4b%&#0%3p7WCj`X7Mu`89-,R&k0ps"o(,##/]KPZ2(=f6VUAf;:!7mH?@l!`:;sc#8\)BY*b\>s3Ina.SlDGuj^eM^X3"*\h_>#g]`Y%W)-^M/SPgT83Fu@=G]Qsd>W6"PH2m&LbB('+M`eO"EOpIZ2.rB7WDJI;*rs<?7'iYpG]L\OIiKmJsq1RTuN&uq^t',d*NW=e[C*Z%71[c!J]5p?mk),Yj$\nOh_ei#b88U/P>=<b3@gan9i/&Ni/-R8bGrQ;9o=#nrFrofc6-fgltJe+K1[abPGk?F&M+7pCc^L9>W*S/%P^dGAB.JN\n8lelB,XChQ0873Ls@88R-0Z%f$uEd$Q3au,Qjs`OrR+u;3fF\dflau`&/rUpQ+5b3gt3%8aT2@Ke,hEPWLLP"Z-3L%_Nd:*;U"L2VG,XA(II:jKc_)@FXOun<jb\Ob+Y.m3($Ds.3;V".2q"HRM+ci7`rbDR``[Z41u%orM3dF/!2rJnGN9&8CLEH*IJjT%,AN.K;lY`NftaHd/H8^nOJLYf"c5>fDqZ[42E.NmHcUU5+QNG")_X?YZ6Hl$Ag418o0$"*A<KMXX+?[0d]Dp8^ZBtCbJ/M$44Gj(%BeK+tHUM+X(Y5f=CRF79db/LOLks(p9m^RNXF\fE,')XkWf!HY6;Rh1/eQUXhh[ST\B5"`.WU&^Q`>"&9phZ(7<mqMf-RV0IbpCW%6l4'"qsUh09nE2@@GN,;Nlj-o6J$aa/:%c%6V8;Pc[\jZ9e+r(_Gc+:/nh(kU:PBtW)1.g=YsPY'_A#;LuaJE5HlW>^ca!C[9aj(%=Y)8kh,FG%kn9D8M"Ygq;D=G,>LM2_T>mTY9i`s,o"l29KIQ!cB#NjEMM6d\]%%!k">Jh.!W:_"DZ^7)V[:nUH]b/@/RSc;6'p&Z%KIIhp8X\@:,!\cue;fZL$_c8/S>>[`A26m6b`[J<0?YqC_MR*u$P\qsFd&p-XQtTL?i;P6/Ek?Qo&U>b$L*`7D-Hb4Z>V2s_Xe(+%l>n2DREkpWcO<Yg`YSF_C2>tj"!eI/I$ug1D'GoU/'NSL^>rl9^"E\EW]I[em9;J0>>Qc-*A.0'h5Ls9_J7?&&1HIhSLl&36;>RF%FHY0j263V.Fg\5S,Kjfc`(r)GJCi6jd__0W<tC.=%J$omb6-JJ^]8*dLXf*o!]B<dc/Dpo)_:!t3Y/e'Uf9n1a3n'FHp5Ztdn`S)%83`Cm(E<dVF@7ZiJAsZq059`Vms`E=D@>3Q@@71(bTP6?1f^/*?!\#c7$!MDE6!a=,ttSNB=G>U*7,ht(=i.:\WR5NPc<o`\jsf*%RGI(H^u]IfTGZC^Jn5:A#(XmF;=l0%8B[3&U2>We9smbR8E'rrRA+c2lo9AS3QYc)&/kl)8oemh8-NMnWA2As>MVCIN=6^";%@`>%6/\q#hP0CTNrXI!L%Q(9jR_dlP1$!p*P\^[m0ZA,0\Old0Vl:1-B`,llil5!Us&qSIa$Y\[QlJ6E0P^-]1EpK,(\`"Y&drRTfAL-%GdanKQ!=hOJ%_='*DD%*VMj]kC.cZK>IQL'hI*hliZ`Zr947<I;GV?8r2+VeA;o3&9=Du9f1^P=#=#X>!aN'X/2<mZLAb"Gg/Bt6%,8e'=SZ`p;^!i?FlW(bC2QkJ<O^soW8Os#o5]fXAAlHm.GA5UqVI`><I,&AP4`Q0Ec8Z/Hea&LUT<Js6![Q1PR$dhiK:Ob]H6sjf%VRUDO%cR5P3"IST0)Z-lH0sFGO^QdcO&u5]d0:e(]gkXmOb^/*HSJnA[8G'p5p)@!JE:h=0;]!X0qFa5_dAPT@O*/2C,T;V'W_1P%c`N?c=d2A^`Hb(?a`?T"D<noIWGK,N`n=0^0?`<i&@!OD[$9?nZ:HGVjXB]4mLQ(!\;Vi4lB4MCM'JH+1lhlA-_^@&7([',"G@.H%9ZaM_!3U$7dit.NrOUC\$K%$BG+oKG2]Pqg4>ju'RQ-2R'\(bhZ<$."jq6#Vp9#VoK!E?q3h+9Sg*CoSoWrac_7?RnO^C<[h#=CJ%Wg\@ZiL\2dkK3YuNJ?E_;ogG*ettoXFkmnW9nF-L48)te$[`7P+m`<)2gWWb%u?h.YR9+L-T"g=9fN6N@0:(K%GRrr'^[C`2GIrD%SmEU"E])sXC8*afZXu8WeJLbe-RjO'`BDJ*$-'an^*GAa%I[8X.mBF0Z/K=ie-R!d$>N`$kTf3U3`H:"O%PesZFs/7f@U."j=C(I%^"Jt+=$G:1aZmrY&Y3N0$q$tQ1ZI@'aq%2!iJEcc_c'"ekluhqpNHt'X;7sK=.m9HG@YUYf0uWu$O-q-Fp!F(=WnZf:qr)geD/c8%7V472O[7`5&MqWb2R90!=cP+2>FBK.MU$$D[$>.uC;^0gCg"j`?ujpU%B]cQASX]M<M95EWgcr?/<^>X8O?;<+Ap4oR_dl+6kud/%R3>b-?13+`(aP%Ti]&;]k3?KCh39[L@sd2!fl]_(me=EC4GUV3*E"W<q@m+>@U@_D'#bk&>p,#'&%=bQX!GcZo<n)Lp-%DZ=#NKt%:(3I3Y!?CG;1A\$:_Z.^/!\U9i6EZ3h1!bS%8DW&H;=np5tM;k5RTFXqLB?KZWf7\Cs9<:F?*-_E'7130LqstIguZfb4TFYd;%:J%h/DCBM,-Dt%X=B2U]`"g.e#[cLqPB%7mp,[5ZXs(-8))[G3jMka-;OC."V*roPN+lcD(31$LreFJg6^.U-:)$?<bN!+0*K&_83LK%2;7&L//!oPJJ./-;uVLs5smOg*&1HH3mZC)`9hBGTO_7IYEros_J)5OKC0>_8HKW;fo5_<<SRoM_3SGW]46]IpJ\F?IFK`MrkhlC%iiF/mZSqjRXN`sjCKm=:q/;n5rJ,$&qtn[mO9>Q,iL8<&!u&72a[^"rQ6,WMl_\b=>p`pQjmKSZ[qV<HO?ru*Vaj5;$Hf,tj!Bo&%j;C&*\d,aqgaQ1Q&W0R6m$pq'hZI0k"4ZTm+CDJ.^;0^eh2E[$R7gHAE:s9XV0I3!:Io%$6s)3H#0#GpZ4p&-(1c$K`7_4`Q,0>h%@Q6:iKg8h1-=[#%m;k,N=m,k$"Sb?CTEp+'MeBT)C9!'NX0=,_:3pP;3n8^e3;UZUjQqr>9)FVpL*l>lh]RO3C_PullMl/rkci2I%8d6$+?a6^c"`Elhe%D?M2!MH*i]2\iTmgNa"W0(@5;nJA^[[5#.D4WR\A^hp;TlQOjX$a+Ej73>>i/ap\FMk:O+GSGGLBH*0M"Kk%$Htc:eQ'UYTL)XM\I6JDA`DCl9f$*Ja,8tqjI.8)4S>cFJ*JF%ir6Lu6D]8G'dpHH@aQ\GZW(7.dMo;t3!%*/s)6fUF-aI*aagua%J9cV=4[es1i2'sh)gcg^p&&/#F#ms<G0;KY\//=\!QRPg<?@)`Ge:`g8_)JbaQE9o_LDHl"9kLBbSER2+/qZe@)RJ%gP,8G'tS^l%p%V`7I7U1V!`YG01)_F.6c':rlt1Yn)7S7mB'I33:F_knq)L>fU>.X<.[<`!ZU-_,1a-YBj*\TWN8QJs]UCCL&G<S9D+4"=b[[N>%(r7qj<;L#&5mDS\ad9u7m,C,!&m-oBI;TX?j_KajMQD2Or*AL+MIIq#!2AL_%tfceG)1V*lmIZ[ZGc>[J.U?e]_R3^HilX)<:seR%-`ms9_\@fm3Oj%(GghQe(oJeD,m&kf/Q[;P6&W_UAI8@p-3"C`n.kiAlX0YKDcte#X;E[+.A-Y:9jTPhr.7I2,ee)!&p9B0Xa1To%Mkj0F'4D?N!?r)P(J5W4V([S)(Vp_].h8WK,q6J[f1K:F`0L1>[1)brJL\dOcm$inS$iH>&+uPm4E4NseM>[>(q>YWnMobT9L#gB%]s;O0GG<C@Z;G*@#L7Nn$m_U>$WJ5j<NQ\;e.'gm/Z%)r`l@ufrN<VGG9e(8K35[sK\6q]'"O-^WfZI$lqh]ESCN74_c+)P=faRT%ei_S%J`E]VY3p40bXQ5B,Y+,7dHUjEUIkk$D+RB-^_m/hJ3\e-$@F^RCh]VPFWgQp)+:bHRk>RN^MiXBZ>'S765S%q32!bEQRN1"%7(A/.L]i),/Kb_.>k!A7U%Kg0"_?oOc/kS8:/Qd1q1gEpbI>7an)*^%J,3OPmGIp9fDkUf?N99iq:GZ9J,[K<qp2J95H?(h`P5/$%^0fms'(-SkdJ_t;r24IO_:7&eH,WW-#!]@BV.@]8;sktsCarALp%k"^^I^5a;bW]MMKS(lIfE!]2\@af3L$POf3a"&;a:&D^[DCN%KJ".O6=`fT'`Oi5i:WGOr2BcArFT8aFJQen:4V?F?QFf;m<&U,0R:'F1,4]ubK/=aX[''"ff`MRPoEV^>:NG8l3R.+qK0mQQZ=N1%&CU-?9;(qj.8;HR1.9Zi62$"%`RL>\LlN9aZN1\[kW,W\Pf8&[&1/'EDg(fUiYDl,S,IoQZ;/eD*4`.'K(`2S$uAMscU(Oh`(NKL%mJJC"@gRIV^=7lFJFoZP-)00O#no"E=A(kNQ((0:'P;FghWR)gjc:$)$ic'dDj.MZ<0r;@kbucRDnB6.Ucb;o$ZfW>EkE:dU>3]M%M0HcYX3=n"s&/m*=q\.5mI+M:Z2ldnKrFdGd<NN'.QC?$5_9MHGX$&U26nq`SX,B0mC,`^3pEd<!g`H',WF]mefD/)Q[+BiOdqTK%Fp-3S:9<m36t9A^5\?=?nus"^!+Gc6+RI8]*W0i\DMWO1aD36j3(`gEKcq>[%:OQZ6:-?S>PSu..B+T_l1IlkR53k!+KJDig'Ecg%Q4-bfgl'C@ls2c?f\F.(3sLfc1IR!C^4G\r$lgF[/1J/N)``14[5_;l7f[V"oC1KDNLDLZ6[CEN__4V%Jp0T_XtI+1h@dDaOK66!%EX=P6--bgVSDm'T!YP75EV?])W;_r:9OV`e&3A/D8I8/2$^*.YJ8-7[MlI`LRNV,6d;$V\W52$eljNnD;EKK\QPIM7b6kSUOL6RC%<AZVD,&W3I9!^'.FLBV6[H&.+9]Bb%g<<UnUlRltoZ&EZbO<k8$I$;'M###b98LWG0brj?p7[,O$"h8GPqL>9rou6r1T6%sZRWmE%r@eO#@Kba":NMs-NXeDYimag[D<CcC>1i\U9"COVW#J^WS'l**;#ruUVp!l*7:C>m#be"LiT;9A?NGRlR]!%$:iP!]<n"-oS7O#r%i@?IH9@P].IG+.]mk3i;jbqQJh#+BaJU1?g+Uk0\A2OFWK;j^.aYWRl+Q9D6;VuW_B"qVS5@(D&pm0fq\sH5bQXOE=;0rPB!&__h%=h[]lF)JQlEQ.m\"HZ5ZlYBhb6:.f=#J7I7HYf6E]">VUCqs1Sd>/U6C.^T1"Ht>=4:YWrSOtWJCDE^OCo=_*^j&'<E;$D.7A/B\%f4-(q1+8Ap;KKC5R4G`DHCP8Ir(CFlO)56m>P8_EWuOfFPt[4$qDZiCL:g]5J`)Tb<rP-3Zp<Ps9(H/EVi[,+G,LT%V)\iNjR-$d%Q.^n?Bl(DM7(>0BnH#I7&Q,@cmBPXT7?LlH"[-NMqgig]%"h*Y26#C_BDD.^XWTOMrJ+!62EH@Z!bJM_^k%3n5%&/@=.<_s'?pUS%=<0c1FaGE"4l$m!TiEOo)rt_M7$T(2<,O#Wo^gHJ2acBk6Eg2*C_u&\Ku:F'VG"r!XQk(lR?jt\0E0J6:NnS+,eR_%%.`Q/h5;9)%/AId^pCku7&cE>WBPKd6ju)=Uo3p+,iUh5K8Fd`F$kgo7\E`9Efud)+`*S@';jCQEagPnS7M@:9/;@_lRn2rZn?Q217D7\-k8e2Y%D[G%aENNp-3q\h.jk[(WHuItN4tM)N,u)p.=Y<M9Wf%)Al<f^?_,=,Sa0qlVUI'p_YD8FG>CQCF,'e\7#+WAg.JrL7#r'p_GZ2TE%]bRs)qNMeaWLVHD[dAEd%gdY>8WCDLMSMrk-+dgaRtt7o:BI2lY4(u((EKg88o,\-WBMW;/Ya.2%2be+(%&QFguP1rl=o667C-NM%ZT$C>(9M<"s'Wm;-`\8[:6L!--rX6MKJDk7^BgpOc.Jh&__m;B1:qm*(o/KihcC-eCS<nu!L[%ueIn;nHMIVmHeY[.;/XAUcZW/\%fsMo4>!h(rb[6%?'3bDM2k=aZaWT4WnI2?>V3,[sVt%5a3CU[T96D)D8nd-6PmRO_qpVK5-O[-Is)1t_g=5JKY[!"OK@kq=N'>Gq%fEaIhX<[EJA_0BT/Cr<N?A\p-He(Bjbr]'Wiac&t7M['pGr]:67U%bYP%12Yi>sgk^u]ANG;Zu`_uDR"$lgfaJF&WIG`kbpIc4EC%!]5G8VL-!;VD#McMVSArC%1'Bni1"KQ-I":^lV/:-qUr,OoM3p<Q%B_d?gD\@tt!_%Sp4e&5@)#X(o%K,(MdaJPinLO\jM^a+X[g%o,8Ab,H9HF!>f63ktG.YQK!(CF<@);in#?4*$BSH0+MVDd>;<-Q5aQB(bC8b1Va!-_C:0!+6,T;A,jr^IG@9ig][l7^Mt(gEu4-I%G;9)dm_\M9n"\P2:QAn&&?GcX60sIOp80RGJ&GG'Ii4D@P=F\)"Ld(OAQ@uM(aU2KUrc-N[8$Wc>SZB[T^Z'M$C8Pe(-KIh/\4,%%KuXPfZh'HhBu]@SW=]qboq7bQ7rnMWMMkloB3XRk]i2.+X=gf`gnOcJ&/>X!j9JOoE(hVJG@4bX8tW4mZ5Lmq$2>!l:FM(eO:oC)%hMEI'c2-B,:,Yn6Q/"/X2@/$un7&U<l`4[YLS11!d$%?H];h@8<k'4qViD<=3Wmo[9(B&9LYB%0:4K1[Z?Sqc*(?p`bYOTRm;0DD%B\O<2PtHj*_+(\N\rci&USq-qk2kNUfe%:n$WDp1PYC:p"tLM1?1N$]j7)o=rPCc:X!VkdDrIS$>]-PRkuDR-(FX;@X?m^I6s%2I%R]l'X>=OXKpYC@&$1h"h.E:#\qUj<%Q(V?*'/HFIJG<g]`/K)ALIdt,8<`On,i&NSS`Q+!jb9[m`G\c,0X"%2=3GPMKahg+p3;O4%KSQqn33DEX]b?(rF?ud"!(g*]<+?Z<Xs<G1BFCD[UK?IdF(G,ngP&T;BL_Jm7X.EqJ&OfcZnJuok/qhCd?Br1Wt69u/eB!,\r4@L%qdg.:G@$MsQl8^mj#h(bST"Z6R0`X&'pErdmb2V?T.Mg-:gcQU[:Hs`)*T2!,dha)*eD1=CB\r3!E3_bo\.*"3_g=f>qQhaLpSlO%p%PBE"IMEnKi%7oJVAE[CGo-HWgPEkYR(r6Pc>8jC/gFM`[R@?`Q.VoP,7Hg>'Di5:hHYf!cKeR4ub+$/Va5d!["i+b+NV1C_6r_%Um.Ndp(D<NC'go:QeP##*CEk(Im(er\2I6Zpa\'gq8=-AM)"_]N%r=:&7`M9[TXgG`c4?&^D16PZPfasE[^mG(umQQF+F'];E6bZ%R4<WSf5]BhD]jJlN[8H1X+KRLYCj$8'b&16Kqft'@r-,g<5h(@C1>[PmV>E]I*1/*hsaJ!S/R<S-TNWdfQVa)Acp/R^eKUpXWW3e%&:Q4%Uac#g-Iij]@$52n%L^(JE:T]c(#fLnAXjQhn=)u\3[h(D%BMmo9C*]^+Gd$RbgP'RM*OQL_%!4;TLmb2H0rgE+<Z?HM(p$\%Cg`g,h$BD2A(ti+WY?1GpjPSFflZC+#[,gjQOjMR]3OG&g3TfHpKqC;RH+eFNien.4@<kUfm8Ca<9dhWpS``dfGFcQ>p6RO'h>UL%qVF!X96>>f5Wp1o@Po3VO[;Q/^.8f\WtdoH-60fm?WdSrL[mA*A"G<H8FPF@MIbhH)]@=$\$/plTn'6EK(qt71tq>TK\MngV54:;%5=/P6'-&]]J=YZ]MrAlf=WQn?iKkjei5PfL'a;YHFS/jhF+if^PcF5ASF+]lfV7$@\Un;_MYf"]@g:\"e.AngWL,9aK2:bG8ZeL6%qZ<B[ZB,=+$rb>^0Jp%DOo-a\CnK91`%S'<c[Nja'[DLYA+>d5pm^hj3D)C/67r]f0>U.#=(,:U'Quh=*%8m-"A`rcNCO(&JDI=f%a@("XXW#L)'nJD"oje-JV*^*o8Wj9D/Bo-+/hAU_o>8lgc!r[68n^9mM'Y5gejPaaBKDaBe:HTkYSQ6@b*:@b_]!Gt"Wj9Lai(@^%d>s<-bra%R,kpq4NXc%;Te7Z47H>qpZK"`%]V=eIZ@'FA(9*^*kZuWE*gIKPaVEMX%Z`&N!"JtE.IkUM!?A`.[LJqMTM5(F2q\4k%(u&RX'O*.q#G;NBc^^m)76.'?6noqok5^:Trd9P@P`At@3M3unki-Md:LmWckL%EA=]::g!a'<5"K24]jcIj.QVjt`k-M5CJQb_1%#QkcanXl!4&j:)eI&/aXBN`F'_KA`8,laV#PiVe":*,hNM"rU/TdAH=R$Y*NJWi6j7E.sGois]Uq@nc.V0.6MrPn[@c6FU2*9NG1%=)$FJ6U'CGOVVn5GR=>Z>):9floAif^_j-.91p?W2X92F`#;eSZ@1Gl,HSanS66(t,,Bej8J:FKX'ciI'rb(0\3'>;hSrai&R!NX%%WJ_ma,mm2Ns+/;8MDTYOIb3`k^1khc'`ON#4%L"6!\qsB9]2-.O:)-?L]^`b2W@EpeJ&Y]-4qRd$b&Bo"8/S`Is3h.a5D0!M_p^%,)cOJnVO4t:&Skj9Vu0V'C8e_OZd@"d[/[]:OfgM-;.WmUP5ES*AC*ZOCl"f+@,4RP=j_>ABFLI&frR@92&"_'B,+CgBJs7S$H/@%Nki_]+[c08_>Z$2$i<qT#F^0=-Qnn1>VI7L#B(c@Q'FLR)F:K?P5u;R9bXn6>jU-?>oWU+?dGu.(?`7!Z%^bEJ,JA!$tO>a;Iri/%gs/mqb:eA12uiICr?a[=Mt/>X,2;r:>e#M//Vbp/>kU<-GrH"-Q7VYa<Hnfd!8nQeBOYnW;#`0"93tZZGGiMY[$:@>L.,i`!+Do2%<V#Gk,",!hLO0nFTW(U6JH2G=q<Tk)SHq>[hN?^JhDtsAHB(@tfV8ZDUh4<MM4:hnU_4X/$sT#BCb3Ft)%.Qe4es_EfW02-CuBBm%ihXZ^..(i9![J;HNGH<6SO=2P=O^.%bf`^e/TjR9%h3Z:mc;>&jsVU9.ibF[&\;IN(Ah1RVTD<m61s@mUo6>@33Ok<I@&gh]Lch"%O!4s9`<o\V"IYOl<Mk#(WY*35c=3VTb'.M4A>hfkd3s'Q;gM'e1M!\*#Tm##LXIaYAZDS,:sIX)7I.CE:;0%CKI]qs,fkk;,t4(j%U+a?g:t\hqWG]0qL?TJ;.d&Y,U?53RQ)6EZPOt81i<gs#VP$@XY$tfMTN>sMnj4Bu1T=8p_gI8p>86#2(1ndZV!YGIBl)!L_0sQ+%>if>uA+s3Yjb\T@c!%c"a\J>G.l.H4R"=d8.HR9rn/#a`g/L^BKY*tjR5.eH)N6(B.)sl"<qX4[rC]CD(>-B5[65j\VJ6'Wn/nP\%Y["aG8<He,fdGrpMpd/0REI"(6P`2@jBpu_emo'tJRtJa#Aic$+'.[VAH]7R)uE;qjScW]rQF*qZ]R`"*MRu8+9+FTfDPn=#TTH<%]$o!Gb>,r&T:6E'"4<6I[6pn5c)u/.Mrka)$9,R@WTYj!(2e:aYS%`p+$7*_M/R%JF?P(rV9;?*4maF1?me,c-al9\380pBQnY=A%D5shI.p]jgG.!7iW,c2eP/AI2+/X2bVl3HV_Rk!!.oP)W41M_B"mKPk3].bgFp/$YX&XT<[4??A`XL>-YdQ'h1LT-V0VhJO6ki_3%^Ui/WZW?bpCN*A9!"_)9/aeK%)91EZ0tAeIReL0Da^%c<'dBd3k,sf-Ke(thF&scsD!Pq#7X%:8E<n^_eK$1BCKnNfHJK=an)_FW%@s3VD$HZk>6+Pg:C98%1^5q)UOd+l9ca*&P/&]fdgFiEln?)f@i]hf!mu#nj;Y\@fiuR(rNSXU1@X2%^Ves,^0:mBAC3?c-+4E;V%;jt&cO6[fW_I:mIDg_"%q!5J<I.)qLefL#:)rJJNCAi.i]?YWMF]StJ\nc^A.Y;5[*q)0/(Y/'-=7\MRb'cL@Ac"Q?(?U'oZ+n2c%S6g_!lLDV>P\dooJfY"Vju]-$p%i-K<s2I,%.4oB]L(/GNps:]q+AefPgn=NM[a"7b5_3a/`D=`5R<TOk3Ip;?HFCOQ?ubT_F*n3%)qT#0n-VE:];C(jnBM1*O##QL_o!FD6;NVE*,^#JKZFZn9_dnD]nnRJic!q6<taSJosd8A,9GM_M@Z<6[_s][L@ih=]Uj?OX5drU%S1gaa))L)4_W<P#na]^Habnj)(bao$?c(1Wj,B>d<PR/A>\&h<#.7/gb0"th6#aB=UbCkT))'b_?C'1`0;#$O;/Yb\f,bGt9-gTG%m.'X92V7W-CQFhDR6?#bO-fBt/ag`/%.Z+,2Xp88EQCKPk`W.kMnF,AZp[6Bn1i&.=Nac9WfKg0M,oMmrpPnB*`:ma=l+oUT=g+-%Hk+35CQs%k>$+h!g)!M0)9Q8@6hZF<*ju*6Md.M:YIk:"G"-iYRcS7&7Ifq'bL>[85$jW<jlOGS(@C4L8$;eh1l";5H0>%'i7EcP%jd)fk)H"A_L3_^lYHQ",R!1/%Y#a%L_D2W.GM6gb7tt[5Gp`qHYO6Fuk%4J4BCJ@-1_0n-*jg('_DX'jgYQT?(Z2k6+FX%+H&V@?%S7:fhC;tDAbIA@DRG-\kG:"e93nLX>Fe5K&$6o!4cI;D-c8<;'k@pn(k7E]$hH=V^5DHXQqn06b.6.RGnaXpe.i@!W\.D.jkag7!%ZSC8OW(MgKZgqL0J+:lI__gt5Ze%UKTJPXSs5ThTP2sCDK2f4;?:g=M%!TDSd45L'birs9)X63Aac"Qar]'-W'SB<A19QmK!STW$%)d_,hYCOm2G&`S0?HH*fF\7#*oIr91^2<L5\ERG?GZJmt5l\(;/&8R$]AD.8YD@#)*eQEilCF,p1;J3n5^(X-F;g%%S$/[F3SrDT%r)g/#*\J.7%VcDY;`t,[,p85/X.CO5nN0sg+t7NXi\/;te=!o8:`a74fHtm.qg!PS("i`0<IN*aF>5r9iGdD4&RCLMYItu5B<?2-%+:RtB,RcWE*f%G'AWg=*^(u&aN<:9A?Te%>Pl/E!m[EJW6&$BU4YD(M`RP?hI;JTa`LW)NIZ3tm<LH$Sf&<u;<3Ql]lc3bDW#9-%%iT%=IWW]L&A(PP#cpTs6]>oL0\%RCN9aYKgm.Q<Y:TZ\R)"&,APRXZ.Hn>"!-c/RCQF^Y==&>@A,qSu2GH]*5`G=[I]N:P$6N+?r%oq'*<U=Oh=pPR`GU.Y'fmhLlT)T^KF^fQ=?N4cn(H\F/Oc#kNr@DGr`_b.i?SC`=q?n@N8\i[&WplLr!DVei@%MM#Gi)tUkp2RY4%.E,If_S%jT9#js\YCCrpPe)S)n70C<THiOE?GB6_7I1'L)895C(!$Wn7.DP8p^3lpoBMNo(LMaOeqXW_+"og8E"nJk[g=iSA\#^o%K#`i=LDdAgofq]:kJO.,\qOnSQ7rk`"3g=@GcUu+rQHZ![&B>mddFEY,e1'n5&>=kWb68hQKH%qc&tU\f-b7]XZ)&;E!@J0?K$VI%W;;JG@,^FR(4.u[J%Pg.!R<e=8p_j_RU+a5en[a"mpqD1i`"QL<p`-`jYL/`L_R8"2=@FsNIX\s\_$$S<83Q,"Xes5=-tJZ8rEFB%jpSC;H3QRA+hl6hY=_BU^OQd<>nP#O\i>Cs(h%'mA6?DrE^oe&.!$\K&Ha8$OXeodpjX=2q$sQ(dn%RS]j)GM\#iFNnE>g+Q#+\"%Is*RYErR]9iRGhOW"FZM@/lbXS4Fg%5oi<^J7f]J;]DBmIfi1#HO9G42f]Z:eS'\+'WP4WChh(g/ocrQA-1M=F2'ks"EFnFDZ$$W%meQ9>R<?C@.SKNX]7TtS1T,W2aVMKk-&sAbF/G5>`(T#N<*n1jn0Eaa@tA!Y5e0*fRBR9tN7So0FqdLX<;1eGQebVS'^bT?WcLE[%Y;I&I6bR!GejGpdhmXn(af<J6qdXB[(\g=jg0LL4/LD_E>^^u(KkN'Z74"FXCRD)%TL-lq<9[u`=q(1EpTi*Bp+=?rX5.",atMG,%T)/[^o9"fl1&Ef'+(1dk"ZgKbG:"o,K!=7IY?[VdXoR%!Skh_I9*r5G=D/k(Z#hr$0jH9hKr^NAp^+^#r:DG8ACuf.b(eNhMCj\,%U$!#h'hT;UnrQCs8Jg@ub9%Qm'AF8d0=sm\<4M-Th8XKo@ue_r(KNER39Hio%p<k:,!KqZ1JY0n;C%8D7^q&[p'T_]0SR#K";LJ3%j,$$8rMl#'_Fg1#PFUeS59F;<!$?g[ml,jR[kEpFHhj7*^#sk\RKBJ=i\mYG<SEL!hdgq.(`"usB6qmMH?'/=A6\S4A7r4bel8Eq%(EZQD]G'e94[b88bOl>(^%E5sm+7[VD3SZTT\ZWY!]r!r+?U[jQ%jg8O26^LP@eU`Yr,?FfUaT]HGPs`n7c_UPBnYRcqd1)'s1l=%6+fJu93`tP-p?DF^-s;9ihekg]/-]E.sBueZmcd]PG&.Z@j0$cEk4ZH_rl@qbo5FpEqh*T"]XNhl(I'\OU\:h`!,'A)Ja/t3OZ$A%"2K]2UrY%%5+gt&dk80!L''=;+eL;3?\eJ%$Zoa)]'AV8pe0'TjD]6%P.7_/T9^asS\LH\<9c[0<k_bSCA8CkZGU%U\@;A)9E#@_%6c=&kE&m<C'?LG@r>pLket,6_;Nl`@$FTi(?R6+beFR%C#s&m#)dbd]#KkD+Ydh=eV`b;&e95bV7(CT[Z$D'i*]X^&c1[_4dGDP\%L-Xuhb#nuTL5Qb>c&`jXK7JKC;fJC=Vp;bs[V>hA>>ndHBc0M=ck3I']59u]N3had<.Y$<=7i+"fX0"?(CX1B_jP^BjEeXI)o<2L%+E`>Q?1$\T(_f-o?n9#O>iWumLB4:Ml%"#3IdS!cB-#Qh^A3$/'qsXRr;E#A'pu^Xs40,)1M>TGpg^W(F&ZCk\-q#NY=Pbi2H%E#%mgRdJk4L_3n[1DmN'+arJ=;R5\D$?<3X;ZgOWW%=3=KZb#.*cV).>fH]fL,D[Y4mZr3VI[@rJ=8.-c+#,K)Afm9os.GU=p*lJ[DA%f1SE]2MF0^a+dIAiF1d>a0AK-?GA]?erGV"]+(:E\3QYEDS;S7a"[&m_PhRupGtr^h/)CGIPINa5SIFe4"N7[1WTS2,d/o1<4tlO%#Oei;QsP(fXs!'dcX>De]Ka-!>)g5!4(n^k'tAI\:Tm\ER>I=dmuO.ifH``$^8f6No*eQ?XEV1bN((s.fP\3UC+[aP[bTh')G>2P%et\HE-Cr9!3Ce7i)3+0'LPj.G<;Fj2n[4EFC.=M*cgW_"1KEO:`PL)7\uGmL"M"!^c`1M-=f:tuE`HT#isMsPX&Hh'GCA7TPsZlk%5<ME@k9AuAqdAHJWpX.F-lRHFC!TO%;M@d&@:OWg!JPl<?bb@%)aJoI7>3NMT-o+k@IFm_\ieUhQACNr_Jo5X[da"c3:i`XEmOG4%-GH::-ti?o_s`qnogVH41%:$oJ7ak#@1EfV2&Uuiqq)@M_8PUtHoHG0eTod`e,*5aT4.5Cm:*qd)ENNC3%mI$Y/k77>g2kmO+Hj>%:*2Qfn6/#"a)7r1+tT/.&:iPoQOiOs2a1K@^FmhL]:H:M$1,'P-KBg<X0;F<7r,W!a.c:Y)P6?(q0L8`op9s7ErY[3eo2!A_/Qp8%"XN\N*[bc0Bb#WcO(l%?/+&+o."?*!r`_)<XqA.7aYl*9MeBL?X.m)ta51%h.X(C'#5elnXMZ]OiTEdOI)a>>Dt,BDPQ"5UT@B:R%dDs/FY2!lK&`@p0R\.^E_K[d,dR$jdB?$/EPOp[-`Nq`*e,eYRYiS:c^?b'\AHuFH/DAXbkf$bAR(8hDb+7BUY35["r"un-k4%QI%ea!kIprMJIa+!Jg*IdSkW[XJ#=OpnTItlQl0g./_MES+H<Ogk#Y?HK@J;?/<Z`dAMV^+jr^SM39_TSB2BLNXcpXlPqUlBbGehC2Q%U)s`ad/3JW%0!#7F[P9>E;-rKX'\&R!S)+G'O94VKO=]GMbSSkM"?cg'fK+JaE6:S'b#k8Y[5f/O&Sfcn:"Z=CRcZg@iJjn!a_r0%ct9ge"rEgP*MfM!Z+!Z6c!B4"59q5_jR6@(&u&Lo:+u/lpnd9*?I@uTQ`"bODioD8MW*.B-_^gPmbh6;eT&Ka6SmNW^:QFK?T:&J%1Q%#aCV>@i&4@hF);S6PR&16F#uuZt*o``Nd<8<#jLD;m;OKU[FGe\04*Y]?!m"(\be+8'SR8<+F9<>IJh'M6VU5r$.?[\uQd=Z8%?[60TH78Jk]A=$>"gqWHH;Gj]UH\H@T6Wr2bcF^$,@)Z=>!q*d`O(4_Y6a>!@)hXFIn0#1Pu`^1@Pj;'%:2!gY91dG$J9'3Kj3IO%6g<%5GQhGe?P/6C=;kNS@$EZdOQXBg"d_ho.nkr+Z*8>;XA8A,+GMpVEqiF[b_d^0j^uWTf=8o*f,NFRJ1RC`m7?c*=0cpN9VqO:%.O3.m[j.a8^T;`KXguIeKN5A$"j?>Pf@7?A@8lL*>F@\l1`nAFlEQ2sT16!\fLZl9>]YCRY_NtSL('+2?\V"WY'%@?qm]f+Y"%%t%L[DLA5gU',%bZ/3\c9rK>O:DlO6*rj9?VQCG1bE=S+h%H^qBeRH1PWP8b[/jq9:J3pBj+Xi2EkKETJnf0C":I3Hb+VUQ\a@@pjbV%adIjX3S8aRbb[%26\i_Kr!/G<DWserL^TLYfBH`h<u43+>?>N2;1lh!Y$Qf<q`N,-.L?'X,+2.a8$5]kOd]ilg>OD[Leq*TIXcJ]%.ia:"rPkR*kd`J2-[S@.\Zs,UaR^M&ZQ`i'<c7adBqn!OSR'ltCt&e>jJlXPr>;[PSRs0I_o%qFE#;#DripDm8fap?R3/aoi;ug/%l/Ak#/)#^/ASh^K;OY2+:X:Y@jodR^nH9q(3\o>&h"Sk!0%,&qlc8![o?j;sNu;79ma8Q@CRJ7+dG:qG0BRQ^7Y\H[R.(ip:"u0%%A(Gi.`L1ijnRLlT.o`N)muIW[Ob_Vt*so-d!lcp1k!#r"lC/Qq6luLt.Z;Z-N@GI:_U>i3YMY`d$5ct?_\rS2;UBJ91Jm=5W@Q&4%jSc#LKVbEjVH7TNk)4!$L5Z"?dTBnQ=aBeCT;+ZQ26qaOIQV-4nJj&dLWIoSl`f&i]HdjhFOdh-f5jhtg#ZW1nYW+jF7._?aH)<l%l1IEL]S;cL.uX$q?"Zh?LALhg6PFCAT3TsZAt']R0n$5UV['!Dp+c(/n.(f4nG:XB[kcEB#o\<H0+g(s6TlEh*nP'^Ia#.h3g+7I%mQ_lc;@R9n#<b8K]%:[C]Z1TV4K<P[PeVI@lG5B^b:m)L$g>G#%51bqW"Q8_O)$8B6Rq1=[_Jl_EXmhGfYA94Mqq=kEK&H7;.\?)%iincg.N+6(_#@Ua=s4$'e&BA4[U=40[L71!F'CbSBnQ3h_?UkZBR7B6%):SL%8Tee^,YEojL^&)n<i\\+^_?In[S7X0"@sWc]>>L%6*9lt3DMrY".2,0nZc#a0FKL"56h\oj""@;Sp$cO*JfUbRO/V0<lKZ(>b_$O23*[d\r2(9O+mN\-;Zg2aUEAn;m)Kc\1.U6GmLMB%?>boWF<p?qBeE,C4Se+T72O]",5L9q>ccrQ_!SC^eiC1U[eOG=4u3<!J,Q6e\@2&Efts/gaS%\[<AoK<Rjpg\TO+g;+0TP:`$ATm%I?I'iHgS.^B[.K`=P.F/oH$R$O!2!X`u@+o\@Y:9U4dZ5e11o@_nFT9"Ko4&:TQb1Yj`&K?k%%ca'Y?F*!I@.>pJnal\Z9rL+k11%,ao;mJ%X#`jehF$*uf;rc?m%P0>1Hg5LTAJ>$[>@e0%_D$[_-d8;N..fX5M>'LO33`pO"@qM=FuFauDQaO/5l'OME9W8/?Za&HA8%SFqh*rps=#bH'\"eEba[4uU/Xg)'C@S,8qceD**ZfG/QHh8=T7=Y+F8W,iS];.nAgP?f7&L/nkLd2<gMVC(Z'p-W;(F2Y$Jbrk;T%39-7M/k^1S>MhfcP>^#`P:c)!prC>"l5naNDNgk`]!paB,qp@rf&8c;#Kogae[qU>7jarS],i>?#qm,V^-[Zln=Epd59CEuUX\=0%DV+AQ\,9=WE7a$TA.Ne"Q0rjb#3K&pmcSZ,NmS-42*RZ!q+db_`Z2Rf9:.WEIbuBLmPq1[riZpS:TKNXOmFlK;MJir3m8UC>I(&j%BFlUu#HG-@rMA_5X3oN&r!4N`CB&8S`;b9hP1;m65dREA4r<(t:praX20+'FO1P2rEk<`0_C$?VRbK.&<UsL#*1WE/k`@"]=<&E5%J_2MF;+]3\(pX?KbY(tN$tHb<SOu;HeE[1aS\h'6d_]s3YY+4g@h:K^%6rrIp"^=XRHfc3\+^[g`s0F*02]&O[!Lst`4mfk=M0l\%??W&#?m0$>)cX!n+QSd`QNsL?V^Eq'&L;:tgQ[DUhX@]@YfW!:N)*tnrO1]J!t&]7DlEqj(TK_PFJha>_b?c4<:/(5V'tX.[L.5U%G,[&c#fXO6KKm'Kp-ea_W'+I4Zn17$m3Jhl'0^JFqX6^1ibsI[0/R@,FMpI_,LXZlK9AN')sRgp48#)t9a.Va%]gI5T=Y^oBrYLu%ZsG!7_tl@b\4B#qEJm2rb(]$oT>'sRmU&SIc$(;gUD$,*^"jppY%B/fkGa>11n'A1&m)J%j/sm&Pae4fV>UaA")UgThb4UYA'V8e%!+ATYSHo(P/PS',_]2ro0[qg;_eXqG+CppQI2Cj%2Uak'ECe6u8Y:*X*<X^<1jDt$id*@R%YLUX9#-I@$&r1!+oSGKm7?>?7,gA6%ik.TJA`sZTR.5e'[Ati8IJQT?bj>`$Qts]/L:4d9=G]#m9[]fjp[Hug4/?VB]=7V@'dPdF.+kI.NJY%_!(h5\PUM[%0>Z&jX5(G*%Opql4I>[GIMfZDQ>%]fuGdt)0$"ogkrR9<9V41R?U`6t2hW",H*9.7dKAf^.K?@7;1XT,RapGPX[90pJ5=0nWe["&M8ko!4Wb/iG%9$of"TiAjuF0Wrhm:iLcgh"iS3&4RfmE=]PjA/ETIr^Wo78`K/nH_rPM*cAc?'R'V0Z74OVBni<=4jTmX1O6BX4:LpkfYoM(jcC0%Ysn[nSQ*J#Wo@=^,u$.5r0/Os60J_=ck&T+7r0Y2E8H1ibBXiK=uWZWV&<JR'0XMC="ZVli(-]2YJiu9B-\H"godH2/CTg3PN($:%cOAjp),W3Vd^_M7p7<li=7KD/RrOktcepgWV[8UI$,"fR8[MRp3?q1/$o\NJ5FXtg:DFE/?=I"?ll4;!SD]9P,IZKUCC[J(,kYH_%CsA,f;9!FL&2Lm17&Tg4)MD$:8j"Qd(_N5d93Y7da0XPe0=,,W`>K@[%rT@VP4kpM4(g=96NVqSbiblLV5XTBha\f[J0I,c2_0/)%h;q,J>["priOW$Hce:]MK?_V:X!E$#B2-pMl/./'Y@O8jm=U2,Kn"Q2I^NqA1T11VJuLEjVr77moGp@;GmbM#ejR5QJK;u-c*Ls8%/W;%3SS)n3\:^DMT^akO"b!.UC`9<[[P5+F=L<H?5PK,JT(k5u8R.T9VK:GY7mgnJUZ4Sj6R,sO#':Rgk9DD-k.93sB4e',2)`>*%OOWgoomk_];=:ZA%>B1WAjnTtTZCTtp&Q'Wajh2(%]nd`[q\`U:e(,,CXNXl^^9Nm#+&8V/5=?%ABLEC?][iTC>;*P%7e*nqZ,11%1<:4ekE;Da:j'7L5:IM'Wf@J;m*_cFJ6p3=;h!1hT4/$s:R4V]2tRk@*!0ZraT$OAd=DCH$1K.IUBUY"A/0E_Em&>e^D9rPha(PV%0U3>Eo<$UYMBN.GT0:?I&s+K6+E5$$S*JUC"<&DmSb!jSd^2`5LZ_S>b!SECEcPY^[3(IF<6EqFZOkl+"is7>2<><+m>qY)_qgp/%Ig9'biIIjDEI+Egg\(B4<(dG]8P%e5<$_sc&8]+jG[/cY*c^tdB+.N6D@E,$Z#8_hcfEt"PLFkCq&1]D&9oGRl,9`l*sc`8"'!9s%'rbC]C,_SY%b+Lg1rArga2GML<"l\%kRQ'@Y(7=OITa5>KgmLdNSk_Z0GV$=>P('F=0;gWl<?M!1a3$P8-$4iPTY5)(MZpUSmq(f%#B7V'*n2s[1'MMucB83(,g]-q8>S;4iH&Y<fMid:q[uE>2hm2j.tK/-:L2V7Oe"e%`8W`<A*Zkj.1#h]A_(R?UI+Y3*KsIs^p_W-%2hhb&91^*)CIl_j#V'$p8TbCqlL7h"@A?87Ib"Q9=d!D3@H[VA019IgTKH8M;cFZC&^f38!WgdV.LNuH$<RjmhJ-R@mAHn=:BQB+%ooL3"Tg%</ksE.FB$E)q2N'"Wq/4W\T_'"-&VPP&jT),Hlp0A#(#"=V\jWL5!#<Va\H[p$g<2!]qW&()i'mMP,_!LeX,tM2dZa:a%O)Y14<Et?R+-NTjM*V5g!2#!Pl4aTsI_8(D!i`^U]0.jIb>$)-'P6q[Jgi>h@-XiRIR+EOTdaHup>:VO/2;Fm1Vc%3`ut>Gh='ac%G>O1J_SPP0N=TI#'KnXkjFL8O`BWkj>J)I&$LHKf'p(<*]UB2OP+a`h?s*8dR!e@1Hmsa@pJOg'Z=tbtZ[-eWLnEhe:@%.YV*GDd%l*,LAAXP[ji5SC1Dh%q.)hC^'(R.5.6@mbBdab^4Y'Lu=kgEB"D86mc>mTcV)S:*bZ<Oi#_if4gZ@XS"&>31ZcFSP4!`O_kFQe$D%&&`f^%f;-meH9s:R1l0qC;7E%F9NnEc<rRn56+>R30m$X)1dN:0k7$ei*AUG9o5cJ7e8*!\2`UoOn1EqNY8\q[=f/q%oJEWG@B0j%a*iet5V?u\Kbs,DW7"0JLFUO]'ostQLj3'J2theY&"UCK)GN"(e\LB'jmpnb1eFL&A419DCbI)B$":t.h9$FY7^Zkl<C\4$[:>0Z%`62h;4P\'Dj'RJdR.PKerFG;(Q=KF`-",;SSV$#6EJ(5cnGV+go>3V#qnCQqW3P]Y0gra-kSd5iaCqZ1!$ap95,H*W((qQ[R<L07%oF\^,KKoT`QeJ4L.u^>0,F`2t9Dd.%;-5P#F&>fgn[rYe4c)UrDi6U1*I>4VgY>H_!f@r++?NF5'QPkYX(Hb-i*sZYk(&d-IU2"W%+O^1a=OZm-;G)-Q*48FpT=2meJ@DQu36Gr9[mcHFNmKB0ad3&l`'U.i*&LOe5G4Y"36n1EVWb<D1CnU$QB6pmJR+6)9.".fE3:5b%cm6TuHd&q\AP;:+Glq\4%Pf=J"nK_a]BKSjE0POBXP(17[Ltt;!"pa=;Oh,Qo`_<e:&g_+S3lTYQW3,C*]/Q)g#53Oh3<U*4i=A7%=bH%<H.tZ$`tl]npQAC7Q7_OfLt8m/CY4VA>L_,?EfNSjElnF,hFBX3kIoU^W)!Y&2+pc$bUGPn!u>*Q_"O)Y2q5KTX[2F.+'^@O%CI0JqEbiEa\8trlPR,&6p==E<!(A1eVeNN+LTDm8WijX;atW^n,c.*XS^64$r'FT\2g#tknA%'C4iIM9*B5\ul28?eNL64+=P?R!%0N'auR)sqOMI[H10_&g7OfRkiiV'+.q#%i=L5N.#E^smQhSH),K=#8[2jC=HMWBti5TidZ\0TfI*GMZ\Tf]GCoJXCnQXg#2!!:_L%[Ir:&ccXV74<&2Z/m1FH5NZ2>Wck0:DX)$IJdgbOU#``j_0$pB`Kmg:E3ineQ*t:$!GUSR0.m-:RdFuggK)T]L(*4j[ha1:acibM%#UNC^GX,'#V0l4@\V9J;o?,Z=3#i&N;pWq'6,dMCCs$jfZV&29Q#c^C`BD@nD?eidF?[T7:+.Tnd[onAI<ru3o_JFueIrG"^jG:e%MKh,BD*.42>%Im0A;lI4Y/2/a]g"AMlZ0+:DR'LYA$=n8>kQZ&F],15K'mcqIlfdq+Z)THR),o6ZC;;2@PC=39ffu9rEanG,%f;P%&f"O1h'.&eU[WY6_dt]@O53ZKSBukgq>P)2o!cG%/s\bf*,:_gntU*#@2Blf,9>+f66WYW9A\!9&LNoL?&qUEXt$t3VN0^.>aCIS%1ADio1iRi">2cWHN<<U14+b''E4!^U:3lt@0ugs##fC6TGE/)/Ps]HUWclsc$t=7F,737aG$JGK6+(fMe#f&\Tr].S#P4)TX`AO\%rh)tak,hG2+X!b,>tPN[RY5Ffm:%.[<$^GdYp>k8;^3[FeaS#mZ^>%*c6QaQf=Y\ghK9:crhE_!,m"[DCWJWa]1E_:If?3*GBMc8%PseW:@6sPJZUY>HY?%?nOK"-`,,dg1ZLoX35Tt?\75Ul]KuA^JW`"l5;='Fg+,,$oD]*gh;8`L9\cO=T$J6L90[r>.`XZZ<VNb=c%]Q7).ICg@U8HM^]\_F[B5ui6,EQYP):N\qn_\60R02o2FY)FGRQ$Rn(=LY3.Z:1=L;,U(5qF.[S#g#G-X%A.F]d:+hHB6OXV+b@/%>.[n%MnPqp<1Q$)b]]e*d@*jHCCU$2e1/"aHr&Vo8U0ueL0$hD]XhGbJ6W6gOte*#:8']r>`<"i4K793d9AusXJiK;XV.(H1ARk8%NgAFg;\;hH]4/Zr#??suW[PXjRZM^^C7WUXlluIoRLl+;H>O/7J4HOOh!Kjp<pcd4@M29nSj*4bPQQ8k15BZC8Qt?.i2@D&r$3$D%m!`U8k'=df>;"Z'hK_<D[UJQRYJe>%]Y:mmoimF)0\P55G!MiHaKHRk?f\I>qpunW+8`b/Iq.!Pr<];mpIc3eoNQs>G-uH>r]D'8%*>]liiC]N;acTA]?8J<Ui_ELa4,!NHEIg\@Y<\6"5IAL%fF7dH,rlR*>Oi,SaUIEsBrD:VZPJ*[!5_GuDCit3gQ]4+\MKVIaf@p?%#&-U*Xdn\k&Id9h61_!b$f3GNRrGJ5FYQVDkh5N+Sc17b%7.':64.P\]39cM"ORd*LAT?K:]BRlZZXTor4'SCLVb!cPZ=Y.c0jB%%aLFuN=+Qn(omoqV<a9f\0h"\&["^(jMCWsIW?d1(lO#@)>5:8hmuAQe"dWbSBGdlNa0'U=YtbjVX'*5K7L-5tB&gV;Y-ci(N\X'@%!&D3rG#rEM2>$B;3,9S*2D^F.E?CLO'u[m[mSh8JffNot_PPs=YW[J=qP0Q(S)@Yd^RdgRC(:ObWpM6*R=e11>q$*_b7:*Dj2\Ne%0tUJIH5UssV<9uBYW;B[d^eJUWjWM\E*@84EE2=PeVcalO&J44&k#K0jfAdE66;2q+_&<[7Zf%1"ll1K8$_Nb="IrT>o1'#N@8>S%-CYd&70G#rF6CEp<##hrnYgKTjVP64([S)o0on>*IrX>5H`4_YL61g9-Z^j9-!4u3rGXDT\a.$.$'f>kj3@9?BDB)G*R:J6Y/F^F%QW$e-#-1<07M5rJUo+Ob3%'dP<@tDuU)edIPpB&*::5^u19h>X71i\/kZX_=7b[W1['+>8SKN^JfVOBVQ:_dFR2NhK69G1[J^>^$%_%hY4$nA;Xm&Ds'>t,+2(-,8[>[>JU_l$X:RZ=oCg[>0pc1I\V`<PR?%nR_'$`H`.Qt,71Nj(jCN(8,u$&Q'Ve?I"%jBdD>PN4k[%:Qb^#A2TN0d@X8]Ck*#\S/)u1$9m-D0)?U]aeebhY/=Q^SD3qA)NSO::o:NH,ih\A@PiYce`p\WO>RD9>m"fcB42p?D]o3?Jn=[k%(Cu,R<.:(Q_=Q=:IAj>W5KX!LR`.5L#8Ij(=;VZ\*5(sEX.DY:S50Y4jtfu!fc[\$9o1Std>G)\[^:bcP#11tR;9EuYh&gGP$R@`%b3bKc^/C?PNfkXu<@8WNI+dX"fD)_#hicm$ht$%B1=Wiu0p9hS9XT(5m[TfE!gjfJW@XNMM[gq*h"7MqKs;&GKQ*62E2k)Lp3?8(%XB(]I^(deV[s)-'<mIAXI?JKb;`S3VKU>?7OJt[g@B(_A'lO3XQ'/m[B1Q7GO@"taRbGFV97\K`AUP@7AVP9`LiQKC+\5m?\@5>t%s2C7dQAte]OuZi$Pt\5(iuZpOUnGNpP]D+.AP.\R@E%M-0j<3ub8\u9$=6jK!7"I:!\W_Np]a!H7]?Q18$OqAN7QfNP\4*@nKA.D%d'DF:N9%G^Y'?HWdK#p!Lu4qH:+PD(Fu>&8-0FM`l70YAJeCdb@`W6_U$XfAj=p`66>#+,7[k31=][gCh#btp2mo!#'*_(.055U+%&Gr@23kDdr^q)gGQ="GYcKO6a7rXG%5(eB,>^oE"Y$$.'8.O3n+F+O)Y`SCXH5hsm`7Q#qp6E+O*E%mgPURA?MT")rb47fqK56^!%[gL;NfVqK0cR1a\:,?@:NMIP`"l`2*_InQ"ALNaB;1%([&DcglB>*udIDd\roZ(+[j\A)m&NJ1rW6qiN'])/]T/\m#6@93qCc/Zk%jh@*)aoua!+9#/X-]>B7+jm21!V3sHC=&5$O]91eh1L2:KPfrKO/m4LAgoK=hUJP)^XCD=8$:kXU0fVS0H2VLY1Ke2]TR(K0L3E[%fP?$TNF`,;BoE<:qKmFVaQi"2N[Tck(m[cW[i`(s<b,fQKOT]HFNp4?=Hn>]KhdSM5/]8,*?)e*F9m$?8B+$tp>3Au%IF-I-C*jk%CQ-R&JCT<!BLchAK!s0$=rVpR:q4mNSSILH]<%Dh7GUPpgLH\^+:0m#'f]*)''m=p3!O?H(k/;-&;R7haJioknfC/Opu*0R0jW5T%1/QPWkd*8<Q]?6o_J6<Y()(L)!Rgbug)k.tY.7Ct"t.ELV\Rp28.86%-*u0kj_X?J#*,_?BiU9&bruSZJfD</;jeik6qC/CgmW.X%r*j?NFM;-5<ntk8I<6(F./S"fcqE]!1t`1s];g#on(^U@'3tXCdEdsZg(;pj'E/=t:5);$.\-lFN_$R7&;(iu$?:Nld1R#8?ogLp%)`DM)0o*&OQ'!Ih3fjdO`<&2#H'G\J:2A&E;>95=/TaX@A@Y)@FCA,FDM[3t[92Eo76Y,cJ!GgJ8abS)Fum,g-5*&*JFf\K80FOV%%k8O%-`?5'Af;j=E@6$UHYBW1.u"^<'\"0&@jV!XiE/&[m\0NNJfb5C%o*kT+h7XgM."!g:h#ttF:9;n4%*eE'TO6cN8/aQG<>k.%H=_Yb4pcF$cHM+s5a7Wao1_Wj8ip8Zr^hubV`""8(#^hM88q/,QnJMS;oFpA7V*!0@@3e6j$G/+ELlR$_%04'9![04TCmUS2!h<*%G5CXLV`5cOCDa67h-S4+?7e#c)acj&H)C:Q+eiCcVfn]DEU)SeK=e)!)HhU;SOh*(^d<ER/;XdTf`c&[pWFqJQ:>h4Znujj>[)P*%^a[c9\6MIc&_B\(gF2X#SJ6@g!C0Z]53)o5TO"tC&hb6'Mb/*s?[FD-]`hBE*`7:r:MoZL$%=e)Ynaf[$3$THbOo]C,,YHdEW#29%A$/aI7-r_;aI"gs+VkBIW\&OSVR&jDC?i\<IPXch$h2_Jj-e&m`)#N*gIH"Wbq\U3U:486E@>!L9/NS\F!rm_.Rg=3J\B5lHXi^h%m^QN+4k7A)%a9;Lp<-'%J8ZEd<]@3&fmuI`fm<Y`"um\C=CU=uHZ1A]_eE3FX[Xf#[&1LaL-s\(TV9i7aO6p\l**o*!GU]NQQAgA%=QN;99(Y,2HY_.@FPZCbP8J.pD@Ar7&MKGM>=DT0"A4+;2JcnNB:=PA3odLg4]JDdOt7o'7u6kCY546-IucDmWk*X:3E.<60%D^"%6?Z625)c:1i>VD&`/?V61nL[HbqilPKq8'Uf50C+X_"CTB:mZ,YcR3)&V]HO?/%sRI<;q&A_O;Is2krM&iq=ETj(%K]qo=Fk,gMZ%;]R,b"HSQWAI<JPJM<k%fLA!,&qtj*hXsYE1Eq"kcL2X2ZBpr5kX'^8\Xbc`KA<?Q^kt'B,XG]La4.BYPJQkYSQ+-dO)Z!$!ZH:f%JC?^Eq^j_jYh[?^&*4+Bi7ns;>!#;!AaoL=R:f3([']0=6X9=d*[MbLZ#>?@NGk\h^\[nf>3L+WF*GPIffEDW>'$4K`?g!.#bQrF%!&Cnr+/U`"=$4X"B7jn?s"2bRh%]AueaMFB*ANh>qO:us68:\T6>R7jj:$_-G?6(onlcO>P\,4X#KP.?#0#%>Wmr-J<7i1T$`#ol%QGG7iEVmZ`lk(U;nNKuPCS'S)5d7D(>Vq2iO-t/02K+eT"A_jZG#n0oNrYN7Gr_[SM9lL4>5,gq$,.I<$$oJ]8rMT=Ems\HP:'GX%=:>LFhPo&"@\3IT"f;Si@U[.tpC^Htm\n]Wf#epM]i!$%:4*\RaeAud<C$C?4M<(X8bs0t+OS(V`pI!R9ilWUP#l/#&SOAqjX\d(%JWp.merrY3JhKaj/s;-(h-a1&WlB-2[1PHK)g\:AJTD/m29HWkDYS2i9A!WW`Wl)3KS+&p%l'J\U7e4mO;nfPN@#$&lhnifQHSdM%@d&f.<Tiap4(u]A-nJTpZhqA7TO1P/:cLpIp8mcOW#4+2j7"iEl,B`4:G_aWYAq#,d0't:+2u%KX_t;Y<uOkR3ugmNh4G,,q^/tL%7)XI?0o\3^-:o(lLSO3ZW@h"gM9)O(i+S]U)S91Sd3HF@-at*elO5_Dkskt(SjF)f`%X/>"[.05o;1);S0N[*CtYM.r\=@TF_35S%U4IabVMb$rl@*;M`s+8.Kr0h>G!B]h#YfXg[7l$;2>2ZcWk>##psd3ip,m"D8'>sG3UGW,eQUn(4LZbik$p@DRp5Mi^bXh90rJ3@%-YR#[q!4`j]aO"t-o=j9Z1*-Z6!dR)\=5(If<.\Sd+[0Qi#)Hh]2IIZJX,Wlb%j^Wd!m*ZKG%JYjD;XP,XmBPCbRp\H4LdM\hD69%g_s/-*0$/YH#$!-O'5fTU4pF<&8ZsLV*.Z&92r\DdM@*WLj\:`cIc!+Er$+cM%O)D9hU+o*Mo"oPX[+%M$rQQ_&du0Ti6-f40`V)%\_fsqC"=>:X%jh9@2*ngBH,acL=;-QTnMh<@QnI9/@Kde/=pm[DY?C2hV!J^.c/)5Lt6+c;i:MKR%YI2h-#HliH.BQ$B=7TLZ=GF%N7X[[f04nc.<FmQ>-RX8<CYR>5BDn)'gAB"WgnFmi_4iZYQAYInd4m?7+6USe*aK:iG*TgMNBmn5Pe<3ES79`q*rBGoul4_S'QIT%Hl,k-]0lF#Ja=]W=LGZgO;KHnSV"#mZG`t>^$_ReoJ3CbG)G`tMgT%@.s]2Odf]oT*cp"tX%).,jlf>/Po&HE&`4;^eZf;l9D`Zk%IUuH<eAgMsO32CMh16L8IJBOp=oF`39!2?lKp9H9Z67T0AU7)!eBD-]QrW4<bcGF[1Ld"HS.b9mMFY!j!_/APW(VQ..]XJClS&rP%aBK0heK18;okj"ILf[qKo!r6\TOc",,tsCe3&\;T6Tb/Np^5W^0Ue#Z6kGqhM]K12AZ7j\-Y2G:NF$S[T"#LhU#(h^MVKQ*#&,pI%iLXpaOC9e'B)/K_$(:!8f7`/[gg_C`d^Qqs?P[b14MFo<pGXY$FV_PZLj3u@=8o7T'q&(Qn54/R3SdrQf;B,WJ$e8*F;;j.LQ[2O%Q>f8(=14(keVLd6rl)1"@3i[*5N;[_[ME!]F3k/o:Ng$okr!tZ0lhE/<c5kuTNF9N[Wtf?o)8ZllW=uKl>GdcC"DW\U6-8=.Wh&G%2g\uA9d+6mnq@Ssp-6<B(nop=UZ78>9D&0#Xop4_Ym83+#Y>MK^!^oW"%Psr;*P$8dM=Jr!5stt)0CBE3[)X'RdC6#O&HSbO0U@d%j>#\o/sPefb!DUI0%'ja9,R9[hNR^)0Y=GWm=;73o;.ajGZ9Qt3Xn]C+q4@#MMsQ4K!NW$4fQ>u1Ed6gfRr/E-ST^)d]HIrLN^r[%Ba,:3Z@58(P*n68?VQCkmORIp<5c'%Yi1.+AD95QL2$`d+M=DTgNunElp0=c_sT!2A'2M8G3RB\=<V+PoJu)UEM;b@A6$>L\<gN`%kIn)=TJ<M#!RE^gSSSW@3)?4K$1OY^56uqV>8gnDlCd.@8!U46&f4B%T"PB-Ab_)8'lJ+nBLZ.]1rch7Ajl4k],%_;<6datNbXP6%kS5a!k806*<buWmLS=rY;V6/L^dcj\7M)ibQ/BJ*J6!\#;3Im#L3AIO3C9/!"%^T`K;p.3Ks#(8]e-"4Skg<;$_=D?U$jk7U'nBA%G&OM"fbp"!3W/4NIH2MpWIS7J'6=`-15#P1j])j\buUG^]*X?eKo<7BC"[Q@@f.HrR1Q7eEN3B]1FCQ4#o,aK4N!=Z5/qY:G2g5;%m"nU!KFfVI<_EYGYD=HPGo(.;[VQBkSBXBh\W1_f/t2-97&9ZL/4^Pf)3_!qDkA"nrDRK/G-h2\67o1-`SQhRk/3l88HM"Z@T3FY%(5u9oeN>=8k\A(Nh>)"?`Fk1FQNhb<`lc,VTaM=,3+7W*%d*/)X?g#NO5#Z"BlFB@1/6L\9,-^<S#<'I",'=CcH!h"+@5b1c-TiL%hUWQi3Z$<X<3d[&aSb!i`cSi?&FSm[467nVYm9JM_IbMQg!q@,W$oR$@sZU6KJ.-ug?pMpPhM'l?u?PKf#f\m$\3-$U;!:[H?h=W%c"%oAMtgJDZ63h/h!X3G^[h$#p"@`oMKB\OVIoW;+/4`N9T(3N6`8*(cqrD^ESU/qs1s3A>.emq\]SAAdh7l0S1d-[Fo`'GJU[t8%k-#m0@k74&_b(5.h]CKAfeWZOQ5d;#MfIB9Q>@=DcuP16NfJS<T`l7<:MVSUc1g3,E!cMtoAZm+X-oKf@k`!?VFYf8f_:$O<cGD%%f*7##K#;m\)4O172JFWVWaQYZpEEuCqRdG2EZJ#s^GsrY4lQ,YkQ=cS9(gk_aj=\-\hD?0NP8;[]JtTU>caNffOE>Nj/E(QA<!-o%N#N!]ed<HpZ+b_s?-Ie2/m%OodP@Z>-QjVCcJ8F7Al6;c5b%:<NPiG#*Ut$S$*2<dbTr4^MckV62Vg1<]"Z$i@K\H4@*H&4J/jY'%E/F&UNs:DR)oZ5C$Aj[,UT'R$!X+$Kn7<*FOAS:Q,^RCKM9>W`XU\BXAH;a'KWEd:`/cOUnFFtVNLSnZjc,a6SU3@qZXtqGZ(3kO%YZOo:mBKX>e&,2Q(b_?".3Ycn^fin$GrfGD]Nfmd@.siip)3c:Fh\3o[m5)k^l+i]QSE]5G5j`:F)T=ghh8P\mF@dbk,t>;\_EHY%mWd<3)0<9R0R*>B1&#[=\c#\cp\6>-q]G]_$RiYa:lSC,*W?[$//CmbWVmfC`B%1LJ!L_*Tpq*a:-Qr:r_3*,6k'6GD$X_!Ocm3K%AS5[R+_>D2*c7jLM!RQk%GCh#'tR2<oK+rX!qGHMo\NdRKY\."o?4eQKjEB60f*EJ0E$@@!2_=^A8p3iFF!36ZBoiGVh&A\'hM%P%e$$AMVgA+HnH6o(E%<j9;FB:Z:o[SN'CaXHXU82sP.Q=o656ql>_6juGT"=U5kimTB>`sa0JCiS$tI3S&J$Ho]/rFunU/Uo9q][O%68sQCKu@I+pr#`:3Qd@B?$3.DS"7mD?"h=%>U;S&+6M@&N`>"B[HXV'ku<\9G:^7m::sa5]cJ3mV^+t^]&c+c,]r3V+OmSI;Epue%CM/JogoJ$3=_]F#T,B*L8e_STc>pe$Oe`a#-7S2I1Bq=Qm(84TP'F#hTa_)pAPK]tA[sZ6T4PPr5&#h.3Qnf67+jBD(SC_+8aa7)%r_5R0akb/9J/<WZ<u;f]cgK_hdbJki[4Rt]\Kc"MFdBY#P@%++ceJ:Wan94:Ep'?ag_sDd99\.UMEa^R[sk>nH#BfP"$(7E.ECh9%,+:8E=JntU8%dE,$8!<7m0c%7@h*HQ?JS1H2UnFlrflV%g;m?:8pjA8`'_10T64VNEU8`E/=L5ckna)Ano-TY_huknk)mu2==mK%%oJ="LbQ[ilD)oU2\QYQsf+N<]PJGL?-h)!Z%pO23hh9a\)gij!BA*S=4#dV72cFo1>Kg&GC/."FdLkJ_=M[r&!)^TbM/bXX$VhT:%EVna$\7bZ"^;ot,4W5bF/X=*.]__&??U'#7j,`pVIXM1`c/[-Z?_*L3J,8&@HHkboDI.bikMs0mhgPP$c-Ho]GBZ!L?N'QA%hF/:%I.QC5*Zf6Kq!$%Q*cBlJHh[NWRh$&055gi&+!)MQqXFLSiV'1!^AkB;:4KQVrp&%CJ,.R<rrDr/+;+~>%AI9_PrivateDataEnd